{
  "version": 3,
  "sources": ["../../physicsjs/dist/physicsjs-full.js"],
  "sourcesContent": ["/**\n * PhysicsJS v0.7.0 - 2014-12-08\n * A modular, extendable, and easy-to-use physics engine for javascript\n * http://wellcaffeinated.net/PhysicsJS\n *\n * Copyright (c) 2014 Jasper Palfree <jasper@wellcaffeinated.net>\n * Licensed MIT\n */\n\n// ---\n// inside: src/intro.js\n\n(function (root, factory) {\n    if (typeof exports === 'object') {\n        // Node.\n        module.exports = factory.call(root);\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(function(){ return factory.call(root) });\n    } else {\n        // Browser globals (root is window)\n        root.Physics = factory.call(root);\n    }\n}(typeof window !== 'undefined' ? window : this, function () {\n\n'use strict';\n\nvar window = this;\nvar document = window.document;\n\n/** related to: Physics.world\n * Physics\n *\n * The top-level namespace. All of PhysicsJS is contained in\n * the `Physics` namespace.\n *\n * It may (and should) be invoked as a function to create a world instance. For all intensive purposes, [[Physics]] and [[Physics.world]] are the same thing.\n *\n * See [[new Physics.world]] for config options and function signature.\n *\n * Example:\n *\n * ```javascript\n * Physics( cfg, function( world ) {\n *     // use world\n * }); // -> world\n * ```\n **/\nvar Physics = function Physics(){\n\n    return Physics.world.apply(Physics, arguments);\n};\n\n/**\n * Physics.util\n *\n * Namespace for utility functions.\n **/\nPhysics.util = {};\n\n/**\n * == Special ==\n *\n * This section contains miscellaneous functionality.\n **/\n\n\n// ---\n// inside: src/math/aabb.js\n\n(function(){\n\n    /**\n     * Physics.aabb( minX, minY, maxX, maxY ) -> Object\n     * Physics.aabb( pt1, pt2 ) -> Object\n     * Physics.aabb( width, height[, pt] ) -> Object\n     * - minX (Number): The x coord of the \"top left\" point\n     * - minY (Number): The y coord of the \"top left\" point\n     * - maxX (Number): The x coord of the \"bottom right\" point\n     * - maxY (Number): The y coord of the \"bottom right\" point\n     * - pt1 (Vectorish): The first corner\n     * - pt2 (Vectorish): The opposite corner\n     * - width (Number): The width of the bounding box\n     * - height (Number): The height of the bounding box\n     * - pt (Vectorish): The center point of the bounding box\n     *\n     * Create an Axis Aligned Bounding Box.\n     *\n     * Signature:\n     *\n     * ```javascript\n     * {\n     *     x: Number, // the x coord of the center point\n     *     y: Number, // the y coord of the center point\n     *     hw: Number, // the half-width\n     *     hh: Number, // the half-height\n     * }\n     * ```\n     **/\n    Physics.aabb = function( minX, minY, maxX, maxY ){\n\n        var aabb = { x: 0, y: 0, hw: 0, hh: 0 };\n\n        if ( minX === undefined ){\n            return aabb;\n        }\n\n        if ( minX && minX.x !== undefined ){\n            // we have a point specified as first arg\n            maxX = minY.x;\n            maxY = minY.y;\n            minY = minX.y;\n            minX = minX.x;\n        }\n\n        if ( maxY === undefined && minX !== undefined && minY !== undefined ){\n\n            aabb.hw = minX * 0.5;\n            aabb.hh = minY * 0.5;\n\n            if ( maxX && maxX.x !== undefined ){\n                // we have a point specified as the third arg\n                // so we assume it's the center point\n                aabb.x = maxX.x;\n                aabb.y = maxX.y;\n            }\n\n            return aabb;\n        }\n\n        // here, we should have all the arguments as numbers\n        aabb.hw = Math.abs(maxX - minX) * 0.5;\n        aabb.hh = Math.abs(maxY - minY) * 0.5;\n        aabb.x = (maxX + minX) * 0.5;\n        aabb.y = (maxY + minY) * 0.5;\n\n        return aabb;\n    };\n\n    /**\n     * Physics.aabb.contains( aabb, pt ) -> Boolean\n     * - aabb (Object): The aabb\n     * - pt (Vectorish): The point\n     * + (Boolean): `true` if `pt` is inside `aabb`, `false` otherwise\n     *\n     * Check if a point is inside an aabb.\n     **/\n    Physics.aabb.contains = function contains( aabb, pt ){\n\n        return  (pt.x > (aabb.x - aabb.hw)) &&\n                (pt.x < (aabb.x + aabb.hw)) &&\n                (pt.y > (aabb.y - aabb.hh)) &&\n                (pt.y < (aabb.y + aabb.hh));\n    };\n\n    /**\n     * Physics.aabb.clone( aabb ) -> Object\n     * - aabb (Object): The aabb to clone\n     * + (Object): The clone\n     *\n     * Clone an aabb.\n     **/\n    Physics.aabb.clone = function( aabb ){\n        return {\n            x: aabb.x,\n            y: aabb.y,\n            hw: aabb.hw,\n            hh: aabb.hh\n        };\n    };\n\n    /**\n     * Physics.aabb.union( aabb1, aabb2[, modify] ) -> Object\n     * - aabb1 (Object): The first aabb (returned if modify is `true`)\n     * - aabb2 (Object): The second aabb\n     * + (Object): The union of two aabbs. If modify is `true`, then the first aabb will be modified and returned.\n     *\n     * Get the union of two aabbs.\n     **/\n    Physics.aabb.union = function( aabb1, aabb2, modify ){\n\n        var ret = modify === true ? aabb1 : {}\n            ,maxX = Math.max( aabb1.x + aabb1.hw, aabb2.x + aabb2.hw )\n            ,maxY = Math.max( aabb1.y + aabb1.hh, aabb2.y + aabb2.hh )\n            ,minX = Math.min( aabb1.x - aabb1.hw, aabb2.x - aabb2.hw )\n            ,minY = Math.min( aabb1.y - aabb1.hh, aabb2.y - aabb2.hh )\n            ;\n\n        ret.hw = Math.abs(maxX - minX) * 0.5;\n        ret.hh = Math.abs(maxY - minY) * 0.5;\n        ret.x = (maxX + minX) * 0.5;\n        ret.y = (maxY + minY) * 0.5;\n\n        return ret;\n    };\n\n\n    /**\n     * Physics.aabb.overlap( aabb1, aabb2 ) -> Boolean\n     * - aabb1 (Object): The first aabb\n     * - aabb2 (Object): The second aabb\n     * + (Boolean): `true` if they overlap, `false` otherwise\n     *\n     * Check if two AABBs overlap.\n     **/\n    Physics.aabb.overlap = function( aabb1, aabb2 ){\n\n        var min1 = aabb1.x - aabb1.hw\n            ,min2 = aabb2.x - aabb2.hw\n            ,max1 = aabb1.x + aabb1.hw\n            ,max2 = aabb2.x + aabb2.hw\n            ;\n\n        // first check x-axis\n\n        if ( (min2 <= max1 && max1 <= max2) || (min1 <= max2 && max2 <= max1) ){\n            // overlap in x-axis\n            // check y...\n            min1 = aabb1.y - aabb1.hh;\n            min2 = aabb2.y - aabb2.hh;\n            max1 = aabb1.y + aabb1.hh;\n            max2 = aabb2.y + aabb2.hh;\n\n            return (min2 <= max1 && max1 <= max2) || (min1 <= max2 && max2 <= max1);\n        }\n\n        // they don't overlap\n        return false;\n    };\n\n}());\n\n\n// ---\n// inside: src/math/gjk.js\n\n(function(){\n\n    // the algorithm doesn't always converge for curved shapes.\n    // need these constants to dictate how accurate we want to be.\n    var gjkAccuracy = 0.0001;\n    var gjkMaxIterations = 100;\n\n    // get the next search direction from two simplex points\n    var getNextSearchDir = function getNextSearchDir( ptA, ptB, dir ){\n\n        var ABdotB = ptB.normSq() - ptB.dot( ptA )\n            ,ABdotA = ptB.dot( ptA ) - ptA.normSq()\n            ;\n\n        // if the origin is farther than either of these points\n        // get the direction from one of those points to the origin\n        if ( ABdotB < 0 ){\n\n            return dir.clone( ptB ).negate();\n\n        } else if ( ABdotA > 0 ){\n\n            return dir.clone( ptA ).negate();\n\n        // otherwise, use the perpendicular direction from the simplex\n        } else {\n\n            // dir = AB = B - A\n            dir.clone( ptB ).vsub( ptA );\n            // if (left handed coordinate system)\n            // A cross AB < 0 then get perpendicular counterclockwise\n            return dir.perp( (ptA.cross( dir ) > 0) );\n        }\n    };\n\n    /** hide\n     * getClosestPoints( simplex ) -> Object\n     * - simplex (Array): The simplex\n     *\n     * Figure out the closest points on the original objects\n     * from the last two entries of the simplex\n     **/\n    var getClosestPoints = function getClosestPoints( simplex ){\n\n        // see http://www.codezealot.org/archives/153\n        // for algorithm details\n\n        // we know that the position of the last point\n        // is very close to the previous. (by nature of the distance test)\n        // this won't give great results for the closest\n        // points algorithm, so let's use the previous two\n        var len = simplex.length\n            ,last = simplex[ len - 2 ]\n            ,prev = simplex[ len - 3 ]\n            ,scratch = Physics.scratchpad()\n            ,A = scratch.vector().clone( last.pt )\n            // L = B - A\n            ,L = scratch.vector().clone( prev.pt ).vsub( A )\n            ,lambdaB\n            ,lambdaA\n            ;\n\n        if ( L.equals(Physics.vector.zero) ){\n\n            // oh.. it's a zero vector. So A and B are both the closest.\n            // just use one of them\n            return scratch.done({\n\n                a: last.a,\n                b: last.b\n            });\n        }\n\n        lambdaB = - L.dot( A ) / L.normSq();\n        lambdaA = 1 - lambdaB;\n\n        if ( lambdaA <= 0 ){\n            // woops.. that means the closest simplex point\n            // isn't on the line it's point B itself\n            return scratch.done({\n                a: prev.a,\n                b: prev.b\n            });\n        } else if ( lambdaB <= 0 ){\n            // vice versa\n            return scratch.done({\n                a: last.a,\n                b: last.b\n            });\n        }\n\n        // guess we'd better do the math now...\n        return scratch.done({\n            // a closest = lambdaA * Aa + lambdaB * Ba\n            a: A.clone( last.a ).mult( lambdaA ).vadd( L.clone( prev.a ).mult( lambdaB ) ).values(),\n            // b closest = lambdaA * Ab + lambdaB * Bb\n            b: A.clone( last.b ).mult( lambdaA ).vadd( L.clone( prev.b ).mult( lambdaB ) ).values()\n        });\n    };\n\n    /**\n     * Physics.gjk( support(axis)[, seed, checkOverlapOnly, debugFn] ) -> Object\n     * - support (Function): The support function. Must return an object containing\n       the witness points (`.a`, `.b`) and the support point (`.pt`).\n       Recommended to use simple objects.\n       Eg:\n       ```javascript\n       return {\n            a: { x: 1, y:2 },\n            b: { x: 3, y: 4 },\n            pt: { x: 2, y: 2 }\n       };\n       ```\n     * - axis (Physics.vector): The axis to search\n     * - seed (Physics.vector): The starting direction for the simplex (defaults to x-axis)\n     * - checkOverlapOnly (Boolean): only check whether there is an overlap, don't calculate the depth\n     * - debugFn (Function): For debugging. Called at every iteration with the current simplex.\n     *\n     * Implementation agnostic GJK function.\n     *\n     * Gilbert–Johnson–Keerthi object collison algorithm\n     * For general information about GJK see:\n     * - [www.codezealot.org/archives/88](http://www.codezealot.org/archives/88)\n     * - [mollyrocket.com/849](http://mollyrocket.com/849)\n     *\n     * The algorithm information returned:\n     * ```javascript\n     * {\n     *     overlap: Boolean,\n     *     simplex: [] // array containing simplex points as simple x/y objects\n     * }\n     * ```\n     **/\n    var gjk = function gjk( support, seed, checkOverlapOnly, debugFn ){\n\n        var overlap = false\n            ,noOverlap = false // if we're sure we're not overlapping\n            ,distance = false\n            ,simplex = []\n            ,simplexLen = 1\n            // setup a scratchpad of temporary cheap objects\n            ,scratch = Physics.scratchpad()\n            // use seed as starting direction or use x axis\n            ,dir = scratch.vector().clone(seed || Physics.vector.axis[ 0 ])\n            ,last = scratch.vector()\n            ,lastlast = scratch.vector()\n            // some temp vectors\n            ,v1 = scratch.vector()\n            ,v2 = scratch.vector()\n            ,ab\n            ,ac\n            ,sign\n            ,tmp\n            ,iterations = 0\n            ;\n\n        // get the first Minkowski Difference point\n        tmp = support( dir );\n        simplexLen = simplex.push( tmp );\n        last.clone( tmp.pt );\n        // negate d for the next point\n        dir.negate();\n\n        // start looping\n        while ( ++iterations ) {\n\n            // swap last and lastlast, to save on memory/speed\n            last.swap(lastlast);\n            // push a new point to the simplex because we haven't terminated yet\n            tmp = support( dir );\n            simplexLen = simplex.push( tmp );\n            last.clone( tmp.pt );\n\n            if ( debugFn ){\n                debugFn( simplex );\n            }\n\n            if ( last.equals(Physics.vector.zero) ){\n                // we happened to pick the origin as a support point... lucky.\n                overlap = true;\n                break;\n            }\n\n            // check if the last point we added actually passed the origin\n            if ( !noOverlap && last.dot( dir ) <= 0.0 ) {\n                // if the point added last was not past the origin in the direction of d\n                // then the Minkowski difference cannot possibly contain the origin since\n                // the last point added is on the edge of the Minkowski Difference\n\n                // if we just need the overlap...\n                if ( checkOverlapOnly ){\n                    break;\n                }\n\n                noOverlap = true;\n            }\n\n            // if it's a line...\n            if ( simplexLen === 2 ){\n\n                // otherwise we need to determine if the origin is in\n                // the current simplex and act accordingly\n\n                dir = getNextSearchDir( last, lastlast, dir );\n                // continue...\n\n            // if it's a triangle... and we're looking for the distance\n            } else if ( noOverlap ){\n\n                // if we know there isn't any overlap and\n                // we're just trying to find the distance...\n                // make sure we're getting closer to the origin\n                dir.normalize();\n                tmp = lastlast.dot( dir );\n                if ( Math.abs(tmp - last.dot( dir )) < gjkAccuracy ){\n\n                    distance = -tmp;\n                    break;\n                }\n\n                // if we are still getting closer then only keep\n                // the points in the simplex that are closest to\n                // the origin (we already know that last is closer\n                // than the previous two)\n                // the norm is the same as distance(origin, a)\n                // use norm squared to avoid the sqrt operations\n                if (lastlast.normSq() < v1.clone(simplex[ 0 ].pt).normSq()) {\n\n                    simplex.shift();\n\n                } else {\n\n                    simplex.splice(1, 1);\n                }\n\n                dir = getNextSearchDir( v1.clone(simplex[ 1 ].pt), v2.clone(simplex[ 0 ].pt), dir );\n                // continue...\n\n            // if it's a triangle\n            } else {\n\n                // we need to trim the useless point...\n\n                ab = ab || scratch.vector();\n                ac = ac || scratch.vector();\n\n                // get the edges AB and AC\n                ab.clone( lastlast ).vsub( last );\n                ac.clone( simplex[ 0 ].pt ).vsub( last );\n\n                // here normally people think about this as getting outward facing\n                // normals and checking dot products. Since we're in 2D\n                // we can be clever...\n                sign = ab.cross( ac ) > 0;\n\n                if ( sign ^ (last.cross( ab ) > 0) ){\n\n                    // ok... so there's an XOR here... don't freak out\n                    // remember last = A = -AO\n                    // if AB cross AC and AO cross AB have the same sign\n                    // then the origin is along the outward facing normal of AB\n                    // so if AB cross AC and A cross AB have _different_ (XOR) signs\n                    // then this is also the case... so we proceed...\n\n                    // point C is dead to us now...\n                    simplex.shift();\n\n                    // if we haven't deduced that we've enclosed the origin\n                    // then we know which way to look...\n                    // morph the ab vector into its outward facing normal\n                    ab.perp( !sign );\n\n                    // swap\n                    dir.swap( ab );\n\n                    // continue...\n\n                    // if we get to this if, then it means we can continue to look along\n                    // the other outward normal direction (ACperp)\n                    // if we don't see the origin... then we must have it enclosed\n                } else if ( sign ^ (ac.cross( last ) > 0) ){\n                    // then the origin is along the outward facing normal\n                    // of AC; (ACperp)\n\n                    // point B is dead to us now...\n                    simplex.splice(1, 1);\n\n                    ac.perp( sign );\n\n                    // swap\n                    dir.swap( ab );\n\n                    // continue...\n\n                } else {\n\n                    // we have enclosed the origin!\n                    overlap = true;\n                    // fewf... take a break\n                    break;\n                }\n            }\n\n            // woah nelly... that's a lot of iterations.\n            // Stop it!\n            if (iterations > gjkMaxIterations){\n                scratch.done();\n                return {\n                    simplex: simplex,\n                    iterations: iterations,\n                    distance: 0,\n                    maxIterationsReached: true\n                };\n            }\n        }\n\n        // free workspace\n        scratch.done();\n\n        tmp = {\n            overlap: overlap,\n            simplex: simplex,\n            iterations: iterations\n        };\n\n        if ( distance !== false ){\n\n            tmp.distance = distance;\n            tmp.closest = getClosestPoints( simplex );\n        }\n\n        return tmp;\n    };\n\n    Physics.gjk = gjk;\n\n})();\n\n\n// ---\n// inside: src/math/statistics.js\n\n(function(){\n\n    Physics.statistics = {\n        /**\n         * Physics.statistics.pushRunningAvg( v, k, m, s ) -> Array\n         * - v (Number): is value to push\n         * - k (Number): is num elements\n         * - m (Number): is current mean\n         * - s (Number): is current s value\n         * + (Array): Returns a 2 element array containing the next mean, and s value\n         *\n         * Push a value to a running average calculation.\n         * see [http://www.johndcook.com/blog/standard_deviation]\n         *\n         * Note: variance can be calculated from the \"s\" value by multiplying it by `1/(k-1)`\n         **/\n        pushRunningAvg: function( v, k, m, s ){\n\n            var x = v - m;\n\n            // Mk = Mk-1+ (xk – Mk-1)/k\n            // Sk = Sk-1 + (xk – Mk-1)*(xk – Mk).\n            m += x / k;\n            s += x * (v - m);\n            return [m, s];\n        },\n\n        /**\n        * Physics.statistics.pushRunningVectorAvg( v, k, m[, s] )\n        * - v (Physics.vector): is vector to push\n        * - k (Number): is num elements\n        * - m (Physics.vector): is current mean\n        * - s (Physics.vector): is current s value\n        *\n        * Push a vector to a running vector average calculation.\n        * see [http://www.johndcook.com/blog/standard_deviation]\n        *\n        * Calculations are done in place. The `m` and `s` parameters are altered.\n        *\n        * Note: variance can be calculated from the \"s\" vector by multiplying it by `1/(k-1)`\n        *\n        * If s value is ommitted it won't be used.\n        **/\n        pushRunningVectorAvg: function( v, k, m, s ){\n            var invK = 1/k\n                ,x = v.get(0) - m.get(0)\n                ,y = v.get(1) - m.get(1)\n                ;\n\n            // Mk = Mk-1+ (xk – Mk-1)/k\n            // Sk = Sk-1 + (xk – Mk-1)*(xk – Mk).\n            m.add( x * invK, y * invK );\n\n            if ( s ){\n                x *= v.get(0) - m.get(0);\n                y *= v.get(1) - m.get(1);\n\n                s.add( x, y );\n            }\n        }\n    };\n})();\n\n\n// ---\n// inside: src/math/transform.js\n\n(function(){\n    \n    /**\n     * class Physics.transform\n     * \n     * Vector Transformations class for rotating and translating vectors\n     **/\n\n    /**\n     * new Physics.transform( [vect, angle, origin] )\n     * new Physics.transform( transform )\n     * - vect (Vectorish): Translation vector\n     * - transform (Physics.transform): Transform to copy\n     * - angle (Number): Angle (radians) to use for rotation\n     * - origin (Vectorish): Origin of the rotation\n     * \n     * Transform Constructor / Factory\n     **/\n    var Transform = function Transform( vect, angle, origin ) {\n\n        if (!(this instanceof Transform)){\n            return new Transform( vect, angle );\n        }\n\n        this.v = new Physics.vector();\n        this.o = new Physics.vector(); // origin of rotation\n        \n        if ( vect instanceof Transform ){\n\n            this.clone( vect );\n            return;\n        }\n\n        if (vect){\n            this.setTranslation( vect );\n        }\n\n        this.setRotation( angle || 0, origin );\n    };\n\n    /**\n     * Physics.transform#setTranslation( vect ) -> this\n     * - vect (Vectorish): The translation vector\n     * \n     * Set the translation portion of the transform.\n     **/\n    Transform.prototype.setTranslation = function( vect ){\n\n        this.v.clone( vect );\n        return this;\n    };\n\n    /**\n     * Physics.transform#setRotation( angle[, origin ] ) -> this\n     * - angle (Number): Angle (radians) to use for rotation\n     * - origin (Vectorish): Origin of the rotation\n     *\n     * Set the rotation portion of the transform\n     **/\n    Transform.prototype.setRotation = function( angle, origin ){\n\n        this.cosA = Math.cos( angle );\n        this.sinA = Math.sin( angle );\n\n        if ( origin ){\n            this.o.clone( origin );\n        } else {\n            this.o.zero();\n        }\n\n        return this;\n    };\n\n    /**\n     * Physics.transform#clone( [transform] ) -> this|Physics.transform\n     * - transform (Physics.transform): Transform to copy\n     * + (this): For chaining\n     * + (Physics.transform): New copy of `this` if none is specified as an argument\n     * \n     * Clone another transform. Or clone self into new transform.\n     **/\n    Transform.prototype.clone = function( t ){\n\n        if ( t ){\n\n            this.setTranslation( t.v );\n            this.cosA = t.cosA;\n            this.sinA = t.sinA;\n            this.o.clone( t.o );\n\n            return this;\n        }\n\n        return new Transform( this );\n    };\n\n    Physics.transform = Transform;\n\n})();\n\n// ---\n// inside: src/math/vector.js\n\n(function(window){\n\n    // http://jsperf.com/vector-storage-test/2\n\n    // cached math functions\n    // TODO: might be faster not to do this???\n    var sqrt = Math.sqrt\n        ,min = Math.min\n        ,max = Math.max\n        ,acos = Math.acos\n        ,atan2 = Math.atan2\n        ,TWOPI = Math.PI * 2\n        ,typedArrays = !!window.Float64Array\n        ;\n\n    /**\n     * class Physics.vector\n     *\n     * The vector class and factory function.\n     *\n     * Call `Physics.vector` with the same arguments as\n     * [[new Physics.vector]] to create an instance.\n     *\n     * The vector methods mostly modify the vector instance.\n     * This makes computations faster because creating vectors\n     * is avoided.\n     *\n     * Creating vectors is generally an expensive operation\n     * so try to avoid doing this in the simulation loop.\n     * Instead you can use [[Physics.scratchpad]] to get\n     * temporary vectors for use in performance critical\n     * code.\n     *\n     * _Note_: The coordinate system is left-handed, meaning that\n     * the clockwise angular direction is positive. This has implications\n     * for the cross-product rule.\n     **/\n\n    /** section: Special\n     * class Vectorish\n     *\n     * Any object with `.x` and `.y` properties.\n     *\n     * A `Vectorish` isn't really a class. In this documentation, when\n     * an argument is specified as a `Vectorish` it means either a true\n     * [[Physics.vector]] instance, or an object literal with `.x` and `.y`\n     * properties.\n     **/\n\n    /**\n     * new Physics.vector( x, y )\n     * new Physics.vector( vect )\n     * - x (Number): The x coordinate\n     * - y (Number): The y coordinate\n     * - vect (Vectorish): A vector-like object to clone\n     *\n     * Vector Constructor.\n     **/\n    var Vector = function Vector( x, y ) {\n\n        // enforce instantiation\n        if ( !(this instanceof Vector) ){\n\n            return new Vector( x, y );\n        }\n\n        // arrays to store values\n        // x = _[0]\n        // y = _[1]\n        // norm = _[3]\n        // normsq = _[4]\n\n        /** internal\n         * Physics.vector#_\n         *\n         * Private storage array for data.\n         *\n         * Do not access this directly. Private. Keep out.\n         **/\n        if (typedArrays){\n            this._ = new Float64Array(5);\n        } else {\n            this._ = [];\n        }\n\n        if (x && (x.x !== undefined || x._ && x._.length)){\n\n            this.clone( x );\n\n        } else {\n\n            this.recalc = true; //whether or not recalculate norms\n            this.set( x, y );\n        }\n    };\n\n    Object.defineProperties( Vector.prototype, {\n        /**\n         * Physics.vector#x\n         *\n         * Getter/setter property for the x coordinate.\n         **/\n        x: {\n            get: function(){\n                return +this._[0];\n            },\n            set: function( x ){\n                x = +x || 0;\n                this.recalc = ( x === this._[0] );\n                this._[0] = x;\n            }\n        },\n        /**\n         * Physics.vector#y\n         *\n         * Getter/setter property for the y coordinate.\n         **/\n        y: {\n            get: function(){\n                return +this._[1];\n            },\n            set: function( y ){\n                y = +y || 0;\n                this.recalc = ( y === this._[1] );\n                this._[1] = y;\n            }\n        }\n    });\n\n    //\n    // Methods\n    //\n\n    /**\n     * Physics.vector#set( x, y ) -> this\n     * - x (Number): x coordinate\n     * - y (Number): y coordinate\n     *\n     * Sets the x and y components of this vector.\n     **/\n    Vector.prototype.set = function( x, y ) {\n\n        this.recalc = true;\n\n        this._[0] = +x || 0;\n        this._[1] = +y || 0;\n        return this;\n    };\n\n    /** deprecated: 0.6.0..1.0.0\n     * Physics.vector#get( idx ) -> Number\n     * - idx (Number): The coordinate index (0 or 1)\n     *\n     * Get the x or y component by index.\n     **/\n    Vector.prototype.get = function( n ){\n\n        return this._[ n ];\n    };\n\n    /**\n     * Physics.vector#vadd( v ) -> this\n     * - v (Physics.vector): vector to add\n     *\n     * Add a [[Physics.vector]] to `this`.\n     **/\n    Vector.prototype.vadd = function( v ) {\n\n        this.recalc = true;\n\n        this._[0] += v._[0];\n        this._[1] += v._[1];\n        return this;\n    };\n\n    /**\n     * Physics.vector#vsub( v ) -> this\n     * - v (Physics.vector): vector to subtract\n     *\n     * Subtract a [[Physics.vector]] from `this`.\n     **/\n    Vector.prototype.vsub = function( v ) {\n\n        this.recalc = true;\n\n        this._[0] -= v._[0];\n        this._[1] -= v._[1];\n        return this;\n    };\n\n    /**\n     * Physics.vector#add( x, y ) -> this\n     * - x (Number): amount to add to the x coordinate\n     * - y (Number): amount to add to the y coordinate\n     *\n     * Add scalars [[Physics.vector]] to the coordinates.\n     **/\n    Vector.prototype.add = function( x, y ){\n\n        this.recalc = true;\n\n        this._[0] += +x || 0;\n        this._[1] += +y || 0;\n        return this;\n    };\n\n    /**\n     * Physics.vector#sub( x, y ) -> this\n     * - x (Number): amount to subtract from the x coordinate\n     * - y (Number): amount to subtract from the y coordinate\n     *\n     * Subtract scalars [[Physics.vector]] from the coordinates.\n     **/\n    Vector.prototype.sub = function( x, y ){\n\n        this.recalc = true;\n\n        this._[0] -= x;\n        this._[1] -= y === undefined? 0 : y;\n        return this;\n    };\n\n    /**\n     * Physics.vector#mult( m ) -> this\n     * - m (Number): amount to multiply this vector by\n     *\n     * Multiply this by a scalar quantity.\n     *\n     * Same as scaling the vector by an amount `m`.\n     **/\n    Vector.prototype.mult = function( m ) {\n\n        if ( !this.recalc ){\n\n            this._[4] *= m * m;\n            this._[3] *= m;\n        }\n\n        this._[0] *= m;\n        this._[1] *= m;\n        return this;\n    };\n\n    /**\n     * Physics.vector#dot( v ) -> Number\n     * - v (Physics.vector): The other vector\n     *\n     * Compute the dot product of this vector with `v`.\n     **/\n    Vector.prototype.dot = function( v ) {\n\n        return (this._[0] * v._[0]) + (this._[1] * v._[1]);\n    };\n\n    /**\n     * Physics.vector#cross( v ) -> Number\n     * - v (Physics.vector): The other vector\n     *\n     * Compute the (left-handed) cross product of this vector with `v`.\n     **/\n    Vector.prototype.cross = function( v ) {\n\n        return ( - this._[0] * v._[1]) + (this._[1] * v._[0]);\n    };\n\n    /**\n     * Physics.vector#proj( v ) -> Number\n     * - v (Physics.vector): The other vector\n     *\n     * Compute the [scalar projection](http://en.wikipedia.org/wiki/Vector_projection#Scalar_projection_2) of this along `v`.\n     **/\n    Vector.prototype.proj = function( v ){\n\n        return this.dot( v ) / v.norm();\n    };\n\n\n    /**\n     * Physics.vector#vproj( v ) -> this\n     * - v (Physics.vector): The other vector\n     *\n     * Compute the [vector projection](http://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2) of this along `v` and copy the result into this vector.\n     **/\n    Vector.prototype.vproj = function( v ){\n\n        var m = this.dot( v ) / v.normSq();\n        return this.clone( v ).mult( m );\n    };\n\n    /**\n     * Physics.vector#angle( [v] ) -> Number\n     * - v (Physics.vector): The other vector\n     * + (Number): The angle in radians between this vector and the x-axis OR `v` if specified\n     *\n     * Compute the angle between `this` and vector `v` or this and x axis.\n     **/\n    Vector.prototype.angle = function( v ){\n\n        var ang;\n\n        if ( this.equals( Vector.zero ) ){\n\n            if ( v ){\n                return v.angle();\n            } else {\n                return NaN;\n            }\n\n        } else {\n\n            if ( v && !v.equals( Vector.zero ) ){\n                ang = atan2( this._[1] * v._[0] - this._[0] * v._[1], this._[0] * v._[0] + this._[1] * v._[1]);\n            } else {\n                ang = atan2( this._[ 1 ], this._[ 0 ] );\n            }\n        }\n\n        while (ang > Math.PI){\n            ang -= TWOPI;\n        }\n\n        while (ang < -Math.PI){\n            ang += TWOPI;\n        }\n\n        return ang;\n    };\n\n    /**\n     * Physics.vector#angle2( left, right ) -> Number\n     * - left (Physics.vector): The position on the left\n     * - right (Physics.vector): The position on the right\n     *\n     * Compute the angle created between three points; left -> this -> right.\n     **/\n    Vector.prototype.angle2 = function( left, right ){\n\n        var x1 = left._[0] - this._[0]\n            ,y1 = left._[1] - this._[1]\n            ,x2 = right._[0] - this._[0]\n            ,y2 = right._[1] - this._[1]\n            ,ang = atan2( y1 * x2 - x1 * y2, x1 * x2 + y1 * y2)\n            ;\n\n        while (ang > Math.PI){\n            ang -= TWOPI;\n        }\n\n        while (ang < -Math.PI){\n            ang += TWOPI;\n        }\n\n        return ang;\n    };\n\n    /**\n     * Physics.vector#norm() -> Number\n     *\n     * Compute the norm (length) of this vector.\n     **/\n    Vector.prototype.norm = function() {\n\n        if (this.recalc){\n            this.recalc = false;\n            this._[4] = (this._[0] * this._[0] + this._[1] * this._[1]);\n            this._[3] = sqrt( this._[4] );\n        }\n\n        return this._[3];\n    };\n\n    /**\n     * Physics.vector#normSq() -> Number\n     *\n     * Compute the norm (length) squared of this vector.\n     **/\n    Vector.prototype.normSq = function() {\n\n        if (this.recalc){\n            this.recalc = false;\n            this._[4] = (this._[0] * this._[0] + this._[1] * this._[1]);\n            this._[3] = sqrt( this._[4] );\n        }\n\n        return this._[4];\n    };\n\n    /**\n     * Physics.vector#dist( v ) -> Number\n     * - v (Physics.vector): The other vector\n     *\n     * Compute the distance from this vector to another vector `v`.\n     **/\n    Vector.prototype.dist = function( v ) {\n\n        var dx, dy;\n        return sqrt(\n            (dx = (v._[0] - this._[0])) * dx +\n            (dy = (v._[1] - this._[1])) * dy\n        );\n    };\n\n    /**\n     * Physics.vector#distSq( v ) -> Number\n     * - v (Physics.vector): The other vector\n     *\n     * Compute the distance squared from this vector to another vector `v`.\n     **/\n    Vector.prototype.distSq = function( v ) {\n\n        var dx, dy;\n        return (\n            (dx = (v._[0] - this._[0])) * dx +\n            (dy = (v._[1] - this._[1])) * dy\n        );\n    };\n\n    /**\n     * Physics.vector#perp( [ccw] ) -> this\n     * - ccw (Boolean): flag to indicate that we should rotate counterclockwise\n     *\n     * Change this vector into a vector that will be perpendicular.\n     *\n     * In other words, rotate by (+-) 90 degrees.\n     **/\n    Vector.prototype.perp = function( ccw ) {\n\n        var tmp = this._[0]\n            ;\n\n        if ( ccw ){\n\n            // x <-> y\n            // negate y\n            this._[0] = this._[1];\n            this._[1] = -tmp;\n\n        } else {\n\n            // x <-> y\n            // negate x\n            this._[0] = -this._[1];\n            this._[1] = tmp;\n        }\n\n        return this;\n    };\n\n    /**\n     * Physics.vector#normalize() -> this\n     *\n     * Normalise this vector, making it a unit vector.\n     **/\n    Vector.prototype.normalize = function() {\n\n        var m = this.norm();\n\n        // means it's a zero Vector\n        if ( m === 0 ){\n            return this;\n        }\n\n        m = 1/m;\n\n        this._[0] *= m;\n        this._[1] *= m;\n\n        this._[3] = 1.0;\n        this._[4] = 1.0;\n\n        return this;\n    };\n\n    /**\n     * Physics.vector#transform( t ) -> this\n     * - t (Physics.transform): The transformation to apply\n     *\n     * Apply a [[Physics.transform]] to this vector.\n     **/\n    Vector.prototype.transform = function( t ){\n\n        var sinA = t.sinA\n            ,cosA = t.cosA\n            ,x = t.o._[ 0 ]\n            ,y = t.o._[ 1 ]\n            ;\n\n        this._[ 0 ] -= x;\n        this._[ 1 ] -= y;\n\n        // rotate about origin \"o\" then translate\n        return this.set(\n            this._[ 0 ] * cosA - this._[ 1 ] * sinA + x + t.v._[ 0 ],\n            this._[ 0 ] * sinA + this._[ 1 ] * cosA + y + t.v._[ 1 ]\n        );\n    };\n\n    /**\n     * Physics.vector#transformInv( t ) -> this\n     * - t (Physics.transform): The transformation to apply the inverse of\n     *\n     * Apply an inverse [[Physics.transform]] to this vector.\n     **/\n    Vector.prototype.transformInv = function( t ){\n\n        var sinA = t.sinA\n            ,cosA = t.cosA\n            ,x = t.o._[ 0 ]\n            ,y = t.o._[ 1 ]\n            ;\n\n        this._[ 0 ] -= x + t.v._[ 0 ];\n        this._[ 1 ] -= y + t.v._[ 1 ];\n\n        // inverse translate then inverse rotate about origin \"o\"\n        return this.set(\n            this._[ 0 ] * cosA + this._[ 1 ] * sinA + x,\n            - this._[ 0 ] * sinA + this._[ 1 ] * cosA + y\n        );\n    };\n\n    /**\n     * Physics.vector#rotate( t ) -> this\n     * Physics.vector#rotate( ang[, o] ) -> this\n     * - t (Physics.transform): The transformation to apply the rotational part of\n     * - ang (Number): The angle (in radians), to rotate by\n     * - o (Vectorish): The point of origin of the rotation\n     *\n     * Rotate this vector.\n     *\n     * An angle and rotation origin can be specified,\n     * or a transform can be specified and only the rotation\n     * portion of that transform will be applied\n     **/\n    Vector.prototype.rotate = function( t, o ){\n\n        var sinA\n            ,cosA\n            ,x = 0\n            ,y = 0\n            ;\n\n        if ( typeof t === 'number' ){\n            sinA = Math.sin( t );\n            cosA = Math.cos( t );\n\n            if ( o ){\n                x = o.x;\n                y = o.y;\n            }\n        } else {\n            sinA = t.sinA;\n            cosA = t.cosA;\n\n            x = t.o._[ 0 ];\n            y = t.o._[ 1 ];\n        }\n\n        this._[ 0 ] -= x;\n        this._[ 1 ] -= y;\n\n        return this.set(\n            this._[ 0 ] * cosA - this._[ 1 ] * sinA + x,\n            this._[ 0 ] * sinA + this._[ 1 ] * cosA + y\n        );\n    };\n\n    /**\n     * Physics.vector#rotateInv( t ) -> this\n     * - t (Physics.transform): The transformation to apply the inverse rotational part of\n     *\n     * Apply the inverse rotation of a transform.\n     *\n     * Only the inverse rotation portion of\n     * that transform will be applied.\n     **/\n    Vector.prototype.rotateInv = function( t ){\n\n        return this.set(\n            (this._[ 0 ] - t.o._[ 0 ]) * t.cosA + (this._[ 1 ] - t.o._[ 1 ]) * t.sinA + t.o._[ 0 ],\n            -(this._[ 0 ] - t.o._[ 0 ]) * t.sinA + (this._[ 1 ] - t.o._[ 1 ]) * t.cosA + t.o._[ 1 ]\n        );\n    };\n\n    /**\n     * Physics.vector#translate( t ) -> this\n     * - t (Physics.transform): The transformation to apply the translational part of\n     *\n     * Apply the translation of a transform.\n     *\n     * Only the translation portion of\n     * that transform will be applied.\n     **/\n    Vector.prototype.translate = function( t ){\n\n        return this.vadd( t.v );\n    };\n\n    /**\n     * Physics.vector#translateInv( t ) -> this\n     * - t (Physics.transform): The transformation to apply the inverse translational part of\n     *\n     * Apply the inverse translation of a transform.\n     *\n     * Only the inverse translation portion of\n     * that transform will be applied.\n     **/\n    Vector.prototype.translateInv = function( t ){\n\n        return this.vsub( t.v );\n    };\n\n\n    /**\n     * Physics.vector#clone( [v] ) -> this|Physics.vector\n     * - v (Vectorish): The vector-like object to clone\n     * + (this): If `v` is specified as an argument\n     * + (Physics.vector): A new vector instance that clones this vector, if no argument is specified\n     *\n     * Create a clone of this vector, or clone another vector into this instance.\n     *\n     * This is especially useful in vector algorithms\n     * that use temporary vectors (which most should).\n     * You can create temporary vectors and then do things like...\n     * ```\n     * temp.clone( otherVector );\n     * // compute things with temp...\n     * // then save the result\n     * result.clone( tmp );\n     * ```\n     **/\n    Vector.prototype.clone = function( v ) {\n\n        // http://jsperf.com/vector-storage-test\n\n        if ( v ){\n\n            if (!v._){\n\n                return this.set( v.x, v.y );\n            }\n\n            this.recalc = v.recalc;\n\n            if (!v.recalc){\n                this._[3] = v._[3];\n                this._[4] = v._[4];\n            }\n\n            this._[0] = v._[0];\n            this._[1] = v._[1];\n\n            return this;\n        }\n\n        return new Vector( this );\n    };\n\n    /**\n     * Physics.vector#swap( v ) -> this\n     * - v (Physics.vector): The other vector\n     *\n     * Swap values with other vector.\n     **/\n    Vector.prototype.swap = function( v ){\n\n        var _ = this._;\n        this._ = v._;\n        v._ = _;\n\n        _ = this.recalc;\n        this.recalc = v.recalc;\n        v.recalc = _;\n        return this;\n    };\n\n    /**\n     * Physics.vector#values() -> Object\n     *\n     * Get the coordinate values as an object literal.\n     **/\n    Vector.prototype.values = function(){\n\n        return {\n            x: this._[0],\n            y: this._[1]\n        };\n    };\n\n\n    /**\n     * Physics.vector#zero() -> this\n     *\n     * Set the coordinates of this vector to zero.\n     **/\n    Vector.prototype.zero = function() {\n\n        this._[3] = 0.0;\n        this._[4] = 0.0;\n\n        this._[0] = 0.0;\n        this._[1] = 0.0;\n        return this;\n    };\n\n    /**\n     * Physics.vector#negate() -> this\n     *\n     * Flip this vector in the opposite direction.\n     **/\n    Vector.prototype.negate = function( component ){\n\n        if (component !== undefined){\n\n            this._[ component ] = -this._[ component ];\n            return this;\n        }\n\n        this._[0] = -this._[0];\n        this._[1] = -this._[1];\n        return this;\n    };\n\n    /**\n     * Physics.vector#clamp( minV, maxV ) -> this\n     * - minV (Vectorish): The minimum vector\n     * - maxV (Vectorish): The maximum vector\n     *\n     * Constrain vector components to minima and maxima.\n     *\n     * The vector analog of [scalar clamping](http://en.wikipedia.org/wiki/Clamping_(graphics)).\n     **/\n    Vector.prototype.clamp = function( minV, maxV ){\n\n        this._[0] = min(max(this._[0], minV.x), maxV.x);\n        this._[1] = min(max(this._[1], minV.y), maxV.y);\n        this.recalc = true;\n        return this;\n    };\n\n    /**\n     * Physics.vector#toString() -> String\n     *\n     * Get a formatted string of this vector's coordinates.\n     **/\n    Vector.prototype.toString = function(){\n\n        return '('+this._[0] + ', ' + this._[1]+')';\n    };\n\n\n    /**\n     * Physics.vector#equals( v ) -> Boolean\n     * - v (Physics.vector): The other vector\n     *\n     * Determine if this vector equals another.\n     **/\n    Vector.prototype.equals = function( v ){\n\n        return this._[0] === v._[0] &&\n            this._[1] === v._[1] &&\n            this._[2] === v._[2];\n    };\n\n    /**\n     * Physics.vector.axis = Array\n     *\n     * Read-only axis vectors for general reference.\n     *\n     * Example:\n     *\n     * ```javascript\n     * Physics.vector.axis[0]; // The x axis unit vector\n     * Physics.vector.axis[1]; // The y axis unit vector\n     * ```\n     **/\n    Vector.axis = [\n        new Vector(1.0, 0.0),\n        new Vector(0.0, 1.0)\n    ];\n\n    /**\n     * Physics.vector.zero = zeroVector\n     *\n     * Read-only zero vector for reference\n     **/\n    Vector.zero = new Vector(0, 0);\n\n    // assign\n    Physics.vector = Vector;\n\n}(this)); // end Vector class\n\n\n// ---\n// inside: src/util/noconflict.js\n\n(function( window ){\n\n    var _Physics = window.Physics;\n\n    /**\n     * Physics.noConflict() -> Physics\n     * \n     * Restore the original reference to the global window.Physics variable.\n     * \n     * Does nothing if PhysicsJS doesn't have a reference in global scope\n     **/\n    Physics.noConflict = function(){\n\n        if ( window.Physics === Physics ) {\n            window.Physics = _Physics;\n        }\n        \n        return Physics;\n    };\n\n})( this );\n\n// ---\n// inside: src/util/decorator.js\n\n/** related to: factory\n * Physics.util.decorator( type [, protoDef ] ) -> Function\n * - type (String): The name of the factory you are creating\n * - protoDef (Object): The top-level prototype\n * + (Function): The factory function\n *\n * Facilitates creation of decorator factory functions.\n *\n * See the [[factory]] definition for the factory signatures.\n * [For full documentation and examples, please visit the wiki](https://github.com/wellcaffeinated/PhysicsJS/wiki/Fundamentals#the-factory-pattern).\n *\n * Example:\n *\n * ```javascript\n * var factory = Physics.util.decorator('factory', {\n *      // prototype methods...\n *      method: function( args ){\n *      }\n * });\n *\n * // define\n * factory( 'name', 'parent-name', function( parent ){\n *\n *      // extend further...\n *      return {\n *          // overrides\n *          init: function( cfg ){\n *              parent.init.call(this, cfg);\n *          }\n *      };\n * });\n *\n * // instantiate\n * var options = { key: 'val' };\n * var instance = factory( 'name', options );\n * ```\n **/\nvar Decorator = Physics.util.decorator = function Decorator( type, baseProto ){\n\n    var registry = {}\n        ,proto = {}\n        ;\n\n    // extend that supports getters/setters\n    // only extends functions\n    var extend = function extend( to, from ){\n        var desc, key;\n        for ( key in from ){\n            desc = Object.getOwnPropertyDescriptor( from, key );\n            if ( desc.get || desc.set ){\n\n                Object.defineProperty( to, key, desc );\n\n            } else if ( Physics.util.isFunction( desc.value ) ){\n\n                to[ key ] = desc.value;\n            }\n        }\n        return to;\n    };\n\n    // http://ejohn.org/blog/objectgetprototypeof/\n    /* jshint -W103 */\n    var getProto = Object.getPrototypeOf;\n    if ( typeof getProto !== 'function' ) {\n        if ( typeof 'test'.__proto__ === 'object' ) {\n            getProto = function(object){\n                return object.__proto__;\n            };\n        } else {\n            getProto = function(object){\n                // May break if the constructor has been tampered with\n                return object.constructor.prototype;\n            };\n        }\n    }\n    /* jshint +W103 */\n\n    var objectCreate = Object.create;\n    if (typeof objectCreate !== 'function') {\n        objectCreate = function (o) {\n            function F() {}\n            F.prototype = o;\n            return new F();\n        };\n    }\n\n    /*\n     * mixin( key, val )\n     * mixin( obj )\n     * - key (String): The method name\n     * - val (Function): The function to assign\n     * - obj (Object): object with many `key: fn` pairs\n     *\n     * Apply mixin methods to decorator base.\n     */\n    var mixin = function mixin( key, val ){\n\n        if ( typeof key === 'object' ){\n            proto = extend(proto, key);\n            proto.type = type;\n            return;\n        }\n\n        if ( key !== 'type' && Physics.util.isFunction( val ) ){\n            proto[ key ] = val;\n        }\n    };\n\n    // @TODO: not sure of the best way to make the constructor names\n    // transparent and readable in debug consoles...\n    mixin( baseProto );\n\n    /**  belongs to: Physics.util.decorator\n     * factory( name[, parentName], decorator[, cfg] )\n     * factory( name, cfg ) -> Object\n     * -  name       (String):  The class name\n     * -  parentName (String): The name of parent class to extend\n     * -  decorator  (Function): The decorator function that should define and return methods to extend (decorate) the base class\n     * -  cfg        (Object): The configuration to pass to the class initializer\n     *\n     * Factory function for definition and instantiation of subclasses.\n     *\n     * Use the first signature (once) to define it first.\n     * If defining without the \"cfg\" parameter, void will be returned. Otherwise the class instance will be returned.\n     *\n     * See [[Physics.util.decorator]] for more information.\n     **/\n    var factory = function factory( name, parentName, decorator, cfg ){\n\n        var instance\n            ,result\n            ,parent = proto\n            ,tmp\n            ;\n\n        // set parent if specified\n        if ( typeof parentName !== 'string' ){\n\n            // ... otherwise reassign parameters\n            cfg = decorator;\n            decorator = parentName;\n\n        } else {\n\n            // extend the specified module\n            parent = registry[ parentName ];\n\n            if ( !parent ){\n\n                throw 'Error: \"' + parentName + '\" ' + type + ' not defined';\n            }\n\n            parent = parent.prototype;\n        }\n\n        if ( typeof decorator === 'function' ){\n\n            result = registry[ name ];\n\n            if ( result ){\n\n                result.prototype = extend(result.prototype, decorator( getProto(result.prototype) ));\n\n            } else {\n                // newly defined\n                // store the new class\n                result = registry[ name ] = function constructor( opts ){\n                    if (this.init){\n                        this.init( opts );\n                    }\n                };\n\n                result.prototype = objectCreate( parent );\n                result.prototype = extend(result.prototype, decorator( parent, result.prototype ));\n            }\n\n            result.prototype.type = type;\n            result.prototype.name = name;\n\n        } else {\n\n            cfg = decorator || {};\n            result = registry[ name ];\n            if (!result){\n\n                throw 'Error: \"' + name + '\" ' + type + ' not defined';\n            }\n        }\n\n        if ( cfg ) {\n\n            // create a new instance from the provided decorator\n            return new result( cfg );\n        }\n    };\n\n    factory.mixin = mixin;\n\n    return factory;\n};\n\n\n// ---\n// inside: src/util/helpers.js\n\n/**\n * Physics.util.indexOf( arr, value ) -> Number\n * - arr (Array): The array to search\n * - value (Mixed): The value to find\n * + (Number): The index of `value` in the array OR `-1` if not found\n *\n * Fast indexOf implementation.\n **/\nPhysics.util.indexOf = function indexOf(arr, value) {\n    var fr = 0, bk = arr.length;\n    while (fr < bk) {\n        bk--;\n        if (arr[ fr ] === value) {\n            return fr;\n        }\n        if (arr[ bk ] === value) {\n            return bk;\n        }\n        fr++;\n    }\n    return -1;\n};\n\n\n// http://jsperf.com/array-destroy/87\n/**\n * Physics.util.clearArray( arr ) -> Array\n * - arr (Array): The array to clear\n * + (Array): The array passed in\n *\n * Quickly clear an array.\n **/\nPhysics.util.clearArray = function clearArray(arr){\n    var l = arr.length;\n    while( l-- ){\n        arr.pop();\n    }\n    return arr;\n};\n\n/**\n * Physics.util.throttle( fn, delay ) -> Function\n * - fn (Function): The function to throttle\n * - delay (Number): Time in milliseconds\n *\n * Ensure a function is only called once every specified time span.\n **/\nPhysics.util.throttle = function throttle( fn, delay, scope ){\n    var to\n        ,call = false\n        ,args\n        ,cb = function(){\n            clearTimeout( to );\n            if ( call ){\n                call = false;\n                to = setTimeout(cb, delay);\n                fn.apply(scope, args);\n            } else {\n                to = false;\n            }\n        }\n        ;\n\n    scope = scope || null;\n\n    return function(){\n        call = true;\n        args = arguments;\n        if ( !to ){\n            cb();\n        }\n    };\n};\n\n/**\n * Physics.util.options( def[, target] ) -> Function\n * - def (Object): Default options to set\n * - target (Object): Where to copy the options to. Defaults to the returned function.\n * + (Function): The options function\n *\n * Options helper to keep track of options. Call it with a config object. Access options directly on the function.\n *\n * Example:\n *\n * ```javascript\n * this.options = Physics.util.options({ foo: 'bar', opt: 'def' });\n * this.options({ opt: 'myVal' });\n *\n * this.options.foo; // === 'bar'\n * this.options.def; // === 'myVal'\n *\n * // can also change defaults later\n * this.options.defaults({ foo: 'baz' });\n *\n * // can add a change callback\n * this.options.onChange(function( opts ){\n *     // some option changed\n *     // opts is the target\n * });\n * ```\n **/\n// deep copy callback to extend deeper into options\nvar deepCopyFn = function( a, b ){\n\n    if ( Physics.util.isPlainObject( b ) ){\n\n        return Physics.util.extend({}, a, b, deepCopyFn );\n    }\n\n    return b !== undefined ? b : a;\n};\nPhysics.util.options = function( def, target ){\n\n    var _def = {}\n        ,fn\n        ,callbacks = []\n        ;\n\n    // set options\n    fn = function fn( options, deep ){\n\n        Physics.util.extend(target, options, deep ? deepCopyFn : null);\n        for ( var i = 0, l = callbacks.length; i < l; ++i ){\n            callbacks[ i ]( target );\n        }\n        return target;\n    };\n\n    // add defaults\n    fn.defaults = function defaults( def, deep ){\n        Physics.util.extend( _def, def, deep ? deepCopyFn : null );\n        Physics.util.defaults( target, _def, deep ? deepCopyFn : null );\n        return _def;\n    };\n\n    fn.onChange = function( cb ){\n        callbacks.push( cb );\n    };\n\n    target = target || fn;\n\n    fn.defaults( def );\n\n    return fn;\n};\n\n/**\n * Physics.util.pairHash( id1, id2 ) -> Number\n * - id1 (Number): The id of the first thing\n * - id2 (Number): The id of the second thing\n * + (Number): A unique numeric hash (valid for values < 2^16)\n *\n * Generate a unique numeric hash from two input IDs.\n *\n * Useful for speedy indexing of pairs.\n **/\nPhysics.util.pairHash = function( id1, id2 ){\n    id1 = id1|0;\n    id2 = id2|0;\n\n    if ( (id1|0) === (id2|0) ){\n\n        return -1;\n    }\n\n    // valid for values < 2^16\n    return ((id1|0) > (id2|0) ?\n        (id1 << 16) | (id2 & 0xFFFF) :\n        (id2 << 16) | (id1 & 0xFFFF))|0\n        ;\n};\n\n/**\n * Physics.util.bind( fn, scope[, args... ] ) -> Function\n * - fn (Function): The function to bind scope to\n * - scope (Object): The scope to give to `fn`\n * - args (Mixed): Arguments to send to `fn`\n *\n * Bind a scope to a function.\n *\n * Basically the same functionality as [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n **/\nif ( !Function.prototype.bind ){\n    Physics.util.bind = function( fn, scope, args ){\n        args = Array.prototype.slice.call( arguments, 2 );\n        return function(){\n            return fn.apply( scope, args.concat( Array.prototype.slice.call(arguments) ) );\n        };\n    };\n} else {\n    Physics.util.bind = function( fn, scope, args ){\n        args = Array.prototype.slice.call( arguments, 1 );\n        return Function.prototype.bind.apply( fn, args );\n    };\n}\n\n/**\n * Physics.util.find( collection, fn( value, index, collection ) ) -> Mixed\n * - collection (Array): Collection of values to test\n * - fn (Function): The test function\n * - value (Mixed): The value to test\n * - index (Number): The index of value in collection\n * - collection (Array): The input collection\n *\n * Test an array of values against a test function\n * and return the first value for which the function\n * returns true.\n **/\nPhysics.util.find = function( collection, fn ){\n    var i\n        ,l = collection.length\n        ,val\n        ;\n\n    for ( i = 0; i < l; i++ ){\n        val = collection[ i ];\n        if ( fn( val, i, collection ) ){\n            return val;\n        }\n    }\n};\n\n/**\n * Physics.util.filter( collection, fn( value, index, collection ) ) -> Array\n * - collection (Array): Collection of values to test\n * - fn (Function): The test function\n * - value (Mixed): The value to test\n * - index (Number): The index of value in collection\n * - collection (Array): The input collection\n *\n * Test an array of values against a test function\n * and return another array of values for which\n * the test function returns true.\n **/\nPhysics.util.filter = function( collection, fn ){\n    var i\n        ,l = collection.length\n        ,val\n        ,matches = []\n        ;\n\n    for ( i = 0; i < l; i++ ){\n        val = collection[ i ];\n        if ( fn( val, i, collection ) ){\n            matches.push( val );\n        }\n    }\n\n    return matches;\n};\n\n// lodash methods\n\n(function(){\n/*\n * @license\n * Modified version of:\n * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>\n * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <http://lodash.com/license>\n */\n\n/* Used to determine if values are of the language type Object */\nvar objectTypes = {\n  'boolean': false,\n  'function': true,\n  'object': true,\n  'number': false,\n  'string': false,\n  'undefined': false\n};\nvar identity = function(a){ return a; };\nvar arrayClass = '[object Array]';\nvar objectClass = '[object Object]';\nvar nativeKeys = Object.keys;\nvar toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/* Used as the size when optimizations are enabled for large arrays */\nvar largeArraySize = 75;\n/* Used to pool arrays and objects used internally */\nvar arrayPool = [],\n    objectPool = [];\n/* Used as the max size of the `arrayPool` and `objectPool` */\nvar maxPoolSize = 40;\nvar keyPrefix = +new Date() + '';\n\nfunction releaseArray(array) {\n  Physics.util.clearArray( array );\n  if (arrayPool.length < maxPoolSize) {\n    arrayPool.push(array);\n  }\n}\n\nfunction releaseObject(object) {\n  var cache = object.cache;\n  if (cache) {\n    releaseObject(cache);\n  }\n  object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;\n  if (objectPool.length < maxPoolSize) {\n    objectPool.push(object);\n  }\n}\n\nfunction getObject() {\n  return objectPool.pop() || {\n    'array': null,\n    'cache': null,\n    'criteria': null,\n    'false': false,\n    'index': 0,\n    'null': false,\n    'number': null,\n    'object': null,\n    'push': null,\n    'string': null,\n    'true': false,\n    'undefined': false,\n    'value': null\n  };\n}\n\nfunction getArray() {\n  return arrayPool.pop() || [];\n}\n\nfunction cacheIndexOf(cache, value) {\n  var type = typeof value;\n  cache = cache.cache;\n\n  if (type === 'boolean' || value == null) {\n    return cache[value] ? 0 : -1;\n  }\n  if (type !== 'number' && type !== 'string') {\n    type = 'object';\n  }\n  var key = type === 'number' ? value : keyPrefix + value;\n  cache = (cache = cache[type]) && cache[key];\n\n  return type === 'object' ?\n    (cache && Physics.util.indexOf(cache, value) > -1 ? 0 : -1) :\n    (cache ? 0 : -1);\n}\n\nfunction cachePush(value) {\n  var cache = this.cache,\n      type = typeof value;\n\n  if (type === 'boolean' || value == null) {\n    cache[value] = true;\n  } else {\n    if (type !== 'number' && type !== 'string') {\n      type = 'object';\n    }\n    var key = type === 'number' ? value : keyPrefix + value,\n        typeCache = cache[type] || (cache[type] = {});\n\n    if (type === 'object') {\n      (typeCache[key] || (typeCache[key] = [])).push(value);\n    } else {\n      typeCache[key] = true;\n    }\n  }\n}\n\nfunction createCache(array) {\n  var index = -1,\n      length = array.length,\n      first = array[0],\n      mid = array[(length / 2) | 0],\n      last = array[length - 1];\n\n  if (first && typeof first === 'object' &&\n      mid && typeof mid === 'object' && last && typeof last === 'object') {\n    return false;\n  }\n  var cache = getObject();\n  cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;\n\n  var result = getObject();\n  result.array = array;\n  result.cache = cache;\n  result.push = cachePush;\n\n  while (++index < length) {\n    result.push(array[index]);\n  }\n  return result;\n}\n\nvar shimKeys = function(object) {\n  var index, iterable = object, result = [];\n  if (!iterable){ return result; }\n  if (!(objectTypes[typeof object])){ return result; }\n    for (index in iterable) {\n      if (hasOwnProperty.call(iterable, index)) {\n        result.push(index);\n      }\n    }\n  return result;\n};\n\nvar keys = !nativeKeys ? shimKeys : function(object) {\n  if (!Physics.util.isObject(object)) {\n    return [];\n  }\n  return nativeKeys(object);\n};\n\nvar idCounter = 0;\n/**\n * Physics.util.uniqueId( [prefix] ) -> String\n * - prefix (String): Prefix to the id\n *\n * Generate a unique id, optionally prefixed.\n **/\nPhysics.util.uniqueId = function uniqueId(prefix) {\n    var id = ++idCounter;\n    return '' + (prefix || '') + id;\n};\n\n/*\n * The base implementation of `_.random` without argument juggling or support\n * for returning floating-point numbers.\n *\n * @private\n * @param {number} min The minimum possible value.\n * @param {number} max The maximum possible value.\n * @returns {number} Returns a random number.\n */\nfunction baseRandom(min, max) {\n    return min + Math.floor(Math.random() * (max - min + 1));\n}\n\n/*\n * Creates an array of shuffled values, using a version of the Fisher-Yates\n * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.\n *\n * @static\n * @memberOf _\n * @category Collections\n * @param {Array|Object|string} collection The collection to shuffle.\n * @returns {Array} Returns a new shuffled collection.\n * @example\n *\n * _.shuffle([1, 2, 3, 4, 5, 6]);\n * // => [4, 1, 6, 3, 5, 2]\n */\nPhysics.util.shuffle = function(collection) {\n    var index = -1\n        ,length = collection ? collection.length : 0\n        ,result = Array(typeof length === 'number' ? length : 0)\n        ,i\n        ,l\n        ,value\n        ,rand\n        ;\n\n    for ( i = 0, l = collection.length; i < l; i++ ){\n        value = collection[ i ];\n        rand = baseRandom(0, ++index);\n        result[index] = result[rand];\n        result[rand] = value;\n    }\n    return result;\n};\n\n/**\n * Physics.util.isObject( val ) -> Boolean\n * - val (Mixed): The value to test\n *\n * Test if a value is an object.\n **/\nPhysics.util.isObject = function isObject(value) {\n    // check if the value is the ECMAScript language type of Object\n    // http://es5.github.io/#x8\n    // and avoid a V8 bug\n    // http://code.google.com/p/v8/issues/detail?id=2291\n    return !!(value && objectTypes[typeof value]);\n};\n\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n\n/**\n * Physics.util.isFunction( val ) -> Boolean\n * - val (Mixed): The value to test\n *\n * Test if a value is a function.\n **/\nPhysics.util.isFunction = isFunction;\n\n/**\n * Physics.util.isArray( val ) -> Boolean\n * - val (Mixed): The value to test\n *\n * Test if a value is an array.\n **/\nPhysics.util.isArray = Array.isArray || function(value) {\n  return value && typeof value === 'object' && typeof value.length === 'number' &&\n    toString.call(value) === arrayClass || false;\n};\n\nvar reNative = RegExp('^' +\n  String(toString)\n    .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n    .replace(/toString| for [^\\]]+/g, '.*?') + '$'\n);\nfunction isNative(value) {\n  return typeof value === 'function' && reNative.test(value);\n}\n\nfunction shimIsPlainObject(value) {\n  var ctor,\n      result;\n\n  // avoid non Object objects, `arguments` objects, and DOM elements\n  if (!(value && toString.call(value) === objectClass) ||\n      (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {\n    return false;\n  }\n  // In most environments an object's own properties are iterated before\n  // its inherited properties. If the last iterated property is an object's\n  // own property then there are no inherited enumerable properties.\n  for (var key in value){\n    result = key;\n  }\n  return typeof result === 'undefined' || hasOwnProperty.call(value, result);\n}\n\n/**\n * Physics.util.isPlainObject( val ) -> Boolean\n * - val (Mixed): The value to test\n *\n * Test if a value is a plain javascript object.\n **/\nPhysics.util.isPlainObject = !Object.getPrototypeOf ? shimIsPlainObject : function(value) {\n  if (!(value && toString.call(value) === objectClass)) {\n    return false;\n  }\n  var valueOf = value.valueOf,\n      objProto = isNative(valueOf) && (objProto = Object.getPrototypeOf(valueOf)) && Object.getPrototypeOf(objProto);\n\n  return objProto ?\n    (value === objProto || Object.getPrototypeOf(value) === objProto) :\n    shimIsPlainObject(value);\n};\n\nfunction baseUniq(array, isSorted, callback) {\n  var index = -1,\n      indexOf = Physics.util.indexOf,\n      length = array ? array.length : 0,\n      result = [];\n\n  var isLarge = !isSorted && length >= largeArraySize && indexOf === Physics.util.indexOf,\n      seen = (callback || isLarge) ? getArray() : result;\n\n  if (isLarge) {\n    var cache = createCache(seen);\n    indexOf = cacheIndexOf;\n    seen = cache;\n  }\n  while (++index < length) {\n    var value = array[index],\n        computed = callback ? callback(value, index, array) : value;\n\n    if (isSorted ?\n          !index || seen[seen.length - 1] !== computed :\n          indexOf(seen, computed) < 0\n        ) {\n      if (callback || isLarge) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  if (isLarge) {\n    releaseArray(seen.array);\n    releaseObject(seen);\n  } else if (callback) {\n    releaseArray(seen);\n  }\n  return result;\n}\n\n/**\n * Physics.util.uniq( array, [isSorted, callback] ) -> Array\n * - array (Array): The array\n * - isSorted (Boolean): Flag to indicate the array is sorted\n * - callback (Function): Mapping function\n *\n * Create an array without duplicates.\n **/\nPhysics.util.uniq = function uniq(array, isSorted, callback) {\n  // juggle arguments\n  if (typeof isSorted !== 'boolean' && isSorted != null) {\n    callback = isSorted;\n    isSorted = false;\n  }\n  return baseUniq(array, isSorted, callback);\n};\n\nvar assign = function(object, source, guard) {\n  var index, iterable = object, result = iterable;\n  if (!iterable) { return result; }\n  var args = arguments,\n      argsIndex = 0,\n      callback,\n      argsLength = typeof guard === 'number' ? 2 : args.length;\n  if (argsLength > 2 && typeof args[argsLength - 1] === 'function') {\n    callback = args[--argsLength];\n  }\n  while (++argsIndex < argsLength) {\n    iterable = args[argsIndex];\n    if (iterable && objectTypes[typeof iterable]) {\n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];\n        }\n    }\n  }\n  return result;\n};\n\n/**\n * Physics.util.extend( object, source...[, callback] ) -> Object\n * - object (Object): The destination object\n * - source (Object): The source objects\n * - callback (Function): The function to customize assigning values\n *\n * Implementation of [lodash.extend](http://lodash.com/docs#assign)\n **/\nPhysics.util.extend = assign;\n\n/**\n * Physics.util.defaults( object, source...[, callback] ) -> Object\n * - object (Object): The destination object\n * - source (Object): The source objects\n * - callback (Function): The function to customize assigning values\n *\n * Implementation of [lodash.defaults](http://lodash.com/docs#defaults).\n **/\nPhysics.util.defaults = function(object, source, guard) {\n  var index, iterable = object, result = iterable;\n  if (!iterable){ return result; }\n  var args = arguments,\n      argsIndex = 0,\n      argsLength = typeof guard === 'number' ? 2 : args.length;\n  while (++argsIndex < argsLength) {\n    iterable = args[argsIndex];\n    if (iterable && objectTypes[typeof iterable]) {\n        var ownIndex = -1,\n            ownProps = objectTypes[typeof iterable] && keys(iterable),\n            length = ownProps ? ownProps.length : 0;\n\n        while (++ownIndex < length) {\n          index = ownProps[ownIndex];\n          if (typeof result[index] === 'undefined') {\n              result[index] = iterable[index];\n          }\n        }\n    }\n  }\n  return result;\n};\n\n/**\n * Physics.util.sortedIndex( array, value[, callback] ) -> Number\n * - array (Array): The array to inspect\n * - value (Mixed): The value to evaluate\n * - callback (Function): Function called per iteration\n *\n * Implementation of [lodash.sortedIndex](http://lodash.com/docs#sortedIndex).\n **/\nPhysics.util.sortedIndex = function sortedIndex(array, value, callback) {\n  var low = 0,\n      high = array ? array.length : low;\n\n  // explicitly reference `identity` for better inlining in Firefox\n  callback = callback || identity;\n  value = callback(value);\n\n  /* jshint -W030 */\n  while (low < high) {\n    var mid = (low + high) >>> 1;\n    (callback(array[mid]) < value) ?\n      low = mid + 1 :\n      high = mid;\n  }\n  /* jshint +W030 */\n  return low;\n};\n\n})();\n\n\n// ---\n// inside: src/util/scratchpad.js\n\n/*\n * scratchpad\n * thread-safe management of temporary (voletile)\n * objects for use in calculations\n * https://github.com/wellcaffeinated/scratchpad.js\n */\nPhysics.scratchpad = (function(){\n\n    // Errors\n    var SCRATCH_USAGE_ERROR = 'Error: Scratchpad used after .done() called. (Could it be unintentionally scoped?)';\n    var SCRATCH_INDEX_OUT_OF_BOUNDS = 'Error: Scratchpad usage space out of bounds. (Did you forget to call .done()?)';\n    var SCRATCH_MAX_REACHED = 'Error: Too many scratchpads created. (Did you forget to call .done()?)';\n    var ALREADY_DEFINED_ERROR = 'Error: Object is already registered.';\n\n    // cache previously created scratches\n    var scratches = [];\n    var numScratches = 0;\n    var Scratch, Scratchpad;\n\n    var regIndex = 0;\n\n\n    /** belongs to: Physics.scratchpad\n     * class Scratch\n     *\n     * A scratchpad session.\n     *\n     * This class keeps track of temporary objects used\n     * in this session and releases them when finished (call to `.done()`).\n     *\n     * Use this to retrieve temporary objects:\n     * - `.vector()`: retrieve a temporary [[Physics.vector]]\n     * - `.transform()`: retrieve a temporary [[Physics.transform]]\n     *\n     * See [[Physics.scratchpad]] for more info.\n     **/\n    Scratch = function Scratch(){\n\n        // private variables\n        this._active = false;\n        this._indexArr = [];\n\n        if (++numScratches >= Scratchpad.maxScratches){\n            throw SCRATCH_MAX_REACHED;\n        }\n    };\n\n    Scratch.prototype = {\n\n        /**\n         * Scratch#done( [val] ) -> Mixed\n         * - val (Mixed): No effect on this method, just passed on to the return value so you can do things like:\n         return scratch.done( myReturnVal );\n         * + (Mixed): Whatever you specified as `val`\n         *\n         * Declare that your work is finished.\n         *\n         * Release temp objects for use elsewhere. Must be called when immediate work is done.\n         *\n         * You can wrap the return value in scratch.done() so that you don't forget to call it.\n         *\n         * Example:\n         *\n         * ```javascript\n         * return scratch.done( myReturnValue );\n         * ```\n         **/\n        done: function( val ){\n\n            this._active = false;\n            var s;\n            for ( var i = 0; i < regIndex; ++i ){\n\n                this[ i ] = 0;\n            }\n\n            // add it back to the scratch stack for future use\n            scratches.push( this );\n            return val;\n        }\n    };\n\n\n    // API\n\n    /**\n     * Physics.scratchpad( [fn] ) -> Scratch|Function\n     * - fn (Function): Some function you'd like to wrap in a scratch session. First argument is the scratch instance.\n     * + (Function): The wrapped function (if `fn` arg specified) that can be reused like the original minus the first (scratch) parameter.\n     * + (Scratch): The scratch session.\n     *\n     * Get a new scratch session to work from or wrap a function in a scratch session.\n     *\n     * Call `.done()` on it when finished.\n     *\n     * Example:\n     *\n     * ```javascript\n     * // get a scratch session manually\n     * var myAlg = function( scratch, arg1, arg2, ... ){\n     *     var scratch = Physics.scratchpad()\n     *     ,vec = scratch.vector().set( 0, 0 ) // need to reinitialize... it's recycled!\n     *     ;\n     *     // ...\n     *     return scratch.done( result );\n     * };\n     * // later...\n     * while( awesome ){\n     *     myAlg( arg1, arg2, ... );\n     * }\n     * ```\n     *\n     * Example:\n     *\n     * ```javascript\n     * // wrap a function in a scratch session\n     * var myAlg = Physics.scratchpad(function( scratch, arg1, arg2, ... ){\n     *     var vec = scratch.vector().set( 0, 0 ); // need to reinitialize... it's recycled!\n     *     //...\n     *     return result;\n     * });\n     * // later...\n     * while( awesome ){\n     *     myAlg( arg1, arg2, ... );\n     * }\n     * ```\n     **/\n    Scratchpad = function Scratchpad( fn ){\n\n        if ( fn ){\n            return Scratchpad.fn( fn );\n        }\n\n        var scratch = scratches.pop() || new Scratch();\n        scratch._active = true;\n        return scratch;\n    };\n\n    // options\n    Scratchpad.maxScratches = 100; // maximum number of scratches\n    Scratchpad.maxIndex = 20; // maximum number of any type of temp objects\n\n    /**\n     * Physics.scratchpad.fn( fn ) -> Function\n     * - fn (Function): Some function you'd like to wrap in a scratch session. First argument is the scratch instance. See [[Physics.scratchpad]].\n     * + (Function): The wrapped function that can be reused like the original minus the first (scratch) parameter.\n     *\n     * Wrap a function in a scratch session.\n     *\n     * Same as calling `Physics.scratchpad( fn )` with a function specified.\n     **/\n    Scratchpad.fn = function( fn ){\n\n        var args = [];\n        for ( var i = 0, l = fn.length; i < l; i++ ){\n            args.push( i );\n        }\n\n        args = 'a' + args.join(',a');\n        /* jshint -W054 */\n        var handle = new Function('fn, scratches, Scratch', 'return function('+args+'){ '+\n               'var scratch = scratches.pop() || new Scratch( scratches );'+\n               'scratch._active = true;'+\n               'return scratch.done( fn(scratch, '+args+') );'+\n           '};'\n        );\n        /* jshint +W054 */\n\n        return handle(fn, scratches, Scratch);\n    };\n\n    /**\n     * Physics.scratchpad.register( name, constructor )\n     * - name (String): Name of the object class\n     * - constructor (Function): The object constructor\n     *\n     * Register a new object to be included in scratchpads.\n     *\n     * Example:\n     *\n     * ```javascript\n     * // register a hypothetical vector class...\n     * Physics.scratchpad.register('vector', Vector);\n     * ```\n     **/\n    Scratchpad.register = function register( name, constructor, options ){\n\n        var proto = Scratch.prototype\n            ,idx = regIndex++ // increase the scratch type index\n            ,stackname = '_' + name + 'Stack' // the name of the array stack\n            ,useFactory = options && options.useFactory\n            ;\n\n        if ( name in proto ) {\n            throw ALREADY_DEFINED_ERROR;\n        }\n\n        // create a new function on the prototype\n        Scratch.prototype[ name ] = function(){\n\n            // get the stack (or initialize it)\n            var stack = this[ stackname ] || (this[ stackname ] = [])\n                // we increase this index every time a voletile object is requested\n                // seems weird to store it on this as a number (ie: this.0, this.1)...\n                // but actually it's faster...\n                ,stackIndex = this[ idx ] | 0\n                ;\n\n            this[ idx ] = stackIndex + 1;\n\n            // if used after calling done...\n            if (!this._active){\n                throw SCRATCH_USAGE_ERROR;\n            }\n\n            // if too many objects created...\n            if (stackIndex >= Scratchpad.maxIndex){\n                throw SCRATCH_INDEX_OUT_OF_BOUNDS;\n            }\n\n            // return or create new instance\n            return stack[ stackIndex ] ||\n                    (stack[ stackIndex ] = useFactory ? constructor() : new constructor() );\n        };\n\n    };\n\n    // register some classes\n    Scratchpad.register('vector', Physics.vector);\n    Scratchpad.register('transform', Physics.transform);\n\n    return Scratchpad;\n\n})();\n\n\n// ---\n// inside: src/util/pubsub.js\n\n(function(){\n\n    var defaultPriority = 1;\n\n    function getPriority( val ){\n        return val._priority_;\n    }\n\n    // register a new scratch object so we can reuse event data\n    Physics.scratchpad.register('event', function(){ return {}; }, { useFactory: true });\n\n    /**\n     * class Physics.util.pubsub\n     *\n     * Fast pubsub implementation.\n     *\n     * Can be mixed into other classes easily.\n     **/\n    var PubSub = function PubSub(){\n\n        if (!(this instanceof PubSub)){\n            return new PubSub();\n        }\n    };\n\n    PubSub.prototype = {\n\n        /**\n         * Physics.util.pubsub#on( topic, fn( data, event )[, scope, priority] ) -> this\n         * Physics.util.pubsub#on( topicConfig[, scope, priority] ) -> this\n         * - topic (String): The topic name\n         * - topicConfig (Object): A config with key/value pairs of `{ topic: callbackFn, ... }`\n         * - fn (Function): The callback function (if not using Object as previous argument)\n         * - data (Mixed): The data sent from the call to `.emit()`\n         * - event (Object): Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n         * - scope (Object): The scope to bind callback to\n         * - priority (Number): The priority of the callback (higher is earlier)\n         *\n         * Subscribe callback(s) to a topic(s).\n         **/\n        on: function( topic, fn, scope, priority ){\n\n            var listeners\n                ,orig\n                ,idx\n                ;\n\n            // ensure topics hash is initialized\n            this._topics = this._topics || (this._topics = {});\n\n            // check if we're subscribing to multiple topics\n            // with an object\n            if ( Physics.util.isObject( topic ) ){\n\n                for ( var t in topic ){\n\n                    this.on( t, topic[ t ], fn, scope );\n                }\n\n                return this;\n            }\n\n            listeners = this._topics[ topic ] || (this._topics[ topic ] = []);\n            orig = fn;\n\n            if ( Physics.util.isObject( scope ) ){\n\n                fn = Physics.util.bind( fn, scope );\n                fn._bindfn_ = orig;\n                fn._one_ = orig._one_;\n                fn._scope_ = scope;\n\n            } else if ( priority === undefined ) {\n\n                priority = scope;\n            }\n\n            fn._priority_ = priority === undefined ? defaultPriority : priority;\n\n            idx = Physics.util.sortedIndex( listeners, fn, getPriority );\n\n            listeners.splice( idx, 0, fn );\n            return this;\n        },\n\n        /**\n         * Physics.util.pubsub#off( topic, fn[, scope] ) -> this\n         * Physics.util.pubsub#off( topicCfg ) -> this\n         * - topic (String): topic The topic name. Specify `true` to remove all listeners for all topics\n         * - topicCfg (Object): A config with key/value pairs of `{ topic: callbackFn, ... }`\n         * - fn (Function): The original callback function. Specify `true` to remove all listeners for specified topic\n         * - scope (Object): The scope the callback was bound to. This is important if you are binding methods that come from object prototypes.\n         *\n         * Unsubscribe callback(s) from topic(s).\n         **/\n        off: function( topic, fn, scope ){\n\n            var listeners\n                ,listn\n                ;\n\n            if ( !this._topics ){\n                // nothing subscribed\n                return this;\n            }\n\n            if ( topic === true ){\n                // purge all listeners\n                this._topics = {};\n                return this;\n            }\n\n            // check if we're subscribing to multiple topics\n            // with an object\n            if ( Physics.util.isObject( topic ) ){\n\n                for ( var t in topic ){\n\n                    this.off( t, topic[ t ] );\n                }\n\n                return this;\n            }\n\n            listeners = this._topics[ topic ];\n\n            if (!listeners){\n                return this;\n            }\n\n            if ( fn === true ){\n                // purge all listeners for topic\n                this._topics[ topic ] = [];\n                return this;\n            }\n\n            for ( var i = 0, l = listeners.length; i < l; i++ ){\n\n                listn = listeners[ i ];\n\n                if (\n                    (listn._bindfn_ === fn || listn === fn) &&\n                    ( (!scope) || listn._scope_ === scope) // check the scope too if specified\n                ){\n                    listeners.splice( i, 1 );\n                    break;\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Physics.util.pubsub#emit( topic[, data] ) -> this\n         * - topic (String): The topic name\n         * - data (Mixed): The data to send\n         *\n         * Publish data to a topic.\n         **/\n        emit: function( topic, data ){\n\n            if ( !this._topics ){\n                // nothing subscribed\n                return this;\n            }\n\n            var listeners = this._topics[ topic ]\n                ,l = listeners && listeners.length\n                ,handler\n                ,e\n                ,scratch = Physics.scratchpad()\n                ;\n\n            if ( !l ){\n                return scratch.done(this);\n            }\n\n            e = scratch.event();\n            // event data\n            e.topic = topic;\n            e.handler = handler;\n\n            // reverse iterate so priorities work out correctly\n            while ( l-- ){\n\n                handler = listeners[ l ];\n                handler( data, e );\n\n                // if _one_ flag is set, the unsubscribe\n                if ( handler._one_ ){\n                    listeners.splice( l, 1 );\n                }\n            }\n\n            return scratch.done(this);\n        },\n\n        /**\n         * Physics.util.pubsub#one( topic, fn( data, event )[, scope, priority] ) -> this\n         * Physics.util.pubsub#one( topicConfig[, scope, priority] ) -> this\n         * - topic (String): The topic name\n         * - topicConfig (Object): A config with key/value pairs of `{ topic: callbackFn, ... }`\n         * - fn (Function): The callback function (if not using Object as previous argument)\n         * - data (Mixed): The data sent from the call to `.emit()`\n         * - event (Object): Event data, holding `.topic`, the topic, and `.handler`, the `fn` callback.\n         * - scope (Object): The scope to bind callback to\n         * - priority (Number): The priority of the callback (higher is earlier)\n         *\n         * Subscribe callback(s) to a topic(s), but only ONCE.\n         **/\n        one: function( topic, fn, scope ){\n\n            // check if we're subscribing to multiple topics\n            // with an object\n            if ( Physics.util.isObject( topic ) ){\n\n                for ( var t in topic ){\n\n                    this.one( t, topic[ t ], fn, scope );\n                }\n\n                return this;\n            }\n\n            // set the _one_ flag\n            fn._one_ = true;\n            this.on( topic, fn, scope );\n\n            return this;\n        }\n    };\n\n    Physics.util.pubsub = PubSub;\n})();\n\n\n// ---\n// inside: src/util/ticker.js\n\n/**\n * class Physics.util.ticker\n *\n * The Ticker _singleton_ for easily binding callbacks to animation loops (requestAnimationFrame).\n *\n * Requires window.requestAnimationFrame... so polyfill it if you need to.\n **/\n(function(window){\n\n    var active = true\n        ,ps = Physics.util.pubsub()\n        ,perf = window.performance\n        ;\n\n    function now(){\n        // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n        return (perf && perf.now) ?\n            (perf.now() + perf.timing.navigationStart) :\n            Date.now();\n    }\n\n    /*\n     * step( time )\n     * - time (Number): The current time\n     *\n     * Publish a tick to subscribed callbacks\n     */\n    function step(){\n\n        var time;\n\n        window.requestAnimationFrame( step );\n\n        if (!active){\n            return;\n        }\n\n        time = now();\n\n        if (!time){\n            return;\n        }\n\n        ps.emit( 'tick', time );\n    }\n\n    // start stepping if we can\n    if ( window.requestAnimationFrame ){\n        step();\n    } else {\n        active = false;\n    }\n\n    /**\n     * Physics.util.ticker.start() -> this\n     *\n     * Start the ticker\n     **/\n    function start(){\n\n        active = true;\n        return this;\n    }\n\n    /**\n     * Physics.util.ticker.stop() -> this\n     *\n     * Stop the ticker\n     **/\n    function stop(){\n\n        active = false;\n        return this;\n    }\n\n    /**\n     * Physics.util.ticker.on( listener( time ) ) -> this\n     * - listener (Function): The callback function\n     * - time (Number): The current timestamp\n     *\n     * Subscribe a callback to the ticker.\n     **/\n    function on( listener ){\n\n        ps.on('tick', listener);\n        return this;\n    }\n\n    /**\n     * Physics.util.ticker.off( listener ) -> this\n     * - listener (Function): The callback function previously bound\n     *\n     * Unsubscribe a callback from the ticker.\n     **/\n    function off( listener ){\n\n        ps.off('tick', listener);\n        return this;\n    }\n\n    /**\n     * Physics.util.ticker.isActive() -> Boolean\n     * + (Boolean): `true` if running, `false` otherwise.\n     *\n     * Determine if ticker is currently running.\n     **/\n    function isActive(){\n\n        return !!active;\n    }\n\n    // API\n    Physics.util.ticker = {\n        now: now,\n        start: start,\n        stop: stop,\n        on: on,\n        off: off,\n        isActive: isActive\n    };\n\n}(this));\n\n\n// ---\n// inside: src/core/query.js\n\n(function (window) {\n\n    /*\n     * Group helpers\n     */\n    var fnTrue = function(){ return !0; }; // return true\n    \n    var indexOf = Physics.util.indexOf;\n\n    /** hide\n     * wrapRule( fn( propVal ), prop ) -> Function\n     * - fn (Function): The test function\n     * - prop (String): The property name to test\n     * - propVal (Mixed): The property value\n     * \n     * Get test function to test on sub property.\n     **/\n    var wrapRule = function wrapRule( fn, prop ){\n        return function( thing ){\n            return fn( thing[ prop ] );\n        };\n    };\n\n    /** hide\n     * $eq( toMatch[, prop] ) -> Function\n     * - toMatch (Mixed): The value to match\n     * - prop (String): The property name to test\n     * \n     * Get an equality test function.\n     **/\n    var $eq = function $eq( toMatch, prop ){\n        return function( thing ){\n            \n            thing = prop ? thing[ prop ] : thing;\n\n            var fr = 0\n                ,bk\n                ;\n            \n            if ( Physics.util.isArray( thing ) ){\n\n                if ( Physics.util.isArray( toMatch ) ){\n                    // match all\n                    bk = thing.length;\n\n                    // check lengths\n                    if ( bk !== toMatch.length ){\n                        return false;\n                    }\n\n                    while ( fr < bk ){\n                        bk--;\n                        if (\n                            // check front\n                            (indexOf(toMatch, thing[ fr ]) === -1) ||\n                            // check back\n                            (indexOf(toMatch, thing[ bk ]) === -1)\n                        ) {\n                            return false;\n                        }\n                        fr++;\n                    }\n                    return true;\n                } else {\n                    // find in array\n                    return (indexOf( thing, toMatch ) > -1);\n                }\n            }\n\n            // exact match\n            return (thing === toMatch);\n        };\n    };\n\n    /** hide\n     * $ne( toMatch[, prop] ) -> Function\n     * - toMatch (Mixed): The value to match\n     * - prop (String): The property name to test\n     * \n     * Get a NOT equality test function.\n     **/\n    var $ne = function $ne( toMatch, prop ){\n        var fn = $eq( toMatch, prop );\n        return function( thing ){\n            return !fn( thing );\n        };\n    };\n\n    /** hide\n     * $in( toMatch[, prop] ) -> Function\n     * - toMatch (Array): The array to match\n     * - prop (String): The property name to test\n     * \n     * Get a test function for matching ANY in array\n     **/\n    var $in = function $in( toMatch, prop ){\n        return function( thing ){\n\n            thing = prop ? thing[ prop ] : thing;\n            \n            var fr = 0\n                ,bk\n                ;\n\n            if ( Physics.util.isArray( thing ) ){\n                bk = thing.length;\n\n                while( fr < bk ){\n                    bk--;\n                    if (\n                        // check front\n                        (indexOf(toMatch, thing[ fr ]) > -1) ||\n                        // check back\n                        (indexOf(toMatch, thing[ bk ]) > -1)\n                    ) {\n                        return true;\n                    }\n                    fr++;\n                }\n                return false;\n            }\n\n            // if thing matches any in array\n            return (indexOf(toMatch, thing) > -1);\n        };\n    };\n\n    /** hide\n     * $nin( toMatch[, prop] ) -> Function\n     * - toMatch (Array): The array to match\n     * - prop (String): The property name to test\n     * \n     * Get a test function for matching NOT ANY in array\n     **/\n    var $nin = function $nin( toMatch, prop ){\n        var fn = $in( toMatch, prop );\n        return function( thing ){\n            return !fn( thing );\n        };\n    };\n\n    /** hide\n     * $at( point ) -> Function\n     * - point (Vectorish): The point to check\n     * \n     * Get a test function to match any body who's aabb intersects point\n     **/\n    var $at = function $at( point ){\n        point = new Physics.vector( point );\n        return function( body ){\n            var aabb = body.aabb();\n            return Physics.aabb.contains( aabb, point );\n        };\n    };\n\n    /** hide\n     * $and( first ) -> Function\n     * - first (Function): First function node. `first.next` should have the next function, and so on.\n     * \n     * Get an AND test function.\n     **/\n    var $and = function $and( first ){\n        return first.next ? function( thing ){\n            var fn = first;\n            while ( fn ){\n\n                if ( !fn( thing ) ){\n                    return false;\n                }\n                fn = fn.next;\n            }\n            return true;\n        } : first;\n    };\n\n    /** hide\n     * $or( first ) -> Function\n     * - first (Function): First function node. `first.next` should have the next function, and so on.\n     * \n     * Get an OR test function.\n     **/\n    var $or = function $or( first ){\n        return first.next ? function( thing ){\n            var fn = first;\n            while ( fn ){\n\n                if ( fn( thing ) ){\n                    return true;\n                }\n                fn = fn.next;\n            }\n            return false;\n        } : first;\n    };\n\n    // operation hash\n    var operations = {\n        // $and and $or are separate\n        $eq: $eq\n        ,$ne: $ne\n        ,$in: $in\n        ,$nin: $nin\n        ,$at: $at\n    };\n\n    /** related to: Physics.world#find\n     * Physics.query( rules ) -> Function\n     * - rules (Object): The mongodb-like search rules. (See description).\n     * + (Function): The test function\n     * \n     * Creates a function that can be used to perform tests on objects.\n     *\n     * The test function will return a [[Boolean]]; `true` if the object matches the tests.\n     *\n     * Query rules are mongodb-like. You can specify a hash of values to match like this:\n     *\n     * ```javascript\n     * {\n     *     foo: 'bar',\n     *     baz: 2,\n     *     some: {\n     *         nested: 'value'\n     *     }\n     * }\n     * ```\n     *\n     * And they will all need to match (it's an AND rule).\n     *\n     * You can also use operators for more versatility. The operators you can use include:\n     *\n     * - $eq: Test if some property is equal to a value (this is done by default, and is thus redundant)\n     * - $ne: Test if some property is _NOT_ equal to a value\n     * - $in: Test if some value (or array of values) is one of the specified array of values\n     * - $nin: Test if some value (or array of values) is _NOT_ one of the specified array of values\n     * - $at: Test if a body's [[Physics.aabb]] includes specified point. It's a primative hit-test.\n     * \n     * Example:\n     *\n     * ```javascript\n     * var wheelsArray = [];\n     * \n     * var queryFn = Physics.query({\n     *     name: 'circle', // only circles\n     *     $nin: wheelsArray, // not in the wheelsArray\n     *     labels: { $in: [ 'player', 'monster' ] } // that have player OR monster labels\n     * });\n     *\n     * var obj = {\n     *     name: 'circle',\n     *     labels: [ 'round' ]\n     * };\n     *\n     * queryFn( obj ); // -> false\n     * // give it a player tag\n     * obj.labels.push('player');\n     * queryFn( obj ); // -> true\n     * // put it inside the wheelsArray\n     * wheelsArray.push( obj );\n     * queryFn( obj ); // -> false\n     * ```\n     **/\n    var Query = function Query( rules, /* internal use */ $op ){\n\n        var op\n            ,l\n            ,rule\n            ,first\n            ,list\n            ,fn\n            ;\n\n        if ( $op ){\n            \n            // parse operation choice\n            if ( $op === '$or' || $op === '$and' ){\n\n                // expect a rules array\n                for ( op = 0, l = rules.length; op < l; ++op ){\n                    \n                    fn = Query( rules[ op ] );\n                    // if first hasn't been set yet, set it and start the list there\n                    // otherwise set the next node of the list\n                    list = list ? list.next = fn : first = fn;\n                }\n\n                return ($op === '$or') ? $or( first ) : $and( first );\n            } else if ( op = operations[ $op ] ){\n\n                return op( rules );\n\n            } else {\n                // does not compute...\n                throw 'Unknown query operation: ' + $op;\n            }\n        }\n\n        // loop through rules\n        for ( op in rules ){\n            rule = rules[ op ];\n   \n            if ( op[0] === '$' ){\n                // it's an operation rule\n                fn = Query( rule, op );\n                \n            } else if ( Physics.util.isPlainObject( rule ) ) {\n                // it's an object so parse subrules\n                fn = wrapRule( Query( rule ), op );\n            } else {\n                // simple equality rule\n                fn = $eq( rule, op );\n            }\n\n            // if first hasn't been set yet, set it and start the list there\n            // otherwise set the next node of the list\n            list = list ? list.next = fn : first = fn;\n        }\n\n        // return the rules test\n        return $and( first || fnTrue );\n    };\n\n    Physics.query = Query;\n\n})(this);\n\n\n// ---\n// inside: src/core/behavior.js\n\n(function(){\n\n    var defaults = {\n        priority: 0\n    };\n\n    /** related to: Physics.util.decorator\n     * Physics.behavior( name[, options] ) -> Behavior\n     * - name (String): The name of the behavior to create\n     * - options (Object): The configuration for that behavior ( depends on behavior ).\n       Available options and defaults:\n       \n       ```javascript\n        {\n           priority: 0 // the priority of this body\n        }\n       ```\n     *\n     * Factory function for creating Behaviors.\n     *\n     * Visit [the PhysicsJS wiki on Behaviors](https://github.com/wellcaffeinated/PhysicsJS/wiki/Behaviors)\n     * for usage documentation.\n     **/\n    Physics.behavior = Decorator('behavior', {\n\n        /** belongs to: Physics.behavior\n         * class Behavior\n         *\n         * The base class for behaviors created by [[Physics.behavior]] factory function.\n         **/\n\n        /** internal\n         * Behavior#init( options )\n         * - options (Object): The configuration options passed by the factory\n         * \n         * Initialization. Internal use.\n         **/\n        init: function( options ){\n            \n            /** related to: Physics.util.options\n             * Behavior#options( options ) -> Object\n             * - options (Object): The options to set as an object\n             * + (Object): The options\n             * \n             * Set options on this instance. \n             * \n             * Access options directly from the options object.\n             * \n             * Example:\n             *\n             * ```javascript\n             * this.options.someOption;\n             * ```\n             * \n             **/\n            this.options = Physics.util.options( defaults );\n            this.options( options );\n        },\n\n        /**\n         * Behavior#applyTo( arr ) -> this\n         * - arr (Array): Array of bodies to apply this behavior to. Specify `true` for all objects in world.\n         * \n         * Apply the behavior to a group of bodies.\n         **/\n        applyTo: function( arr ){\n\n            if ( arr === true ){\n                this._targets = null;\n            } else {\n                this._targets = Physics.util.uniq( arr );\n            }\n            return this;\n        },\n\n        /**\n         * Behavior#getTargets() -> Array\n         * + (Array): The array of bodies (by reference!) this behavior is applied to.\n         * \n         * Get the array of bodies (by reference!) this behavior is applied to.\n         **/\n        getTargets: function(){\n            \n            return this._targets || ( this._world ? this._world._bodies : [] );\n        },\n\n        /**\n         * Behavior#setWorld( world ) -> this\n         * - world (Object): The world (or null)\n         *\n         * Set which world to apply to.\n         *\n         * Usually this is called internally. Shouldn't be a need to call this yourself usually.\n         **/\n        setWorld: function( world ){\n\n            if ( this.disconnect && this._world ){\n                this.disconnect( this._world );\n            }\n\n            this._world = world;\n\n            if ( this.connect && world ){\n                this.connect( world );\n            }\n\n            return this;\n        },\n\n        /**\n         * Behavior#connect( world )\n         * - world (Physics.world): The world to connect to\n         * \n         * Connect to a world.\n         *\n         * Extend this when creating behaviors if you need to specify pubsub management.\n         * Automatically called when added to world by the [[Behavior#setWorld]] method.\n         **/\n        connect: function( world ){\n\n            if (this.behave){\n                world.on('integrate:positions', this.behave, this, this.options.priority);\n            }\n        },\n\n        /**\n         * Behavior#disconnect( world )\n         * - world (Physics.world): The world to disconnect from\n         * \n         * Disconnect from a world.\n         *\n         * Extend this when creating behaviors if you need to specify pubsub management.\n         * Automatically called when added to world by the [[Behavior#setWorld]] method.\n         **/\n        disconnect: function( world ){\n\n            if (this.behave){\n                world.off('integrate:positions', this.behave, this);\n            }\n        },\n\n        /**\n         * Behavior#behave( data )\n         * - data (Object): The pubsub `integrate:positions` event data\n         * \n         * Default method run on every world integration.\n         *\n         * You _must_ extend this when creating a behavior,\n         * unless you extend the [[Behavior#connect]] and [[Behavior#disconnect]] methods.\n         **/\n        behave: null\n    });\n\n}());\n\n// ---\n// inside: src/core/body.js\n\n(function(){\n\n    var defaults = {\n\n        // is the body hidden (not to be rendered)?\n        hidden: false,\n        // is the body `dynamic`, `kinematic` or `static`?\n        // http://www.box2d.org/manual.html#_Toc258082973\n        treatment: 'dynamic',\n        // body mass\n        mass: 1.0,\n        // body restitution. How \"bouncy\" is it?\n        restitution: 1.0,\n        // what is its coefficient of friction with another surface with COF = 1?\n        cof: 0.8,\n        // what is the view object (mixed) that should be used when rendering?\n        view: null\n    };\n\n    var uidGen = 1;\n\n    var Pi2 = Math.PI * 2;\n    function cycleAngle( ang ){\n        return ((ang % Pi2) + Pi2) % Pi2;\n    }\n\n    /** related to: Physics.util.decorator\n     * Physics.body( name[, options] ) -> Body\n     * - name (String): The name of the body to create\n     * - options (Object): The configuration for that body ( depends on body ).\n       Available options and defaults:\n\n       ```javascript\n        {\n            // is the body hidden (not to be rendered)?\n            hidden: false,\n            // is the body `dynamic`, `kinematic` or `static`?\n            // http://www.box2d.org/manual.html#_Toc258082973\n            treatment: 'dynamic',\n            // body mass\n            mass: 1.0,\n            // body restitution. How \"bouncy\" is it?\n            restitution: 1.0,\n            // what is its coefficient of friction with another surface with COF = 1?\n            cof: 0.8,\n            // what is the view object (mixed) that should be used when rendering?\n            view: null,\n            // the vector offsetting the geometry from its center of mass\n            offset: Physics.vector(0,0)\n        }\n       ```\n     *\n     * Factory function for creating Bodies.\n     *\n     * Visit [the PhysicsJS wiki on Bodies](https://github.com/wellcaffeinated/PhysicsJS/wiki/Bodies)\n     * for usage documentation.\n     **/\n    Physics.body = Decorator('body', {\n\n        /** belongs to: Physics.body\n         * class Body\n         *\n         * The base class for bodies created by [[Physics.body]] factory function.\n         **/\n\n        /** internal\n         * Body#init( options )\n         * - options (Object): The configuration options passed by the factory\n         *\n         * Initialization. Internal use.\n         **/\n        init: function( options ){\n\n            var self = this;\n            var vector = Physics.vector;\n\n            /** related to: Physics.util.options\n             * Body#options( options ) -> Object\n             * - options (Object): The options to set as an object\n             * + (Object): The options\n             *\n             * Set options on this instance.\n             *\n             * Access options directly from the options object.\n             *\n             * Example:\n             *\n             * ```javascript\n             * this.options.someOption;\n             * ```\n             *\n             **/\n            // all options get copied onto the body.\n            this.options = Physics.util.options( defaults, this );\n            this.options.onChange(function( opts ){\n                self.offset = new vector( opts.offset );\n            });\n            this.options( options );\n\n            /**\n             * Body#state\n             *\n             * The physical state container.\n             *\n             * - ``this.state.pos`` ([[Physics.vector]]) The position vector.\n             * - ``this.state.vel`` ([[Physics.vector]]) The velocity vector.\n             * - ``this.state.acc`` ([[Physics.vector]]) The acceleration vector.\n             * - ``this.state.angular.pos`` ([[Number]]) The angular position (in radians, positive is clockwise starting along the x axis)\n             * - ``this.state.angular.vel`` ([[Number]]) The angular velocity\n             * - ``this.state.angular.acc`` ([[Number]]) The angular acceleration\n             *\n             * Properties from the previous timestep are stored in:\n             * ```javascript\n             * this.state.old; // .pos, .vel, ...\n             * ```\n             **/\n            this.state = {\n                pos: new vector( this.x, this.y ),\n                vel: new vector( this.vx, this.vy ),\n                acc: new vector(),\n                angular: {\n                    pos: this.angle || 0.0,\n                    vel: this.angularVelocity || 0.0,\n                    acc: 0.0\n                },\n                old: {\n                    pos: new vector(),\n                    vel: new vector(),\n                    acc: new vector(),\n                    angular: {\n                        pos: 0.0,\n                        vel: 0.0,\n                        acc: 0.0\n                    }\n                }\n            };\n\n            // private storage for sleeping\n            this._sleepAngPosMean = 0;\n            this._sleepAngPosVariance = 0;\n            this._sleepPosMean = new vector();\n            this._sleepPosVariance = new vector();\n            this._sleepMeanK = 0;\n\n            // cleanup\n            delete this.x;\n            delete this.y;\n            delete this.vx;\n            delete this.vy;\n            delete this.angle;\n            delete this.angularVelocity;\n\n            if (this.mass === 0){\n                throw \"Error: Bodies must have non-zero mass\";\n            }\n\n            /**\n             * Body#uid = Number\n             *\n             * The unique id for the body\n             **/\n            this.uid = uidGen++;\n\n            /** related to: Physics.geometry\n             * Body#geometry\n             *\n             * The geometry for this body.\n             *\n             * By default it is a `point` geometry which gets overridden.\n             **/\n            this.geometry = Physics.geometry('point');\n\n            /**\n             * Body#mass = 1.0\n             *\n             * The mass.\n             **/\n\n            /**\n             * Body#offset\n             *\n             * The vector offsetting the body's shape from its center of mass.\n             **/\n\n             /**\n              * Body#restitution = 1.0\n              *\n              * The restitution.\n              *\n              * This is the \"bounciness\" of the body.\n              * It's a number between `0` and `1`.\n              *\n              * A restitution of 1 is the bounciest.\n              *\n              * A restitution of 0 is not bouncy.\n              *\n              * When colliding the restitutions of bodies are\n              * multiplied together to get the restitution between two\n              * bodies.\n              *\n              **/\n\n              /**\n               * Body#cof = 0.8\n               *\n               * The coefficient of friction of the body.\n               *\n               * It's how much \"slide\" it has during collisions.\n               *\n               * A `cof` of `0` will really slidy.\n               *\n               * A `cof` of `1` has no slide.\n               *\n               * This is a very simplistic implementation at the moment.\n               * What would be better is to have both static and kinetic\n               * friction. But that's not done yet.\n               **/\n\n               /**\n                * Body#treatment = String\n                *\n                * How the body is treated by the simulation.\n                *\n                * The body can be `dynamic`, `kinematic` or `static` as\n                * described by the [analogous box2d docs](http://www.box2d.org/manual.html#_Toc258082973).\n                *\n                * * _dynamic_ bodies are treated \"normally\". They are integrated, and collide, and all that.\n                * * _kinematic_ bodies are bodies that move at a specified velocity. Other bodies collide with them, but they don't bounce off of other bodies.\n                * * _static_ bodies just stand still. They are like obstacles.\n                **/\n\n                /**\n                 * Body#hidden = false\n                 *\n                 * Determines whether the body should be hidden by the renderer.\n                 **/\n\n                /** related to: Physics.renderer\n                 * Body#view = it_depends\n                 *\n                 * Storage for use by the renderer.\n                 *\n                 * The type of renderer will put different things in the view property.\n                 * Basically, this is how the body \"looks\". It could be a HTMLElement, or\n                 * an Image, etc...\n                 *\n                 * If your body changes appearance (shape), you should modify this somehow\n                 * otherwise the renderer will keep using this same view. If you're letting\n                 * the renderer create the view for you, just set this to `undefined` if the\n                 * body gets modified in shape during the simulation.\n                 **/\n\n                /** related to: Physics.renderer\n                 * Body#styles\n                 *\n                 * The styles the renderer should use for creating the view.\n                 *\n                 * The styles depend on the renderer. See [[Renderer#createView]] for style options.\n                 **/\n        },\n\n        /**\n         * Body#sleep( [dt] ) -> Boolean\n         * - dt (Number): Time to advance the idle time\n         * - dt (Boolean): If `true`, the body will be forced to sleep. If `false`, the body will be forced to awake.\n         *\n         * Get and/or set whether the body is asleep.\n         *\n         * If called with a time (in ms), the time will be added to the idle time and sleep conditions will be checked.\n         **/\n        sleep: function( dt ){\n\n            if ( dt === true ){\n                // force sleep\n                this.asleep = true;\n\n            } else if ( dt === false ){\n                // force wakup\n                this.asleep = false;\n                this._sleepMeanK = 0;\n                this._sleepAngPosMean = 0;\n                this._sleepAngPosVariance = 0;\n                this._sleepPosMean.zero();\n                this._sleepPosVariance.zero();\n                this.sleepIdleTime = 0;\n\n            } else if ( dt && !this.asleep ) {\n\n                this.sleepCheck( dt );\n            }\n\n            return this.asleep;\n        },\n\n        /**\n         * Body#sleepCheck( [dt] )\n         * - dt (Number): Time to advance the idle time\n         *\n         * Check if the body should be sleeping.\n         *\n         * Call with no arguments if some event could possibly wake up the body. This will force the body to recheck.\n         **/\n        sleepCheck: function( dt ){\n\n            var opts = this._world && this._world.options;\n\n            // if sleeping disabled. stop.\n            if ( this.sleepDisabled || (opts && opts.sleepDisabled) ){\n                return;\n            }\n\n            var limit\n                ,v\n                ,d\n                ,r\n                ,aabb\n                ,scratch = Physics.scratchpad()\n                ,diff = scratch.vector()\n                ,diff2 = scratch.vector()\n                ,kfac\n                ,stats\n                ;\n\n            dt = dt || 0;\n            aabb = this.geometry.aabb();\n            r = Math.max(aabb.hw, aabb.hh);\n\n            if ( this.asleep ){\n                // check velocity\n                v = this.state.vel.norm() + Math.abs(r * this.state.angular.vel);\n                limit = this.sleepSpeedLimit || (opts && opts.sleepSpeedLimit) || 0;\n\n                if ( v >= limit ){\n                    this.sleep( false );\n                    return scratch.done();\n                }\n            }\n\n            this._sleepMeanK++;\n            kfac = this._sleepMeanK > 1 ? 1/(this._sleepMeanK - 1) : 0;\n            Physics.statistics.pushRunningVectorAvg( this.state.pos, this._sleepMeanK, this._sleepPosMean, this._sleepPosVariance );\n            // we take the sin because that maps the discontinuous angle to a continuous value\n            // then the statistics calculations work better\n            stats = Physics.statistics.pushRunningAvg( Math.sin(this.state.angular.pos), this._sleepMeanK, this._sleepAngPosMean, this._sleepAngPosVariance );\n            this._sleepAngPosMean = stats[0];\n            this._sleepAngPosVariance = stats[1];\n            v = this._sleepPosVariance.norm() + Math.abs(r * Math.asin(stats[1]));\n            v *= kfac;\n            limit = this.sleepVarianceLimit || (opts && opts.sleepVarianceLimit) || 0;\n            // console.log(v, limit, kfac, this._sleepPosVariance.norm(), stats[1])\n            if ( v <= limit ){\n                // check idle time\n                limit = this.sleepTimeLimit || (opts && opts.sleepTimeLimit) || 0;\n                this.sleepIdleTime = (this.sleepIdleTime || 0) + dt;\n\n                if ( this.sleepIdleTime > limit ){\n                    this.asleep = true;\n                }\n            } else {\n                this.sleep( false );\n            }\n\n            scratch.done();\n        },\n\n        /**\n         * Body#setWorld( world ) -> this\n         * - world (Object): The world (or null)\n         *\n         * Set which world to apply to.\n         *\n         * Usually this is called internally. Shouldn't be a need to call this yourself usually.\n         **/\n        setWorld: function( world ){\n\n            if ( this.disconnect && this._world ){\n                this.disconnect( this._world );\n            }\n\n            this._world = world;\n\n            if ( this.connect && world ){\n                this.connect( world );\n            }\n\n            return this;\n        },\n\n        /**\n         * Body#accelerate( acc ) -> this\n         * - acc (Physics.vector): The acceleration vector\n         *\n         * Accelerate the body by adding supplied vector to its current acceleration\n         **/\n        accelerate: function( acc ){\n\n            if ( this.treatment === 'dynamic' ){\n                this.state.acc.vadd( acc );\n            }\n\n            return this;\n        },\n\n        /**\n         * Body#applyForce( force[, p] ) -> this\n         * - force (Vectorish): The force vector\n         * - p (Vectorish): The point vector from the COM at which to apply the force\n         *\n         * Apply a force at center of mass, or at point `p` relative to the center of mass\n         **/\n        applyForce: function( force, p ){\n\n            if ( this.treatment !== 'dynamic' ){\n                return this;\n            }\n\n            var scratch = Physics.scratchpad()\n                ,r = scratch.vector()\n                ,state\n                ;\n\n            // if no point at which to apply the force... apply at center of mass\n            if ( p && this.moi ){\n\n                // apply torques\n                state = this.state;\n                r.clone( p );\n                // r cross F\n                this.state.angular.acc -= r.cross( force ) / this.moi;\n            }\n\n            this.accelerate( r.clone( force ).mult( 1/this.mass ) );\n\n            scratch.done();\n            return this;\n        },\n\n        /** related to: Body#offset\n         * Body#getGlobalOffset( [out] ) -> Physics.vector\n         * - out (Physics.vector): A vector to use to put the result into. One is created if `out` isn't specified.\n         * + (Physics.vector): The offset in global coordinates\n         *\n         * Get the body offset vector (from the center of mass) for the body's shape in global coordinates.\n         **/\n        getGlobalOffset: function( out ){\n\n            out = out || new Physics.vector();\n            out.clone( this.offset ).rotate( this.state.angular.pos );\n            return out;\n        },\n\n        /** related to: Physics.aabb\n         * Body#aabb() -> Object\n         * + (Object): The aabb of this body\n         *\n         * Get the Axis aligned bounding box for the body in its current position and rotation\n         **/\n        aabb: function(){\n\n            var angle = this.state.angular.pos\n                ,scratch = Physics.scratchpad()\n                ,v = scratch.vector()\n                ,aabb = this.geometry.aabb( angle )\n                ;\n\n            this.getGlobalOffset( v );\n\n            aabb.x += this.state.pos._[0] + v._[0];\n            aabb.y += this.state.pos._[1] + v._[1];\n\n            return scratch.done( aabb );\n        },\n\n        /**\n         * Body#toBodyCoords( v ) -> Physics.vector\n         * - v (Physics.vector): The vector to transform\n         * + (Physics.vector): The transformed vector\n         *\n         * Transform a vector into coordinates relative to this body.\n         **/\n        toBodyCoords: function( v ){\n            return v.vsub( this.state.pos ).rotate( -this.state.angular.pos );\n        },\n\n        /**\n          * Body#toWorldCoords( v ) -> Physics.vector\n          * - v (Physics.vector): The vector to transform\n          * + (Physics.vector): The transformed vector\n          *\n          * Transform a vector from body coordinates into world coordinates.\n          **/\n        toWorldCoords: function( v ){\n            return v.rotate( this.state.angular.pos ).vadd( this.state.pos );\n        },\n\n        /**\n         * Body#recalc() -> this\n         *\n         * Recalculate properties.\n         *\n         * Intended to be overridden by subclasses. Call when body physical properties are changed.\n         **/\n        recalc: function(){\n            // override to recalculate properties\n            return this;\n        }\n    });\n\n    /**\n     * Body.getCOM( bodies[, com] ) -> Physics.vector\n     * - bodies (Array): The list of bodies\n     * - com (Physics.vector): The vector to put result into. A new vector will be created if not provided.\n     * + (Physics.vector): The center of mass position\n     *\n     * Get center of mass position from list of bodies.\n     **/\n    Physics.body.getCOM = function( bodies, com ){\n        // @TODO add a test for this fn\n        var b\n            ,pos\n            ,i\n            ,l = bodies && bodies.length\n            ,M = 0\n            ;\n\n        com = com || new Physics.vector();\n\n        if ( !l ){\n            return com.zero();\n        }\n\n        if ( l === 1 ){\n            return com.clone( bodies[0].state.pos );\n        }\n\n        com.zero();\n\n        for ( i = 0; i < l; i++ ){\n            b = bodies[ i ];\n            pos = b.state.pos;\n            com.add( pos._[0] * b.mass, pos._[1] * b.mass );\n            M += b.mass;\n        }\n\n        com.mult( 1 / M );\n\n        return com;\n    };\n\n}());\n\n\n// ---\n// inside: src/core/geometry.js\n\n(function(){\n    /** related to: Physics.util.decorator\n     * Physics.geometry( name[, options] ) -> Geometry\n     * - name (String): The name of the geometry to create\n     * - options (Object): The configuration for that geometry ( depends on geometry ).\n     *\n     * Factory function for creating Geometries.\n     *\n     * Visit [the PhysicsJS wiki on Geometries](https://github.com/wellcaffeinated/PhysicsJS/wiki/Geometries)\n     * for usage documentation.\n     **/\n    Physics.geometry = Decorator('geometry', {\n\n        /** belongs to: Physics.geometry\n         * class Geometry\n         *\n         * The base class for geometries created by [[Physics.geometry]] factory function.\n         **/\n\n        /** internal\n         * Geometry#init( options )\n         * - options (Object): The configuration options passed by the factory\n         * \n         * Initialization. Internal use.\n         **/\n        init: function( options ){\n\n            /** related to: Physics.util.options\n             * Geometry#options( options ) -> Object\n             * - options (Object): The options to set as an object\n             * + (Object): The options\n             * \n             * Set options on this instance. \n             * \n             * Access options directly from the options object.\n             * \n             * Example:\n             *\n             * ```javascript\n             * this.options.someOption;\n             * ```\n             * \n             **/\n            this.options = Physics.util.options();\n            this.options( options );\n\n            this._aabb = new Physics.aabb();\n        },\n        \n        /** related to: Physics.aabb\n         * Geometry#aabb( angle ) -> Object\n         * - angle (Number): The angle to rotate the geometry\n         * + (Object): Bounding box values\n         * \n         * Get axis-aligned bounding box for this object (rotated by angle if specified).\n         **/\n        aabb: function( angle ){\n\n            return Physics.aabb.clone(this._aabb);\n        },\n\n        /**\n         * Geometry#getFarthestHullPoint( dir[, result] ) -> Physics.vector\n         * - dir (Physics.vector): Direction to look\n         * - result (Physics.vector): A vector to write result to. Speeds up calculations.\n         * + (Physics.vector): The farthest hull point in local coordinates\n         * \n         * Get farthest point on the hull of this geometry\n         * along the direction vector `dir`\n         * returns local coordinates. Replaces result if provided.\n         *\n         * Assume all coordinates are relative to the geometry \n         * centroid (IE: in the body frame).\n         * \n         * This should take a direction vector then it should\n         * calculate the location (in that frame of reference)\n         * of the point on the perimeter (hull) if you traveled\n         * in a straight line from the centroid in the provided\n         * direction. The result should be returned/set just like\n         * it is in the other geometries.\n         **/\n        getFarthestHullPoint: function( dir, result ){\n\n            result = result || new Physics.vector();\n\n            // not implemented.\n            return result.set( 0, 0 );\n        },\n\n        /** related to: Geometry#getFarthestHullPoint\n         * Geometry#getFarthestCorePoint( dir[, result] ) -> Physics.vector\n         * - dir (Physics.vector): Direction to look\n         * - result (Physics.vector): A vector to write result to. Speeds up calculations.\n         * + (Physics.vector): The farthest hull point in local coordinates\n         * \n         * Get farthest point on the core shape of this geometry\n         * along the direction vector `dir`\n         * returns local coordinates. Replaces result if provided.\n         *\n         * This does almost the same thing as [[Geometry#getFarthestHullPoint]]\n         * but shrinks the shape by subtracting \"margin\" from it.\n         * Return the position of the point on the \"core\" shape.\n         **/\n        getFarthestCorePoint: function( dir, result, margin ){\n\n            result = result || new Physics.vector();\n\n            // not implemented.\n            return result.set( 0, 0 );\n        }\n    });\n\n}());\n\n// ---\n// inside: src/core/geometry-helpers.js\n\n/*\n * Geometry helper functions\n */\n\n/**\n * Physics.geometry.regularPolygonVertices( sides, radius ) -> Array\n * - sides (Number): Number of sides the polygon has\n * - radius (Number): Size from center to a vertex\n * + (Array): A list of [[Vectorish]] objects representing the vertices\n *\n * Generate a list of vertices for a regular polygon of any number of sides.\n **/\nPhysics.geometry.regularPolygonVertices = function( sides, radius ){\n    var verts = []\n        ,angle = Math.PI * 2 / sides\n        ,a = 0\n        ,i\n        ;\n\n    for ( i = 0; i < sides; i++ ){\n        verts.push({\n            x: radius * Math.cos( a )\n            ,y: radius * Math.sin( a )\n        });\n\n        a += angle;\n    }\n\n    return verts;\n};\n\n/**\n * Physics.geometry.isPolygonConvex( hull ) -> Boolean\n * - hull (Array): Array of ([[Vectorish]]) vertices\n * + (Boolean): `true` if the polygon is convex. `false` otherwise.\n *\n * Determine if polygon hull is convex\n **/\nPhysics.geometry.isPolygonConvex = function( hull ){\n\n    var scratch = Physics.scratchpad()\n        ,prev = scratch.vector()\n        ,next = scratch.vector()\n        ,tmp = scratch.vector()\n        ,ret = true\n        ,sign = false\n        ,l = hull.length\n        ;\n\n    if ( !hull || !l ){\n        return false;\n    }\n\n    if ( l < 3 ){\n        // it must be a point or a line...\n        // which are convex\n        scratch.done();\n        return ret;\n    }\n\n    prev.clone( hull[ 0 ] ).vsub( tmp.clone( hull[ l - 1 ] ) );\n\n    // loop over the edges of the hull and construct vectors of the current\n    // edge and retain the last edge\n    // add two to the length to do a full cycle\n    for ( var i = 1; i <= l; ++i ){\n\n        next.clone( hull[ i % l ] ).vsub( tmp.clone( hull[ (i - 1) % l ] ) );\n\n        if ( sign === false ){\n\n            // first check the sign of the first cross product\n            sign = prev.cross( next );\n\n        } else if ( (sign > 0) ^ (prev.cross( next ) > 0) ){\n\n            // if the cross products are different signs it's not convex\n            ret = false;\n            break;\n        }\n\n        // remember the last edge\n        next.swap( prev );\n    }\n\n    scratch.done();\n    return ret;\n};\n\n/**\n * Physics.geometry.getPolygonMOI( hull ) -> Number\n * - hull (Array): Array of ([[Vectorish]]) vertices\n * + (Number): The polygon's moment of inertia\n *\n * Gets the moment of inertia of a convex polygon\n *\n * See [List of moments of inertia](http://en.wikipedia.org/wiki/List_of_moments_of_inertia)\n * for more information.\n *\n * _Note_: we make the following assumpations:\n * * mass is unitary (== 1)\n * * axis of rotation is the origin\n **/\nPhysics.geometry.getPolygonMOI = function( hull ){\n\n    var scratch = Physics.scratchpad()\n        ,prev = scratch.vector()\n        ,next = scratch.vector()\n        ,num = 0\n        ,denom = 0\n        ,tmp\n        ,l = hull.length\n        ;\n\n    if ( l < 2 ){\n        // it must be a point\n        // moi = 0\n        scratch.done();\n        return 0;\n    }\n\n    if ( l === 2 ){\n        // it's a line\n        // get length squared\n        tmp = next.clone( hull[ 1 ] ).distSq( prev.clone( hull[ 0 ] ) );\n        scratch.done();\n        return tmp / 12;\n    }\n\n    prev.clone( hull[ 0 ] );\n\n    for ( var i = 1; i < l; ++i ){\n\n        next.clone( hull[ i ] );\n\n        tmp = Math.abs( next.cross( prev ) );\n        num += tmp * ( next.normSq() + next.dot( prev ) + prev.normSq() );\n        denom += tmp;\n\n        prev.swap( next );\n    }\n\n    scratch.done();\n    return num / ( 6 * denom );\n};\n\n/**\n * Physics.geometry.isPointInPolygon( pt, hull ) -> Boolean\n * - pt (Vectorish): The point to test\n * - hull (Array): Array of ([[Vectorish]]) vertices\n * + (Boolean): `true` if point `pt` is inside the polygon\n *\n * Check if point is inside polygon hull.\n **/\nPhysics.geometry.isPointInPolygon = function( pt, hull ){\n\n    var scratch = Physics.scratchpad()\n        ,point = scratch.vector().clone( pt )\n        ,prev = scratch.vector()\n        ,next = scratch.vector()\n        ,ang = 0\n        ,l = hull.length\n        ;\n\n    if ( l < 2 ){\n        // it's a point...\n        ang = point.equals( prev.clone( hull[ 0 ] ));\n        scratch.done();\n        return ang;\n    }\n\n    if ( l === 2 ){\n        // it's a line\n        ang = point.angle( prev.clone( hull[ 0 ] ));\n        ang += point.angle( prev.clone( hull[ 1 ] ));\n        scratch.done();\n        return ( Math.abs(ang) === Math.PI );\n    }\n\n    prev.clone( hull[ 0 ] ).vsub( point );\n\n    // calculate the sum of angles between vector pairs\n    // from point to vertices\n    for ( var i = 1; i <= l; ++i ){\n\n        next.clone( hull[ i % l ] ).vsub( point );\n        ang += next.angle( prev );\n        prev.swap( next );\n    }\n\n    scratch.done();\n    return ( Math.abs(ang) > 1e-6 );\n};\n\n/**\n * Physics.geometry.getPolygonArea( hull ) -> Number\n * - hull (Array): Array of ([[Vectorish]]) vertices\n * + (Number): The area (positive for clockwise ordering)\n *\n * Get the signed area of the polygon.\n **/\nPhysics.geometry.getPolygonArea = function getPolygonArea( hull ){\n\n    var scratch = Physics.scratchpad()\n        ,prev = scratch.vector()\n        ,next = scratch.vector()\n        ,ret = 0\n        ,l = hull.length\n        ;\n\n    if ( l < 3 ){\n        // it must be a point or a line\n        // area = 0\n        scratch.done();\n        return 0;\n    }\n\n    prev.clone( hull[ l - 1 ] );\n\n    for ( var i = 0; i < l; ++i ){\n\n        next.clone( hull[ i ] );\n\n        ret += prev.cross( next );\n\n        prev.swap( next );\n    }\n\n    scratch.done();\n    return ret / 2;\n};\n\n/**\n * Physics.geometry.getPolygonCentroid( hull ) -> Physics.vector\n * - hull (Array): Array of ([[Vectorish]]) vertices\n * + (Physics.vector): The centroid\n *\n * Get the coordinates of the centroid.\n **/\nPhysics.geometry.getPolygonCentroid = function getPolygonCentroid( hull ){\n\n    var scratch = Physics.scratchpad()\n        ,prev = scratch.vector()\n        ,next = scratch.vector()\n        ,ret = new Physics.vector()\n        ,tmp\n        ,l = hull.length\n        ;\n\n    if ( l < 2 ){\n        // it must be a point\n        scratch.done();\n        return new Physics.vector( hull[0] );\n    }\n\n    if ( l === 2 ){\n        // it's a line\n        // get the midpoint\n        scratch.done();\n        return new Physics.vector((hull[ 1 ].x + hull[ 0 ].x)/2, (hull[ 1 ].y + hull[ 0 ].y)/2 );\n    }\n\n    prev.clone( hull[ l - 1 ] );\n\n    for ( var i = 0; i < l; ++i ){\n\n        next.clone( hull[ i ] );\n\n        tmp = prev.cross( next );\n        prev.vadd( next ).mult( tmp );\n        ret.vadd( prev );\n\n        prev.swap( next );\n    }\n\n    tmp = 1 / (6 * Physics.geometry.getPolygonArea( hull ));\n\n    scratch.done();\n    return ret.mult( tmp );\n};\n\n/**\n * Physics.geometry.nearestPointOnLine( pt, linePt1, linePt2 ) -> Physics.vector\n * - pt (Vectorish): The point\n * - linePt1 (Vectorish): The first endpoint of the line\n * - linePt2 (Vectorish): The second endpoint of the line\n * + (Vector): The closest point\n *\n * Get the closest point on a discrete line to specified point.\n **/\nPhysics.geometry.nearestPointOnLine = function nearestPointOnLine( pt, linePt1, linePt2 ){\n\n    var scratch = Physics.scratchpad()\n        ,p = scratch.vector().clone( pt )\n        ,A = scratch.vector().clone( linePt1 ).vsub( p )\n        ,L = scratch.vector().clone( linePt2 ).vsub( p ).vsub( A )\n        ,lambdaB\n        ,lambdaA\n        ;\n\n    if ( L.equals(Physics.vector.zero) ){\n        // oh.. it's a zero vector. So A and B are both the closest.\n        // just use one of them\n        scratch.done();\n        return new Physics.vector( linePt1 );\n    }\n\n    lambdaB = - L.dot( A ) / L.normSq();\n    lambdaA = 1 - lambdaB;\n\n    if ( lambdaA <= 0 ){\n        // woops.. that means the closest simplex point\n        // isn't on the line it's point B itself\n        scratch.done();\n        return new Physics.vector( linePt2 );\n    } else if ( lambdaB <= 0 ){\n        // vice versa\n        scratch.done();\n        return new Physics.vector( linePt1 );\n    }\n\n    // guess we'd better do the math now...\n    p = new Physics.vector( linePt2 ).mult( lambdaB ).vadd( A.clone( linePt1 ).mult( lambdaA ) );\n    scratch.done();\n    return p;\n};\n\n\n// ---\n// inside: src/core/integrator.js\n\n(function(){\n\n    var defaults = {\n\n        // drag applied during integration\n        // 0 means vacuum\n        // 0.9 means molasses\n        drag: 0\n    };\n\n    /** related to: Physics.util.decorator\n     * Physics.integrator( name[, options] ) -> Integrator\n     * - name (String): The name of the integrator to create\n     * - options (Object): The configuration for that integrator ( depends on integrator ).\n       Available options and defaults:\n\n       ```javascript\n        {\n            // drag applied during integration\n            // 0 means vacuum\n            // 0.9 means molasses\n            drag: 0\n        }\n       ```\n     *\n     * Factory function for creating Integrators.\n     *\n     * Visit [the PhysicsJS wiki on Integrators](https://github.com/wellcaffeinated/PhysicsJS/wiki/Integrators)\n     * for usage documentation.\n     **/\n    Physics.integrator = Decorator('integrator', {\n\n        /** belongs to: Physics.integrator\n         * class Integrator\n         *\n         * The base class for integrators created by [[Physics.integrator]] factory function.\n         **/\n\n        /** internal\n         * Integrator#init( options )\n         * - options (Object): The configuration options passed by the factory\n         *\n         * Initialization. Internal use.\n         **/\n        init: function( options ){\n\n            /** related to: Physics.util.options\n             * Integrator#options( options ) -> Object\n             * - options (Object): The options to set as an object\n             * + (Object): The options\n             *\n             * Set options on this instance.\n             *\n             * Access options directly from the options object.\n             *\n             * Example:\n             *\n             * ```javascript\n             * this.options.someOption;\n             * ```\n             *\n             **/\n            this.options = Physics.util.options( defaults );\n            this.options( options );\n        },\n\n        /**\n         * Integrator#setWorld( world ) -> this\n         * - world (Object): The world (or null)\n         *\n         * Set which world to apply to.\n         *\n         * Usually this is called internally. Shouldn't be a need to call this yourself usually.\n         **/\n        setWorld: function( world ){\n\n            if ( this.disconnect && this._world ){\n                this.disconnect( this._world );\n            }\n\n            this._world = world;\n\n            if ( this.connect && world ){\n                this.connect( world );\n            }\n\n            return this;\n        },\n\n        /**\n         * Integrator#integrate( bodies, dt ) -> this\n         * - bodies (Array): List of bodies to integrate\n         * - dt (Number): Timestep size\n         *\n         * Integrate bodies by timestep.\n         *\n         * Will emit `integrate:velocities` and `integrate:positions`\n         * events on the world.\n         **/\n        integrate: function( bodies, dt ){\n\n            var world = this._world;\n\n            this.integrateVelocities( bodies, dt );\n\n            if ( world ){\n                world.emit('integrate:velocities', {\n                    bodies: bodies,\n                    dt: dt\n                });\n            }\n\n            this.integratePositions( bodies, dt );\n\n            if ( world ){\n                world.emit('integrate:positions', {\n                    bodies: bodies,\n                    dt: dt\n                });\n            }\n\n            return this;\n        },\n\n        /**\n         * Integrator#connect( world )\n         * - world (Physics.world): The world to connect to\n         *\n         * Connect to a world.\n         *\n         * Extend this when creating integrators if you need to specify pubsub management.\n         * Automatically called when added to world by the [[Integrator#setWorld]] method.\n         **/\n        connect: null,\n\n        /**\n         * Integrator#disconnect( world )\n         * - world (Physics.world): The world to disconnect from\n         *\n         * Disconnect from a world.\n         *\n         * Extend this when creating integrators if you need to specify pubsub management.\n         * Automatically called when added to world by the [[Integrator#setWorld]] method.\n         **/\n        disconnect: null,\n\n        /**\n         * Integrator#integrateVelocities( bodies, dt )\n         * - bodies (Array): List of bodies to integrate\n         * - dt (Number): Timestep size\n         *\n         * Just integrate the velocities.\n         *\n         * Should be overridden when creating integrators.\n         **/\n        integrateVelocities: function( bodies, dt ){\n\n            throw 'The integrator.integrateVelocities() method must be overriden';\n        },\n\n        /**\n         * Integrator#integratePositions( bodies, dt )\n         * - bodies (Array): List of bodies to integrate\n         * - dt (Number): Timestep size\n         *\n         * Just integrate the positions.\n         *\n         * Called after [[Integrator#integrateVelocities]].\n         *\n         * Should be overridden when creating integrators.\n         **/\n        integratePositions: function( bodies, dt ){\n\n            throw 'The integrator.integratePositions() method must be overriden';\n        }\n    });\n\n}());\n\n\n// ---\n// inside: src/core/renderer.js\n\n(function(){\n\n    var defaults = {\n        // draw meta data (fps, steps, etc)\n        meta: false,\n        // refresh rate of meta info\n        metaRefresh: 200,\n\n        // width of viewport\n        width: 600,\n        // height of viewport\n        height: 600,\n        // automatically resize the renderer\n        autoResize: true\n    };\n\n    /** related to: Physics.util.decorator\n     * Physics.renderer( name[, options] ) -> Renderer\n     * - name (String): The name of the renderer to create\n     * - options (Object): The configuration for that renderer ( depends on renderer ).\n       Available options and defaults:\n\n       ```javascript\n        {\n            // draw meta data (fps, steps, etc)\n            meta: false,\n            // refresh rate of meta info\n            metaRefresh: 200,\n\n            // width of viewport\n            width: 600,\n            // height of viewport\n            height: 600\n            // automatically resize the renderer\n            autoResize: true\n        }\n       ```\n     *\n     * Factory function for creating Renderers.\n     *\n     * Visit [the PhysicsJS wiki on Renderers](https://github.com/wellcaffeinated/PhysicsJS/wiki/Renderers)\n     * for usage documentation.\n     **/\n    Physics.renderer = Decorator('renderer', {\n\n        /** belongs to: Physics.renderer\n         * class Renderer\n         *\n         * The base class for renderers created by [[Physics.renderer]] factory function.\n         **/\n\n        /** internal\n         * Renderer#init( options )\n         * - options (Object): The configuration options passed by the factory\n         *\n         * Initialization. Internal use.\n         **/\n        init: function( options ){\n\n            var self = this\n                ,el = typeof options.el === 'string' ? document.getElementById(options.el) : options.el\n                ;\n\n            this.options = Physics.util.options(defaults);\n            this.options( options );\n\n            this.el = el ? el : document.body;\n            this.container = el && el.parentNode ? el.parentNode : document.body;\n            this.drawMeta = Physics.util.throttle( Physics.util.bind(this.drawMeta, this), this.options.metaRefresh );\n\n            window.addEventListener('resize', Physics.util.throttle(function(){\n                if ( self.options.autoResize ){\n                    self.resize();\n                }\n            }), 100);\n        },\n\n        /**\n         * Renderer#resize( [width, height] ) -> this\n         * - width (Number): The width in px\n         * - height (Number): The height in px\n         *\n         * Set the dimensions of the renderer.\n         *\n         * If no dimensions are specified it will auto resize.\n         **/\n        resize: function( width, height ){\n\n            if ( width === undefined && height === undefined ){\n                width = this.container.offsetWidth;\n                height = this.container.offsetHeight;\n            }\n\n            this.width = width || 0;\n            this.height = height || 0;\n            // should be implemented in renderers\n        },\n\n        /**\n         * Renderer#setWorld( world ) -> this\n         * - world (Object): The world (or null)\n         *\n         * Set which world to apply to.\n         *\n         * Usually this is called internally. Shouldn't be a need to call this yourself usually.\n         **/\n        setWorld: function( world ){\n\n            if ( this.disconnect && this._world ){\n                this.disconnect( this._world );\n            }\n\n            this._world = world;\n\n            if ( this.connect && world ){\n                this.connect( world );\n            }\n\n            return this;\n        },\n\n        /**\n         * Renderer#render( bodies, meta ) -> this\n         * - bodies (Array): Array of bodies in the world (by reference!)\n         * - meta (Object): meta information\n         *\n         * Render the world bodies and meta. Called by world.render()\n         **/\n        render: function( bodies, meta ){\n\n            var body\n                ,view\n                ,pos\n                ;\n\n            if (this.beforeRender){\n\n                this.beforeRender();\n            }\n\n            this._world.emit('beforeRender', {\n                renderer: this,\n                bodies: bodies,\n                meta: meta\n            });\n\n            if (this.options.meta){\n                this.drawMeta( meta );\n            }\n\n            this._interpolateTime = meta.interpolateTime;\n\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                body = bodies[ i ];\n                view = body.view || ( body.view = this.createView(body.geometry, body.styles) );\n\n                if ( !body.hidden ){\n                    this.drawBody( body, view );\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Renderer#createView( geometry, styles ) -> Mixed\n         * - geometry (Geometry): geometry The geometry\n         * - styles (Object|String): The styles configuration\n         * + (Mixed): Whatever the renderer needs to render the body.\n         *\n         * Create a view for the specified geometry.\n         *\n         * The view is used to render the body. It is a cached version\n         * of the body that gets moved and rotated according to the simulation.\n         *\n         * The styles are used to modify the appearance of the view.\n         * They depend on the renderer.\n         *\n         * Override this when creating renderers.\n         **/\n        createView: function( geometry, styles ){\n\n            // example:\n            // var el = document.createElement('div');\n            // el.style.height = geometry.height + 'px';\n            // el.style.width = geometry.width + 'px';\n            // return el;\n            throw 'You must override the renderer.createView() method.';\n        },\n\n        /**\n         * Renderer#drawMeta( meta )\n         * - meta (Object): The meta data\n         *\n         * Draw the meta data.\n         *\n         * The meta data will look like this:\n         *\n         * ```javascript\n         * meta = {\n         *     fps: 60, // the frames per second\n         *     ipf: 4 // the number of iterations per frame\n         * };\n         * ```\n         *\n         * Override this when creating renderers.\n         **/\n        drawMeta: function( meta ){\n\n            // example:\n            // this.els.fps.innerHTML = meta.fps.toFixed(2);\n            // this.els.steps.innerHTML = meta.steps;\n            throw 'You must override the renderer.drawMeta() method.';\n        },\n\n        /**\n         * Renderer#drawBody( body, view )\n         * - body (Object): The body to draw\n         * - view (Object): The view for the body\n         *\n         * Draw specified body using specified view.\n         *\n         * Override this when creating renderers.\n         **/\n        drawBody: function( body, view ){\n\n            // example (pseudocode):\n            // view.angle = body.state.angle\n            // view.position = body.state.position\n            throw 'You must override the renderer.drawBody() method.';\n        }\n\n\n    });\n\n}());\n\n\n// ---\n// inside: src/core/world.js\n\n/** related to: Physics\n * class Physics.world\n *\n * The world class and factory function.\n *\n * Use [[Physics]] to create worlds.\n **/\n(function(){\n\n    var execCallbacks = function execCallbacks( fns, scope, args ){\n\n        var fn\n            ,ret\n            ,cb = function(){\n                return execCallbacks( fns, scope, args );\n            }\n            ;\n\n        while ( fn = fns.shift() ){\n\n            ret = fn.apply(scope, args);\n\n            if (ret && ret.then){\n                return ret.then( cb );\n            }\n        }\n    };\n\n    var defaults = {\n\n        // default timestep\n        timestep: 6,\n        // maximum number of iterations per step\n        maxIPF: 4,\n        webworker: false, // NOT YET IMPLEMENTED\n\n        // default integrator\n        integrator: 'verlet',\n\n        // is sleeping disabled?\n        sleepDisabled: false,\n        // speed at which bodies wake up\n        sleepSpeedLimit: 0.05,\n        // variance in position below which bodies fall asleep\n        sleepVarianceLimit: 0.02,\n        // time (ms) before sleepy bodies fall asleep\n        sleepTimeLimit: 500\n    };\n\n    // begin world definitions\n\n    /** alias of: Physics\n     * new Physics.world([options, fn(world, Physics)])\n     * - options (Object): configuration options (see description)\n     * - fn (Function|Array): Callback function or array of callbacks called with this === world\n     * - world (Physics.world): The current world created\n     * - Physics (Physics): The Physics namespace\n     *\n     * World Constructor.\n     *\n     * Use [[Physics]] to create worlds.\n     *\n     * Configuration options and defaults:\n     *\n     * ```javascript\n     * {\n     *  // default timestep\n     *  timestep: 6,\n     *  // maximum number of iterations per step\n     *  maxIPF: 4,\n     *\n     *  // default integrator\n     *  integrator: 'verlet',\n     *\n     *  // is sleeping disabled?\n     *  sleepDisabled: false,\n     *  // speed at which bodies wake up\n     *  sleepSpeedLimit: 0.1,\n     *  // variance in position below which bodies fall asleep\n     *  sleepVarianceLimit: 2,\n     *  // time (ms) before sleepy bodies fall asleep\n     *  sleepTimeLimit: 500\n     * }\n     * ```\n     *\n     * If called with an array of functions, and any functions\n     * return a [promise-like object](http://promises-aplus.github.io/promises-spec/),\n     * each remaining callback will be called only when that promise is resolved.\n     *\n     * Example:\n     *\n     * ```javascript\n     * // hypothetical resources need to be loaded...\n     * Physics( cfg, [\n     *     function( world ){\n     *         var dfd = $.Deferred()\n     *             ,images = []\n     *             ,toLoad = myImages.length\n     *             ,callback = function(){\n     *                 toLoad--;\n     *                 // wait for all images to be loaded\n     *                 if ( toLoad <= 0 ){\n     *                     dfd.resolve();\n     *                 }\n     *             }\n     *             ;\n     *\n     *         // load images\n     *         $.each(myImages, function( src ){\n     *             var img = new Image();\n     *             img.onload = callback;\n     *             img.src = src;\n     *         });\n     *\n     *         return dfd.promise();\n     *     },\n     *     function( world ){\n     *         // won't be executed until images are loaded\n     *         // initialize world... etc...\n     *     }\n     * ]);\n     * ```\n     **/\n    var World = function World( cfg, fn ){\n\n        // allow creation of world without \"new\"\n        if (!(this instanceof World)){\n            return new World( cfg, fn );\n        }\n\n        this.init( cfg, fn );\n    };\n\n    // extend pubsub\n    World.prototype = Physics.util.extend({}, Physics.util.pubsub.prototype, {\n\n        /** internal, see: new Physics.world\n         * Physics.world#init( [options, fn(world, Physics)] )\n         * - options (Object): configuration options (see constructor)\n         * - fn (Function|Array): Callback function or array of callbacks called with this === world\n         *\n         * Initialization\n         **/\n        init: function( cfg, fn ){\n\n            var self = this;\n\n            if ( Physics.util.isFunction( cfg ) || Physics.util.isArray( cfg ) ){\n                fn = cfg;\n                cfg = {};\n            }\n\n            this._meta = {\n               // statistics (fps, etc)\n               fps: 0,\n               ipf: 0\n            };\n            this._bodies = [];\n            this._behaviors = [];\n            this._integrator = null;\n            this._renderer = null;\n            this._paused = false;\n            this._warp = 1;\n            this._time = 0;\n\n            // set options\n            this.options = Physics.util.options( defaults );\n            this.options.onChange(function( opts ){\n\n                // set timestep\n                self.timestep( opts.timestep );\n            });\n            this.options( cfg );\n\n            // add integrator\n            this.add(Physics.integrator( this.options.integrator ));\n\n            // apply the callback function\n            if ( Physics.util.isFunction( fn ) ){\n\n                execCallbacks([ fn ], this, [this, Physics] );\n\n            } else if ( Physics.util.isArray( fn ) ){\n\n                execCallbacks(fn, this, [this, Physics] );\n            }\n        },\n\n        /**\n         * Physics.world#options( cfg ) -> Object\n         * - options (Object): configuration options (see constructor)\n         * + (Object): Options container\n         *\n         * Set config options. Also access options by `.options.<option>`.\n         **/\n        options: null,\n\n        /** chainable\n         * Physics.world#add( things ) -> this\n         * - things (Object|Array): The thing, or array of things (body, behavior, integrator, or renderer) to add.\n         *\n         * Multipurpose add method. Add one or many bodies, behaviors, integrators, renderers...\n         **/\n        add: function( arg ){\n\n            var i = 0\n                ,len = arg && arg.length || 0\n                ,thing = Physics.util.isArray( arg ) ? arg[ 0 ] : arg\n                ;\n\n            if ( !thing ){\n                return this;\n            }\n\n            // we'll either cycle through an array\n            // or just run this on the arg itself\n            do {\n                switch (thing.type){\n\n                    case 'behavior':\n                        this.addBehavior(thing);\n                    break; // end behavior\n\n                    case 'integrator':\n                        this.integrator(thing);\n                    break; // end integrator\n\n                    case 'renderer':\n                        this.renderer(thing);\n                    break; // end renderer\n\n                    case 'body':\n                        this.addBody(thing);\n                    break; // end body\n\n                    default:\n                        throw 'Error: failed to add item of unknown type \"'+ thing.type +'\" to world';\n                    // end default\n                }\n\n            } while ( ++i < len && (thing = arg[ i ]) );\n\n            return this;\n        },\n\n        /** chainable\n         * Physics.world#remove( things ) -> this\n         * - things (Object|Array): The thing, or array of things (body, behavior, integrator, or renderer) to remove.\n         *\n         * Multipurpose remove method. Remove one or many bodies, behaviors, integrators, renderers...\n         **/\n        remove: function( arg ){\n\n            var i = 0\n                ,len = arg && arg.length || 0\n                ,thing = Physics.util.isArray( arg ) ? arg[ 0 ] : arg\n                ;\n\n            if ( !thing ){\n                return this;\n            }\n\n            // we'll either cycle through an array\n            // or just run this on the arg itself\n            do {\n                switch (thing.type){\n\n                    case 'behavior':\n                        this.removeBehavior( thing );\n                    break; // end behavior\n\n                    case 'integrator':\n                        if (thing === this._integrator){\n                            this.integrator( null );\n                        }\n                    break; // end integrator\n\n                    case 'renderer':\n                        if (thing === this._renderer){\n                            this.renderer( null );\n                        }\n                    break; // end renderer\n\n                    case 'body':\n                        this.removeBody( thing );\n                    break; // end body\n\n                    default:\n                        throw 'Error: failed to remove item of unknown type \"'+ thing.type +'\" from world';\n                    // end default\n                }\n\n            } while ( ++i < len && (thing = arg[ i ]) );\n\n            return this;\n        },\n\n        /** chainable\n         * Physics.world#has( thing ) -> Boolean\n         * - thing (Object): The thing to test\n         * + (Boolean): `true` if thing is in the world, `false` otherwise.\n         *\n         * Determine if a thing has been added to world.\n         **/\n        has: function( thing ){\n\n            var arr\n                ,i\n                ,l\n                ;\n\n            if ( !thing ){\n                return false;\n            }\n\n            switch (thing.type){\n\n                case 'behavior':\n                    arr = this._behaviors;\n                break; // end behavior\n\n                case 'integrator':\n                return ( this._integrator === thing );\n                // end integrator\n\n                case 'renderer':\n                return ( this._renderer === thing );\n                // end renderer\n\n                case 'body':\n                    arr = this._bodies;\n                break; // end body\n\n                default:\n                    throw 'Error: unknown type \"'+ thing.type +'\"';\n                // end default\n            }\n\n            // check array\n            return (Physics.util.indexOf( arr, thing ) > -1);\n        },\n\n        /** chainable\n         * Physics.world#integrator( [integrator] ) -> Integrator|this\n         * - integrator (Integrator): The integrator to set on the world\n         * + (Integrator): The currently set integrator if `integrator` not specified\n         * + (this): for chaining if `integrator` specified\n         *\n         * Get or Set the integrator\n         **/\n        integrator: function( integrator ){\n\n            if ( integrator === undefined ){\n                return this._integrator;\n            }\n\n            // do nothing if already added\n            if ( this._integrator === integrator ){\n                return this;\n            }\n\n            if ( this._integrator ){\n\n                this._integrator.setWorld( null );\n\n                this.emit( 'remove:integrator', {\n                    integrator: this._integrator\n                });\n            }\n\n            if ( integrator ){\n                this._integrator = integrator;\n                this._integrator.setWorld( this );\n\n                this.emit( 'add:integrator', {\n                    integrator: this._integrator\n                });\n            }\n\n            return this;\n        },\n\n        /** chainable\n         * Physics.world#renderer( [renderer] ) -> Renderer|this\n         * - renderer (Renderer): The renderer to set on the world\n         * + (Renderer): The currently set renderer if `renderer` not specified\n         * + (this): for chaining if `renderer` specified\n         *\n         * Get or Set the renderer\n         **/\n        renderer: function( renderer ){\n\n            if ( renderer === undefined ){\n                return this._renderer;\n            }\n\n            // do nothing if renderer already added\n            if ( this._renderer === renderer ){\n                return this;\n            }\n\n            if ( this._renderer ){\n\n                this._renderer.setWorld( null );\n\n                this.emit( 'remove:renderer', {\n                    renderer: this._renderer\n                });\n            }\n\n            if ( renderer ){\n                this._renderer = renderer;\n                this._renderer.setWorld( this );\n\n                this.emit( 'add:renderer', {\n                    renderer: this._renderer\n                });\n            }\n\n            return this;\n        },\n\n        /** chainable\n         * Physics.world#timestep( [dt] ) -> Number|this\n         * - dt (Number): The time step for the world\n         * + (Number): The currently set time step if `dt` not specified\n         * + (this): for chaining if `dt` specified\n         *\n         * Get or Set the timestep\n         **/\n        timestep: function( dt ){\n\n            if ( dt ){\n\n                this._dt = +dt.toPrecision(4); // only keep 4 decimal places of precision otherwise we get rounding errors\n                // calculate the maximum jump in time over which to do iterations\n                this._maxJump = dt * this.options.maxIPF;\n\n                return this;\n            }\n\n            return this._dt;\n        },\n\n        /** chainable\n         * Physics.world#wakeUpAll() -> this\n         * + (this): for chaining\n         *\n         * Wake up all bodies in world.\n         **/\n        wakeUpAll: function(){\n            var i = 0\n                ,l = this._bodies.length\n                ;\n\n            for ( i = 0; i < l; i++ ){\n                this._bodies[ i ].sleep( false );\n            }\n        },\n\n        /** chainable\n         * Physics.world#addBehavior( behavior ) -> this\n         * - behavior (Behavior): The behavior to add\n         *\n         * Add a behavior to the world\n         **/\n        addBehavior: function( behavior ){\n\n            var notify;\n\n            // don't allow duplicates\n            if ( this.has( behavior ) ){\n                return this;\n            }\n\n            behavior.setWorld( this );\n            this._behaviors.push( behavior );\n\n            this.emit( 'add:behavior', {\n                behavior: behavior\n            });\n\n            return this;\n        },\n\n        /**\n         * Physics.world#getBehaviors() -> Array\n         * + (Array): Array of behaviors\n         *\n         * Get copied list of behaviors in the world\n         **/\n        getBehaviors: function(){\n\n            // return the copied array\n            return [].concat(this._behaviors);\n        },\n\n        /** chainable\n         * Physics.world#removeBehavior( behavior ) -> this\n         * - behavior (Behavior): The behavior to remove\n         *\n         * Remove a behavior from the world\n         **/\n        removeBehavior: function( behavior ){\n\n            var behaviors = this._behaviors;\n\n            if (behavior){\n\n                for ( var i = 0, l = behaviors.length; i < l; ++i ){\n\n                    if (behavior === behaviors[ i ]){\n\n                        behaviors.splice( i, 1 );\n                        behavior.setWorld( null );\n\n                        this.emit( 'remove:behavior', {\n                            behavior: behavior\n                        });\n\n                        break;\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /** chainable\n         * Physics.world#addBody( body ) -> this\n         * - body (Body): The behavior to add\n         *\n         * Add a body to the world\n         **/\n        addBody: function( body ){\n\n            var notify;\n\n            // don't allow duplicates\n            if ( this.has( body ) ){\n                return this;\n            }\n\n            body.setWorld( this );\n            this._bodies.push( body );\n\n            this.emit( 'add:body', {\n                body: body\n            });\n\n            return this;\n        },\n\n        /**\n         * Physics.world#getBodies() -> Array\n         * + (Array): Array of bodies\n         *\n         * Get copied list of bodies in the world\n         **/\n        getBodies: function(){\n\n            // return the copied array\n            return [].concat(this._bodies);\n        },\n\n        /** chainable\n         * Physics.world#removeBody( body ) -> this\n         * - body (Body): The body to remove\n         *\n         * Remove a body from the world\n         **/\n        removeBody: function( body ){\n\n            var bodies = this._bodies;\n\n            if (body){\n\n                for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                    if (body === bodies[ i ]){\n\n                        bodies.splice( i, 1 );\n                        body.setWorld( null );\n\n                        this.emit( 'remove:body', {\n                            body: body\n                        });\n\n                        break;\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /** see: Physics.query\n         * Physics.world#findOne( rules ) -> Body | false\n         * Physics.world#findOne( filter(body) ) -> Body | false\n         * - rules (Object): Query rules.\n         * - filter (Function): Filter function called to check bodies\n         * - body (Body): Each body in the world\n         *\n         * Find first matching body based on query rules.\n         **/\n        findOne: function( rules ){\n\n            var self = this\n                ,fn = (typeof rules === 'function') ? rules : Physics.query( rules )\n                ;\n\n            return Physics.util.find( self._bodies, fn ) || false;\n        },\n\n        /** see: Physics.query\n         * Physics.world#find( rules ) -> Array\n         * Physics.world#find( filter(body) ) -> Array\n         * - rules (Object): Query rules\n         * - filter (Function): Filter function called to check bodies\n         * - body (Body): Each body in the world\n         *\n         * Find all matching bodies based on query rules.\n         **/\n        find: function( rules ){\n\n            var self = this\n                ,fn = (typeof rules === 'function') ? rules : Physics.query( rules )\n                ;\n\n            return Physics.util.filter( self._bodies, fn );\n        },\n\n        /** internal\n         * Physics.world#iterate( dt )\n         * - dt (Number): The timestep\n         *\n         * Do a single iteration.\n         **/\n        iterate: function( dt ){\n\n            this._integrator.integrate( this._bodies, dt );\n        },\n\n        /** chainable\n         * Physics.world#step( [now] ) -> this\n         * - now (Number): Current unix timestamp\n         *\n         * Step the world up to specified time or do one step if no time is specified.\n         **/\n        step: function( now ){\n\n            var time = this._time\n                ,warp = this._warp\n                ,invWarp = 1 / warp\n                ,dt = this._dt\n                ,animDt = dt * invWarp\n                ,animMaxJump = this._maxJump * invWarp\n                ,animDiff\n                ,worldDiff\n                ,target\n                ,meta = this._meta\n                ;\n\n            // if it's paused, don't step\n            // or if it's the first step...\n            if ( this._paused || this._animTime === undefined ){\n                this._animTime = now || this._animTime || Physics.util.ticker.now();\n\n                if ( !this._paused ){\n                    this.emit('step', meta);\n                }\n                return this;\n            }\n\n            // new time is specified, or just one iteration ahead\n            now = now || (this._animTime + animDt);\n            // the time between this step and the last\n            animDiff = now - this._animTime;\n\n            // if the time difference is too big... adjust\n            if ( animDiff > animMaxJump ){\n                this._animTime = now - animMaxJump;\n                animDiff = animMaxJump;\n            }\n\n            // the \"world\" time between this step and the last. Adjusts for warp\n            worldDiff = animDiff * warp;\n\n            // the target time for the world time to step to\n            target = time + worldDiff - dt;\n\n            this.emit('beforeStep');\n\n            if ( time <= target ){\n\n                while ( time <= target ){\n                    // increment world time\n                    time += dt;\n                    // increment animation time\n                    this._animTime += animDt;\n                    // record the world time\n                    this._time = time;\n                    // iterate by one timestep\n                    this.iterate( dt );\n                }\n            }\n\n            // set some meta\n            meta.fps = 1000 / (now - this._lastTime); // frames per second\n            meta.ipf = (worldDiff / dt).toFixed(2); // iterations per frame\n            meta.interpolateTime = dt + target - time;\n\n            // record the time this was called\n            this._lastTime = now;\n\n            this.emit('step', meta);\n            return this;\n        },\n\n        /**\n         * Physics.world#warp( [warp] ) -> this|Number\n         * - warp (Number): The time warp factor\n         *\n         * Speed up or slow down the iteration by this factor.\n         *\n         * Example:\n         * ```javascript\n         * // slow motion... 10x slower\n         * world.warp( 0.01 );\n         * ```\n         **/\n        warp: function( warp ){\n            if ( warp === undefined ){\n                return this._warp;\n            }\n\n            this._warp = warp || 1;\n\n            return this;\n        },\n\n        /** chainable\n         * Physics.world#render() -> this\n         *\n         * Render current world state using the renderer\n         **/\n        render: function(){\n\n            if ( !this._renderer ){\n                throw \"No renderer added to world\";\n            }\n\n            this._renderer.render( this._bodies, this._meta );\n            this.emit('render', {\n                bodies: this._bodies,\n                meta: this._meta,\n                renderer: this._renderer\n            });\n            return this;\n        },\n\n        /** chainable\n         * Physics.world#pause() -> this\n         *\n         * Pause the world (step calls do nothing).\n         **/\n        pause: function(){\n\n            this._paused = true;\n            this.emit('pause');\n            return this;\n        },\n\n        /** chainable\n         * Physics.world#unpause() -> this\n         *\n         * Unpause the world (step calls continue as usual).\n         **/\n        unpause: function(){\n\n            this._paused = false;\n            this.emit('unpause');\n            return this;\n        },\n\n        /**\n         * Physics.world#isPaused() -> Boolean\n         * + (Boolean): Returns `true` if world is paused, `false` otherwise.\n         *\n         * Determine if world is paused.\n         **/\n        isPaused: function(){\n\n            return !!this._paused;\n        },\n\n        /**\n         * Physics.world#destroy()\n         *\n         * Destroy the world.\n         * (Bwahahahahaha!)\n         **/\n        destroy: function(){\n\n            var self = this;\n            self.pause();\n\n            // notify before\n            this.emit('destroy');\n\n            // remove all listeners\n            self.off( true );\n            // remove everything\n            self.remove( self.getBodies() );\n            self.remove( self.getBehaviors() );\n            self.integrator( null );\n            self.renderer( null );\n        }\n\n    });\n\n    Physics.world = World;\n\n}());\n\n\n// ---\n// inside: src/integrators/verlet.js\n\nPhysics.integrator('verlet', function( parent ){\n\n    // for this integrator we need to know if the object has been integrated before\n    // so let's add a mixin to bodies\n\n    Physics.body.mixin({\n\n        started: function( val ){\n            if ( val !== undefined ){\n                this._started = true;\n            }\n\n            return !!this._started;\n        }\n    });\n\n\n    return {\n        /**\n         * class Verlet < Integrator\n         *\n         * `Physics.integrator('verlet')`.\n         *\n         * The verlet integrator.\n         **/\n\n        // extended\n        init: function( options ){\n\n            // call parent init\n            parent.init.call(this, options);\n        },\n\n        // extended\n        integrateVelocities: function( bodies, dt ){\n\n            // half the timestep\n            var dtdt = dt * dt\n                ,drag = 1 - this.options.drag\n                ,body = null\n                ,state\n                ,prevDt = this.prevDt || dt\n                ,dtMul = (dtdt + dt * prevDt) * 0.5\n                ;\n\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                body = bodies[ i ];\n                state = body.state;\n\n                // only integrate if the body isn't static\n                if ( body.treatment !== 'static' && !body.sleep( dt ) ){\n\n                    // Inspired from https://github.com/soulwire/Coffee-Physics\n                    // @licence MIT\n                    //\n                    // v = x - ox\n                    // x = x + (v + a * dt * dt)\n\n                    // use the velocity in vel if the velocity has been changed manually\n                    if (state.vel.equals( state.old.vel ) && body.started()){\n\n                        // Get velocity by subtracting old position from curr position\n                        state.vel.clone( state.pos ).vsub( state.old.pos );\n\n                    } else {\n\n                        state.old.pos.clone( state.pos ).vsub( state.vel );\n                        // so we need to scale the value by dt so it\n                        // complies with other integration methods\n                        state.vel.mult( dt );\n                    }\n\n                    // Apply \"air resistance\".\n                    if ( drag ){\n\n                        state.vel.mult( drag );\n                    }\n\n                    // Apply acceleration\n                    // v += a * dt * dt\n                    state.vel.vadd( state.acc.mult( dtMul ) );\n\n                    // restore velocity\n                    state.vel.mult( 1/dt );\n\n                    // store calculated velocity\n                    state.old.vel.clone( state.vel );\n\n                    // Reset accel\n                    state.acc.zero();\n\n                    //\n                    // Angular components\n                    //\n\n                    if (state.angular.vel === state.old.angular.vel && body.started()){\n\n                        state.angular.vel = (state.angular.pos - state.old.angular.pos);\n\n                    } else {\n\n                        state.old.angular.pos = state.angular.pos - state.angular.vel;\n                        state.angular.vel *= dt;\n                    }\n\n                    state.angular.vel += state.angular.acc * dtMul;\n                    state.angular.vel /= dt;\n                    state.old.angular.vel = state.angular.vel;\n                    state.angular.acc = 0;\n\n                    body.started( true );\n\n                } else {\n                    // set the velocity and acceleration to zero!\n                    state.vel.zero();\n                    state.acc.zero();\n                    state.angular.vel = 0;\n                    state.angular.acc = 0;\n                }\n            }\n        },\n\n        // extended\n        integratePositions: function( bodies, dt ){\n\n            // half the timestep\n            var dtdt = dt * dt\n                ,body = null\n                ,state\n                ,prevDt = this.prevDt || dt\n                ,dtcorr = dt/prevDt\n                ;\n\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                body = bodies[ i ];\n                state = body.state;\n\n                // only integrate if the body isn't static\n                if ( body.treatment !== 'static' && !body.sleep() ){\n\n                    // so we need to scale the value by dt so it\n                    // complies with other integration methods\n                    state.vel.mult( dt * dtcorr );\n\n                    // Store old position.\n                    // xold = x\n                    state.old.pos.clone( state.pos );\n\n                    state.pos.vadd( state.vel );\n\n                    // restore velocity\n                    state.vel.mult( 1 / (dt * dtcorr) );\n\n                    // store calculated velocity\n                    state.old.vel.clone( state.vel );\n\n                    //\n                    // Angular components\n                    //\n\n\n                    state.angular.vel *= dt * dtcorr;\n\n                    state.old.angular.pos = state.angular.pos;\n\n                    state.angular.pos += state.angular.vel;\n                    state.angular.vel /= dt * dtcorr;\n                    state.old.angular.vel = state.angular.vel;\n                }\n            }\n\n            this.prevDt = dt;\n        }\n    };\n});\n\n\n// ---\n// inside: src/geometries/point.js\n\n/** alias of: Geometry\n * class PointGeometry < Geometry\n *\n * Physics.geometry('point')\n *\n * The point geometry represents a point.\n **/\nPhysics.geometry('point', function( parent ){});\n\n\n// ---\n// inside: src/bodies/point.js\n\n/** alias of: Body\n * class PointBody < Body\n *\n * Physics.body('point')\n *\n * The point body represents a point.\n **/\nPhysics.body('point', function( parent ){\n    return {\n        init: function( opts ){\n            parent.init.call( this, opts );\n            this.moi = 0;\n        }\n    };\n});\n\n\n// ---\n// inside: src/geometries/circle.js\n\n/** \n * class CircleGeometry < Geometry\n *\n * Physics.geometry('circle')\n *\n * The circle geometry has a circular shape.\n *\n * Additional options include:\n * - radius: the radius\n *\n * Example:\n *\n * ```javascript\n * var round = Physics.body('circle', {\n *     x: 30,\n *     y: 20,\n *     radius: 5\n * });\n * ```\n **/\nPhysics.geometry('circle', function( parent ){\n\n    var defaults = {\n\n        radius: 1.0\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            var self = this;\n            // call parent init method\n            parent.init.call(this, options);\n\n            this.options.defaults( defaults );\n            this.options.onChange(function( opts ){\n                this.radius = opts.radius;\n            });\n            this.options( options );\n\n            this._aabb = Physics.aabb();\n            this.radius = this.options.radius;\n        },\n                \n        // extended\n        aabb: function( angle ){\n\n            var r = this.radius\n                ;\n\n            // circles are symetric... so angle has no effect\n            if ( this._aabb.hw !== r ){\n                // recalculate\n                this._aabb = Physics.aabb( -r, -r, r, r );\n            }\n\n            return Physics.aabb.clone( this._aabb );\n        },\n\n        // extended\n        getFarthestHullPoint: function( dir, result ){\n\n            result = result || new Physics.vector();\n\n            return result.clone( dir ).normalize().mult( this.radius );\n        },\n\n        // extended\n        getFarthestCorePoint: function( dir, result, margin ){\n\n            result = result || new Physics.vector();\n\n            // we can use the center of the circle as the core object\n            // because we can project a point to the hull in any direction\n            // ... yay circles!\n            // but since the caller is expecting a certain margin... give it\n            // to them\n            return result.clone( dir ).normalize().mult( this.radius - margin );\n        }\n    };\n});\n\n\n// ---\n// inside: src/geometries/compound.js\n\n/**\n * class CompoundGeometry < Geometry\n *\n * Physics.geometry('compound')\n *\n * Geometry for compound shapes.\n *\n * Example:\n *\n * ```javascript\n * var thing = Physics.geometry('compound');\n * thing.addChild( child, pos, rotation );\n * ```\n **/\nPhysics.geometry('compound', function( parent ){\n\n    var defaults = {\n\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            var self = this;\n\n            // call parent init method\n            parent.init.call(this, options);\n\n            this.options.defaults( defaults );\n            this.options( options );\n\n            this.children = [];\n        },\n\n        /**\n         * CompoundGeometry#addChild( geometry, pos ) -> this\n         * - geometry (Geometry): The child to add.\n         * - pos (Physics.vector): The position to add the child at.\n         * - angle (Number): The rotation angle\n         *\n         * Add a child at relative position.\n         **/\n        addChild: function( geometry, pos, angle ){\n\n            this._aabb = null;\n            this.children.push({\n                g: geometry\n                ,pos: new Physics.vector( pos )\n                ,angle: angle\n            });\n\n            return this;\n        },\n\n        /**\n         * CompoundGeometry#clear() -> this\n         *\n         * Remove all children.\n         **/\n        clear: function(){\n\n            this._aabb = null;\n            this.children = [];\n\n            return this;\n        },\n\n        // extended\n        aabb: function( angle ){\n\n            if (!angle && this._aabb){\n                return Physics.aabb.clone( this._aabb );\n            }\n\n            var b\n                ,aabb\n                ,ch\n                ,ret\n                ,scratch = Physics.scratchpad()\n                ,pos = Physics.vector()\n                ;\n\n            angle = angle || 0;\n\n            for ( var i = 0, l = this.children.length; i < l; i++ ) {\n                ch = this.children[ i ];\n                // the aabb rotated by overall angle and the child rotation\n                aabb = ch.g.aabb( angle + ch.angle );\n                pos.clone( ch.pos );\n                if ( angle ){\n                    // get the child's position rotated if needed\n                    pos.rotate( angle );\n                }\n                // move the aabb to the child's position\n                aabb.x += pos._[0];\n                aabb.y += pos._[1];\n                ret = ret ? Physics.aabb.union(ret, aabb, true) : aabb;\n            }\n\n            if ( !angle ){\n                // if we don't have an angle specified (or it's zero)\n                // then we can cache this result\n                this._aabb = Physics.aabb.clone( ret );\n            }\n\n            return scratch.done( ret );\n        },\n\n        // extended\n        // NOTE: unlike other geometries this can't be used in the\n        // GJK algorithm because the shape isn't garanteed to be convex\n        getFarthestHullPoint: function( dir, result ){\n\n            var ch\n                ,i\n                ,l = this.children.length\n                ,scratch = Physics.scratchpad()\n                ,v = scratch.vector()\n                ,len = 0\n                ,maxlen = 0\n                ;\n\n            result = result || new Physics.vector();\n\n            // find the one with the largest projection along dir\n            for ( i = 0; i < l; i++ ) {\n                ch = this.children[ i ];\n                ch.g.getFarthestHullPoint( dir.rotate(-ch.angle), v );\n                len = v.rotate(ch.angle).vadd( ch.pos ).proj( dir.rotate(ch.angle) );\n\n                if ( len > maxlen ){\n                    maxlen = len;\n                    result.swap( v );\n                }\n            }\n\n            return scratch.done( result );\n        },\n\n        // extended\n        // NOTE: unlike other geometries this can't be used in the\n        // GJK algorithm because the shape isn't garanteed to be convex\n        getFarthestCorePoint: function( dir, result, margin ){\n\n            var ch\n                ,i\n                ,l = this.children.length\n                ,scratch = Physics.scratchpad()\n                ,v = scratch.vector()\n                ,len = 0\n                ,maxlen = 0\n                ;\n\n            result = result || new Physics.vector();\n\n            // find the one with the largest projection along dir\n            for ( i = 0; i < l; i++ ) {\n                ch = this.children[ i ];\n                ch.g.getFarthestCorePoint(dir.rotate(-ch.angle), v, margin );\n                len = v.rotate(ch.angle).vadd( ch.pos ).proj( dir.rotate(ch.angle) );\n\n                if ( len > maxlen ){\n                    maxlen = len;\n                    result.swap( v );\n                }\n            }\n\n            return scratch.done( result );\n        }\n    };\n});\n\n\n// ---\n// inside: src/geometries/convex-polygon.js\n\n/**\n * class ConvexPolygonGeometry < Geometry\n *\n * Physics.geometry('convex-polygon')\n *\n * Geometry for convex polygons.\n *\n * Additional config options:\n *\n * - vertices: Array of [[Vectorish]] objects representing the polygon vertices in clockwise (or counterclockwise) order.\n *\n * Example:\n *\n * ```javascript\n * var pentagon = Physics.geometry('convex-polygon', {\n *     // the centroid is automatically calculated and used to position the shape\n *     vertices: [\n *         { x: 0, y: -30 },\n *         { x: -29, y: -9 },\n *         { x: -18, y: 24 },\n *         { x: 18, y: 24 },\n *         { x: 29, y: -9 }\n *     ]\n * });\n * ```\n **/\nPhysics.geometry('convex-polygon', function( parent ){\n\n    var ERROR_NOT_CONVEX = 'Error: The vertices specified do not match that of a _convex_ polygon.';\n\n    var defaults = {\n\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            var self = this;\n\n            // call parent init method\n            parent.init.call(this, options);\n\n            this.options.defaults( defaults );\n            this.options.onChange(function( opts ){\n                self.setVertices( opts.vertices || [] );\n            });\n            this.options( options );\n\n            self.setVertices( this.options.vertices || [] );\n\n        },\n\n        /**\n         * ConvexPolygonGeometry#setVertices( hull ) -> this\n         * - hull (Array): Vertices represented by an array of [[Vectorish]] objects, in either clockwise or counterclockwise order\n         *\n         * Set the vertices of this polygon.\n         **/\n        setVertices: function( hull ){\n\n            var scratch = Physics.scratchpad()\n                ,transl = scratch.transform()\n                ,verts = this.vertices = []\n                ;\n\n            if ( !Physics.geometry.isPolygonConvex( hull ) ){\n                throw ERROR_NOT_CONVEX;\n            }\n\n            transl.setRotation( 0 );\n            transl.setTranslation( Physics.geometry.getPolygonCentroid( hull ).negate() );\n\n            // translate each vertex so that the centroid is at the origin\n            // then add the vertex as a vector to this.vertices\n            for ( var i = 0, l = hull.length; i < l; ++i ){\n\n                verts.push( new Physics.vector( hull[ i ] ).translate( transl ) );\n            }\n\n            this._area = Physics.geometry.getPolygonArea( verts );\n            this._aabb = false;\n            return scratch.done(this);\n        },\n\n        // extended\n        aabb: function( angle ){\n\n            if (!angle && this._aabb){\n                return Physics.aabb.clone( this._aabb );\n            }\n\n            var scratch = Physics.scratchpad()\n                ,p = scratch.vector()\n                ,trans = scratch.transform().setRotation( angle || 0 )\n                ,xaxis = scratch.vector().set( 1, 0 ).rotateInv( trans )\n                ,yaxis = scratch.vector().set( 0, 1 ).rotateInv( trans )\n                ,xmax = this.getFarthestHullPoint( xaxis, p ).proj( xaxis )\n                ,xmin = - this.getFarthestHullPoint( xaxis.negate(), p ).proj( xaxis )\n                ,ymax = this.getFarthestHullPoint( yaxis, p ).proj( yaxis )\n                ,ymin = - this.getFarthestHullPoint( yaxis.negate(), p ).proj( yaxis )\n                ,aabb\n                ;\n\n            aabb = Physics.aabb( xmin, ymin, xmax, ymax );\n\n            if (!angle){\n                // if we don't have an angle specified (or it's zero)\n                // then we can cache this result\n                this._aabb = Physics.aabb.clone( aabb );\n            }\n\n            scratch.done();\n            return aabb;\n        },\n\n        // extended\n        getFarthestHullPoint: function( dir, result, data ){\n\n            var verts = this.vertices\n                ,val\n                ,prev\n                ,l = verts.length\n                ,i = 2\n                ,idx\n                ;\n\n            result = result || new Physics.vector();\n\n            if ( l < 2 ){\n                if ( data ){\n                    data.idx = 0;\n                }\n                return result.clone( verts[0] );\n            }\n\n            prev = verts[ 0 ].dot( dir );\n            val = verts[ 1 ].dot( dir );\n\n            if ( l === 2 ){\n                idx = (val >= prev) ? 1 : 0;\n                if ( data ){\n                    data.idx = idx;\n                }\n                return result.clone( verts[ idx ] );\n            }\n\n            if ( val >= prev ){\n                // go up\n                // search until the next dot product\n                // is less than the previous\n                while ( i < l && val >= prev ){\n                    prev = val;\n                    val = verts[ i ].dot( dir );\n                    i++;\n                }\n\n                if (val >= prev){\n                    i++;\n                }\n\n                // return the previous (furthest with largest dot product)\n                idx = i - 2;\n                if ( data ){\n                    data.idx = i - 2;\n                }\n                return result.clone( verts[ idx ] );\n\n            } else {\n                // go down\n\n                i = l;\n                while ( i > 1 && prev >= val ){\n                    i--;\n                    val = prev;\n                    prev = verts[ i ].dot( dir );\n                }\n\n                // return the previous (furthest with largest dot product)\n                idx = (i + 1) % l;\n                if ( data ){\n                    data.idx = idx;\n                }\n                return result.clone( verts[ idx ] );\n            }\n        },\n\n        // extended\n        getFarthestCorePoint: function( dir, result, margin ){\n\n            var norm\n                ,scratch = Physics.scratchpad()\n                ,next = scratch.vector()\n                ,prev = scratch.vector()\n                ,verts = this.vertices\n                ,l = verts.length\n                ,mag\n                ,sign = this._area > 0\n                ,data = {}\n                ;\n\n            result = this.getFarthestHullPoint( dir, result, data );\n\n            // get normalized directions to next and previous vertices\n            next.clone( verts[ (data.idx + 1) % l ] ).vsub( result ).normalize().perp( sign );\n            prev.clone( verts[ (data.idx - 1 + l) % l ] ).vsub( result ).normalize().perp( !sign );\n\n            // get the magnitude of a vector from the result vertex\n            // that splits down the middle\n            // creating a margin of \"m\" to each edge\n            mag = margin / (1 + next.dot(prev));\n\n            result.vadd( next.vadd( prev ).mult( mag ) );\n            scratch.done();\n            return result;\n        }\n    };\n});\n\n\n// ---\n// inside: src/geometries/rectangle.js\n\n/**\n * class RectangleGeometry < Geometry\n *\n * Physics.geometry('rectangle')\n *\n * Geometry for rectangles.\n *\n * Additional config options:\n *\n * - width: The width\n * - height: The height\n *\n * Example:\n *\n * ```javascript\n * var rectGeo = Physics.geometry('rectangle', {\n *     width: 30,\n *     height: 40\n * });\n * ```\n **/\nPhysics.geometry('rectangle', function( parent ){\n\n    var defaults = {\n\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            var self = this;\n\n            // call parent init method\n            parent.init.call(this, options);\n\n            this.options.defaults( defaults );\n            this.options.onChange(function( opts ){\n                /**\n                 * RectangleGeometry#width = Number\n                 *\n                 * The width\n                 **/\n                self.width = self.options.width || 1;\n                /**\n                 * RectangleGeometry#height = Number\n                 *\n                 * The height\n                 **/\n                self.height = self.options.height || 1;\n            });\n            this.options( options );\n        },\n\n        // extended\n        aabb: function( angle ){\n\n            if (!angle){\n                return Physics.aabb( this.width, this.height );\n            }\n\n            var scratch = Physics.scratchpad()\n                ,p = scratch.vector()\n                ,trans = scratch.transform().setRotation( angle || 0 )\n                ,xaxis = scratch.vector().set( 1, 0 ).rotateInv( trans )\n                ,yaxis = scratch.vector().set( 0, 1 ).rotateInv( trans )\n                ,xmax = this.getFarthestHullPoint( xaxis, p ).proj( xaxis )\n                ,xmin = - this.getFarthestHullPoint( xaxis.negate(), p ).proj( xaxis )\n                ,ymax = this.getFarthestHullPoint( yaxis, p ).proj( yaxis )\n                ,ymin = - this.getFarthestHullPoint( yaxis.negate(), p ).proj( yaxis )\n                ;\n\n            scratch.done();\n            return Physics.aabb( xmin, ymin, xmax, ymax );\n        },\n\n        // extended\n        getFarthestHullPoint: function( dir, result ){\n\n            result = result || new Physics.vector();\n\n            var x = dir.x\n                ,y = dir.y\n                ;\n\n            x = x === 0 ? 0 : x < 0 ? -this.width * 0.5 : this.width * 0.5;\n            y = y === 0 ? 0 : y < 0 ? -this.height * 0.5 : this.height * 0.5;\n\n            return result.set( x, y );\n        },\n\n        // extended\n        getFarthestCorePoint: function( dir, result, margin ){\n\n            var x, y;\n            result = this.getFarthestHullPoint( dir, result );\n            x = result.x;\n            y = result.y;\n            result.x = x === 0 ? 0 : x < 0 ? x + margin : x - margin;\n            result.y = y === 0 ? 0 : y < 0 ? y + margin : y - margin;\n\n            return result;\n        }\n    };\n});\n\n\n// ---\n// inside: src/bodies/circle.js\n\n/*\n * @requires geometries/circle\n */\n/** \n * class CircleBody < Body\n *\n * Physics.body('circle')\n *\n * The circle body has a circular shape.\n *\n * Additional options include:\n * - radius: the radius\n *\n * Example:\n *\n * ```javascript\n * var round = Physics.body('circle', {\n *     x: 30,\n *     y: 20,\n *     radius: 5\n * });\n * ```\n **/\nPhysics.body('circle', function( parent ){\n\n    var defaults = {\n        radius: 1.0\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            // call parent init method\n            parent.init.call(this, options);\n\n            options = Physics.util.extend({}, defaults, options);\n\n            this.geometry = Physics.geometry('circle', {\n                radius: options.radius\n            });\n\n            this.recalc();\n        },\n\n        // extended\n        recalc: function(){\n            parent.recalc.call(this);\n            // moment of inertia\n            this.moi = this.mass * this.geometry.radius * this.geometry.radius / 2;\n        }\n    };\n});\n\n\n// ---\n// inside: src/bodies/compound.js\n\n/*\n * @requires geometries/compound\n */\n /**\n  * class CompoundBody < Body\n  *\n  * Physics.body('compound')\n  *\n  * Not a body in itself. It's a container to group other bodies. The position of the body is the center of mass.\n  * It must have at least one child before being added to the world.\n  *\n  * Additional config options:\n  *\n  * - children: Array of [[Body]] objects.\n  *\n  * Example:\n  *\n  * ```javascript\n  * var thing = Physics.body('compound', {\n  *     // place the center of mass at (300, 200)\n  *     x: 300,\n  *     y: 200,\n  *     // the center of mass is automatically calculated and used to position the shape\n  *     children: [\n  *         body1,\n  *         body2,\n  *         // ...\n  *     ]\n  * });\n  * ```\n  **/\nPhysics.body('compound', function( parent ){\n\n    var defaults = {\n\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            // call parent init method\n            parent.init.call(this, options);\n\n            this.mass = 0;\n            this.moi = 0;\n\n            this.children = [];\n            this.geometry = Physics.geometry('compound');\n            this.addChildren( options.children );\n        },\n\n        // extended\n        connect: function( world ){\n            // sanity check\n            if ( this.mass <= 0 ){\n                throw 'Can not add empty compound body to world.';\n            }\n        },\n\n        /**\n         * CompoundBody#addChild( body ) -> this\n         * - body (Body): The child to add\n         *\n         * Add a body as a child.\n         **/\n        addChild: function( body ){\n\n            this.addChildren([ body ]);\n            return this;\n        },\n\n        /**\n         * CompoundBody#addChildren( bodies ) -> this\n         * - bodies (Array): The list of children to add\n         *\n         * Add an array of children to the compound.\n         **/\n        addChildren: function( bodies ){\n\n            var self = this\n                ,scratch = Physics.scratchpad()\n                ,com = scratch.vector().zero()\n                ,b\n                ,pos\n                ,i\n                ,l = bodies && bodies.length\n                ,M = 0\n                ;\n\n            if ( !l ){\n                return scratch.done( this );\n            }\n\n            for ( i = 0; i < l; i++ ){\n                b = bodies[ i ];\n                // remove body from world if applicable\n                if ( b._world ){\n                    b._world.remove( b );\n                }\n                // add child\n                this.children.push( b );\n                // add child to geometry\n                this.geometry.addChild(\n                    b.geometry,\n                    new Physics.vector(b.offset)\n                        .rotate(b.state.angular.pos)\n                        .vadd(b.state.pos),\n                    b.state.angular.pos\n                );\n                // calc com contribution\n                pos = b.state.pos;\n                com.add( pos._[0] * b.mass, pos._[1] * b.mass );\n                M += b.mass;\n            }\n\n            // add mass\n            this.mass += M;\n            // com adjustment (assuming com is currently at (0,0) body coords)\n            com.mult( 1 / this.mass );\n\n            // shift the center of mass\n            this.offset.vsub( com );\n\n            // refresh view on next render\n            if ( this._world ){\n                this._world.one('render', function(){\n                    self.view = null;\n                });\n            }\n            this.recalc();\n\n            return scratch.done( this );\n        },\n\n        /**\n         * CompoundBody#clear() -> this\n         *\n         * Remove all children.\n         **/\n        clear: function(){\n\n            this._aabb = null;\n            this.moi = 0;\n            this.mass = 0;\n            this.offset.zero();\n            this.children = [];\n            this.geometry.clear();\n\n            return this;\n        },\n\n        /**\n         * CompoundBody#refreshGeometry() -> this\n         *\n         * If the children's positions change, `refreshGeometry()` should be called to fix the shape.\n         **/\n        refreshGeometry: function(){\n\n            this.geometry.clear();\n\n            for ( var i = 0, b, l = this.children.length; i < l; i++ ) {\n                b = this.children[ i ];\n                this.geometry.addChild( b.geometry, new Physics.vector(b.state.pos).vadd(b.offset), b.state.angular.pos );\n            }\n\n            return this;\n        },\n\n        // extended\n        recalc: function(){\n\n            parent.recalc.call(this);\n            // moment of inertia\n            var b\n                ,moi = 0\n                ;\n\n            for ( var i = 0, l = this.children.length; i < l; i++ ) {\n                b = this.children[ i ];\n                b.recalc();\n                // parallel axis theorem\n                moi += b.moi + b.mass * b.state.pos.normSq();\n            }\n\n            this.moi = moi;\n            return this;\n        }\n    };\n});\n\n\n// ---\n// inside: src/bodies/convex-polygon.js\n\n/*\n * @requires geometries/convex-polygon\n */\n /**\n  * class ConvexPolygonBody < Body\n  *\n  * Physics.body('convex-polygon')\n  *\n  * Body for convex polygons. The position of the body is the centroid of the polygon.\n  *\n  * Additional config options:\n  *\n  * - vertices: Array of [[Vectorish]] objects representing the polygon vertices in clockwise (or counterclockwise) order.\n  *\n  * Example:\n  *\n  * ```javascript\n  * var pentagon = Physics.body('convex-polygon', {\n  *     // place the centroid of the polygon at (300, 200)\n  *     x: 300,\n  *     y: 200,\n  *     // the centroid is automatically calculated and used to position the shape\n  *     vertices: [\n  *         { x: 0, y: -30 },\n  *         { x: -29, y: -9 },\n  *         { x: -18, y: 24 },\n  *         { x: 18, y: 24 },\n  *         { x: 29, y: -9 }\n  *     ]\n  * });\n  * ```\n  **/\nPhysics.body('convex-polygon', function( parent ){\n\n    var defaults = {\n\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            // call parent init method\n            parent.init.call(this, options);\n\n            options = Physics.util.extend({}, defaults, options);\n\n            this.geometry = Physics.geometry('convex-polygon', {\n                vertices: options.vertices\n            });\n\n            this.recalc();\n        },\n\n        // extended\n        recalc: function(){\n            parent.recalc.call(this);\n            // moment of inertia\n            this.moi = Physics.geometry.getPolygonMOI( this.geometry.vertices );\n        }\n    };\n});\n\n\n// ---\n// inside: src/bodies/rectangle.js\n\n/*\n * @requires geometries/rectangle\n */\n /**\n  * class RectangleBody < Body\n  *\n  * Physics.body('rectangle')\n  *\n  * Body for rectangles. The position of the body is the centroid of the rectangle.\n  *\n  * Additional config options:\n  *\n  * - width: The width\n  * - height: The height\n  *\n  * Example:\n  *\n  * ```javascript\n  * var rect = Physics.body('rectangle', {\n  *     // place the centroid of the rectangle at (300, 200)\n  *     x: 300,\n  *     y: 200,\n  *     width: 30,\n  *     height: 40\n  * });\n  * ```\n  **/\nPhysics.body('rectangle', function( parent ){\n\n    var defaults = {\n\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            // call parent init method\n            parent.init.call(this, options);\n\n            options = Physics.util.extend({}, defaults, options);\n\n            this.geometry = Physics.geometry('rectangle', {\n                width: options.width,\n                height: options.height\n            });\n\n            this.recalc();\n        },\n\n        // extended\n        recalc: function(){\n            var w = this.geometry.width;\n            var h = this.geometry.height;\n            parent.recalc.call(this);\n            // moment of inertia\n            this.moi = ( w*w + h*h ) * this.mass / 12;\n        }\n    };\n});\n\n\n// ---\n// inside: src/behaviors/attractor.js\n\n/** \n * class AttractorBehavior < Behavior\n *\n * `Physics.behavior('attractor')`.\n *\n * Attractor behavior attracts bodies to a specific point.\n *\n * Additional options include:\n * - pos: The position of the attraction point\n * - strength: How strong the attraction is (default: `1`)\n * - order: The power of the inverse distance (default: `2` because that is newtonian gravity... inverse square)\n * - max: The maximum distance in which to apply the attraction (default: Infinity)\n * - min: The minimum distance above which to apply the attraction (default: very small non-zero)\n **/\nPhysics.behavior('attractor', function( parent ){\n\n    var defaults = {\n\n        pos: null, // default to (0, 0)\n        // how strong the attraction is\n        strength: 1,\n        // power of the inverse distance (2 is inverse square)\n        order: 2,\n        // max distance to apply it to\n        max: false, // infinite\n        // min distance to apply it to\n        min: false // auto calc\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            var self = this;\n            this._pos = new Physics.vector();\n            // call parent init method\n            parent.init.call( this );\n            this.options.defaults( defaults );\n            this.options.onChange(function( opts ){\n                self._maxDist = opts.max === false ? Infinity : opts.max;\n                self._minDist = opts.min ? opts.min : 10;\n                self.position( opts.pos );\n            });\n            this.options( options );\n        },\n\n        /**\n         * AttractorBehavior#position( [pos] ) -> this|Object\n         * - pos (Vectorish): The position to set\n         * + (Object): Returns the [[Vectorish]] position if no arguments provided\n         * + (this): For chaining\n         *\n         * Get or set the position of the attractor.\n         **/\n        position: function( pos ){\n            \n            var self = this;\n\n            if ( pos ){\n                this._pos.clone( pos );\n                return self;\n            }\n\n            return this._pos.values();\n        },\n        \n        // extended\n        behave: function( data ){\n\n            var bodies = this.getTargets()\n                ,body\n                ,order = this.options.order\n                ,strength = this.options.strength\n                ,minDist = this._minDist\n                ,maxDist = this._maxDist\n                ,scratch = Physics.scratchpad()\n                ,acc = scratch.vector()\n                ,norm\n                ,g\n                ;\n\n            for ( var j = 0, l = bodies.length; j < l; j++ ){\n                \n                body = bodies[ j ];\n\n                // clone the position\n                acc.clone( this._pos );\n                acc.vsub( body.state.pos );\n                // get the distance\n                norm = acc.norm();\n\n                if (norm > minDist && norm < maxDist){\n\n                    g = strength / Math.pow(norm, order);\n\n                    body.accelerate( acc.normalize().mult( g ) );\n                }\n            }\n\n            scratch.done();\n        }\n    };\n});\n\n\n// ---\n// inside: src/behaviors/body-collision-detection.js\n\n/**\n * class BodyCollisionDetectionBehavior < Behavior\n *\n * `Physics.behavior('body-collision-detection')`.\n *\n * Detect collisions of bodies.\n *\n * Publishes collision events to the world as a group of detected collisions per iteration.\n *\n * The event data will have a `.collisions` property that is an array of collisions of the form:\n *\n * ```javascript\n * {\n *     bodyA: // the first body\n *     bodyB: // the second body\n *     norm: // the normal vector (Vectorish)\n *     mtv: // the minimum transit vector. (the direction and length needed to extract bodyB from bodyA)\n *     pos: // the collision point relative to bodyA\n *     overlap: // the amount bodyA overlaps bodyB\n * }\n * ```\n *\n * Additional options include:\n * - check: channel to listen to for collision candidates (default: `collisions:candidates`). set to `true` to force check every pair of bodies in the world\n * - channel: channel to publish events to (default: `collisions:detected`)\n **/\nPhysics.behavior('body-collision-detection', function( parent ){\n\n    var supportFnStack = [];\n\n    /*\n     * getSupportFn( bodyA, bodyB ) -> Function\n     * - bodyA (Object): First body\n     * - bodyB (Object): Second body\n     * + (Function): The support function\n     *\n     * Get a general support function for use with GJK algorithm\n     */\n    var getSupportFn = function getSupportFn( bodyA, bodyB ){\n\n        var hash = Physics.util.pairHash( bodyA.uid, bodyB.uid )\n            ,fn = supportFnStack[ hash ]\n            ;\n\n        if ( !fn ){\n            fn = supportFnStack[ hash ] = function pairSupportFunction( searchDir ){\n\n                var tA = fn.tA\n                    ,tB = fn.tB\n                    ,vA = fn.tmpv1\n                    ,vB = fn.tmpv2\n                    ;\n\n                if ( fn.useCore ){\n                    vA = bodyA.geometry.getFarthestCorePoint( searchDir.rotateInv( tA ), vA, fn.marginA );\n                    vB = bodyB.geometry.getFarthestCorePoint( searchDir.rotate( tA ).rotateInv( tB ).negate(), vB, fn.marginB );\n                } else {\n                    vA = bodyA.geometry.getFarthestHullPoint( searchDir.rotateInv( tA ), vA );\n                    vB = bodyB.geometry.getFarthestHullPoint( searchDir.rotate( tA ).rotateInv( tB ).negate(), vB );\n                }\n\n                vA.vadd( bodyA.offset ).transform( tA );\n                vB.vadd( bodyB.offset ).transform( tB );\n                searchDir.negate().rotate( tB );\n\n                return {\n                    a: vA.values(),\n                    b: vB.values(),\n                    pt: vA.vsub( vB ).values()\n                };\n            };\n\n            // transforms for coordinate transformations\n            fn.tA = new Physics.transform();\n            fn.tB = new Physics.transform();\n\n            // temp vectors (used too frequently to justify scratchpad)\n            fn.tmpv1 = new Physics.vector();\n            fn.tmpv2 = new Physics.vector();\n        }\n\n        fn.useCore = false;\n        fn.margin = 0;\n        fn.tA.setRotation( bodyA.state.angular.pos ).setTranslation( bodyA.state.pos );\n        fn.tB.setRotation( bodyB.state.angular.pos ).setTranslation( bodyB.state.pos );\n        fn.bodyA = bodyA;\n        fn.bodyB = bodyB;\n\n        return fn;\n    };\n\n    /*\n     * checkGJK( bodyA, bodyB ) -> Object\n     * - bodyA (Object): First body\n     * - bodyB (Object): Second body\n     * + (Object): Collision result\n     *\n     * Use GJK algorithm to check arbitrary bodies for collisions\n     */\n    var checkGJK = function checkGJK( bodyA, bodyB ){\n\n        var scratch = Physics.scratchpad()\n            ,d = scratch.vector()\n            ,tmp = scratch.vector()\n            ,os = scratch.vector()\n            ,overlap\n            ,result\n            ,support\n            ,inc\n            ,collision = false\n            ,aabbA = bodyA.aabb()\n            ,dimA = Math.min( aabbA.hw, aabbA.hh )\n            ,aabbB = bodyB.aabb()\n            ,dimB = Math.min( aabbB.hw, aabbB.hh )\n            ;\n\n        // just check the overlap first\n        support = getSupportFn( bodyA, bodyB );\n        d.clone( bodyA.state.pos )\n            .vadd( bodyA.getGlobalOffset( os ) )\n            .vsub( bodyB.state.pos )\n            .vsub( bodyB.getGlobalOffset( os ) )\n            ;\n        result = Physics.gjk(support, d, true);\n\n        if ( result.overlap ){\n\n            // there is a collision. let's do more work.\n            collision = {\n                bodyA: bodyA,\n                bodyB: bodyB\n            };\n\n            // inc by 1% of the smallest dim.\n            inc = 1e-2 * Math.min(dimA || 1, dimB || 1);\n\n            // first get the min distance of between core objects\n            support.useCore = true;\n            support.marginA = 0;\n            support.marginB = 0;\n\n            // while there's still an overlap (or we don't have a positive distance)\n            // and the support margins aren't bigger than the shapes...\n            // search for the distance data\n            while ( (result.overlap || result.distance === 0) && (support.marginA < dimA || support.marginB < dimB) ){\n                if ( support.marginA < dimA ){\n                    support.marginA += inc;\n                }\n                if ( support.marginB < dimB ){\n                    support.marginB += inc;\n                }\n\n                result = Physics.gjk(support, d);\n            }\n\n            if ( result.overlap || result.maxIterationsReached ){\n                // This implementation can't deal with a core overlap yet\n                return scratch.done(false);\n            }\n\n            // calc overlap\n            overlap = (support.marginA + support.marginB) - result.distance;\n\n            if ( overlap <= 0 ){\n                return scratch.done(false);\n            }\n\n            collision.overlap = overlap;\n            // @TODO: for now, just let the normal be the mtv\n            collision.norm = d.clone( result.closest.b ).vsub( tmp.clone( result.closest.a ) ).normalize().values();\n            collision.mtv = d.mult( overlap ).values();\n            // get a corresponding hull point for one of the core points.. relative to body A\n            collision.pos = d.clone( collision.norm ).mult( support.marginA ).vadd( tmp.clone( result.closest.a ) ).vsub( bodyA.state.pos ).values();\n        }\n\n        return scratch.done( collision );\n    };\n\n    /*\n     * checkCircles( bodyA, bodyB ) -> Object\n     * - bodyA (Object): First body\n     * - bodyB (Object): Second body\n     * + (Object): Collision result\n     *\n     * Check two circles for collisions.\n     */\n    var checkCircles = function checkCircles( bodyA, bodyB ){\n\n        var scratch = Physics.scratchpad()\n            ,d = scratch.vector()\n            ,tmp = scratch.vector()\n            ,overlap\n            ,collision = false\n            ;\n\n        d.clone( bodyB.state.pos )\n            .vadd( bodyB.getGlobalOffset( tmp ) )\n            .vsub( bodyA.state.pos )\n            .vsub( bodyA.getGlobalOffset( tmp ) ) // save offset for later\n            ;\n        overlap = d.norm() - (bodyA.geometry.radius + bodyB.geometry.radius);\n\n        // hmm... they overlap exactly... choose a direction\n        if ( d.equals( Physics.vector.zero ) ){\n\n            d.set( 1, 0 );\n        }\n\n        if ( overlap <= 0 ){\n\n            collision = {\n                bodyA: bodyA,\n                bodyB: bodyB,\n                norm: d.normalize().values(),\n                mtv: d.mult( -overlap ).values(),\n                pos: d.mult( -bodyA.geometry.radius/overlap ).vadd( tmp ).values(),\n                overlap: -overlap\n            };\n        }\n\n        return scratch.done( collision );\n    };\n\n    /*\n     * checkPair( bodyA, bodyB[, disp] ) -> Object\n     * - bodyA (Object): First body\n     * - bodyB (Object): Second body\n     * + (Object): Collision result\n     *\n     * Check a pair for collisions\n     */\n    var checkPair = function checkPair( bodyA, bodyB ){\n\n        // filter out bodies that don't collide with each other\n        if (\n            ( bodyA.treatment === 'static' || bodyA.treatment === 'kinematic' ) &&\n            ( bodyB.treatment === 'static' || bodyB.treatment === 'kinematic' )\n        ){\n            return false;\n        }\n\n        if ( bodyA.geometry.name === 'circle' && bodyB.geometry.name === 'circle' ){\n\n            return checkCircles( bodyA, bodyB );\n\n        } else if ( bodyA.geometry.name === 'compound' || bodyB.geometry.name === 'compound' ){\n            // compound bodies are special. We can't use gjk because\n            // they could have concavities. so we do the pieces individually\n            var test = (bodyA.geometry.name === 'compound')\n                ,compound = test ? bodyA : bodyB\n                ,other = test ? bodyB : bodyA\n                ,cols\n                ,ch\n                ,ret = []\n                ,scratch = Physics.scratchpad()\n                ,vec = scratch.vector()\n                ,oldPos = scratch.vector()\n                ,otherAABB = other.aabb()\n                ,i\n                ,l\n                ;\n\n            for ( i = 0, l = compound.children.length; i < l; i++ ){\n\n                ch = compound.children[ i ];\n                // move body to fake position\n                oldPos.clone( ch.state.pos );\n                ch.offset.vadd( oldPos.vadd( compound.offset ).rotate( -ch.state.angular.pos ) );\n                ch.state.pos.clone( compound.state.pos );\n                ch.state.angular.pos += compound.state.angular.pos;\n\n                // check it if the aabbs overlap\n                if ( Physics.aabb.overlap(otherAABB, ch.aabb()) ){\n\n                    cols = checkPair( other, ch );\n\n                    if ( cols instanceof Array ){\n                        for ( var j = 0, c, ll = cols.length; j < ll; j++ ){\n                            c = cols[j];\n                            // set body to be the compound body\n                            if ( c.bodyA === ch ){\n                                c.bodyA = compound;\n                            } else {\n                                c.bodyB = compound;\n                            }\n                            ret.push( c );\n                        }\n\n                    } else if ( cols ) {\n                        // set body to be the compound body\n                        if ( cols.bodyA === ch ){\n                            cols.bodyA = compound;\n                        } else {\n                            cols.bodyB = compound;\n                        }\n                        ret.push( cols );\n                    }\n                }\n\n                // transform it back\n                ch.state.angular.pos -= compound.state.angular.pos;\n                ch.offset.vsub( oldPos );\n                ch.state.pos.clone( oldPos.rotate( ch.state.angular.pos ).vsub( compound.offset ) );\n            }\n\n            return scratch.done( ret );\n\n        } else {\n\n            return checkGJK( bodyA, bodyB );\n        }\n    };\n\n    var defaults = {\n\n        // channel to listen to for collision candidates\n        // set to \"true\" to force check every pair of bodies in the world\n        check: 'collisions:candidates',\n\n        // channel to publish events to\n        channel: 'collisions:detected'\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            parent.init.call( this );\n            this.options.defaults( defaults );\n            this.options( options );\n        },\n\n        // extended\n        connect: function( world ){\n\n            if ( this.options.check === true ){\n\n                world.on( 'integrate:velocities', this.checkAll, this );\n\n            } else {\n\n                world.on( this.options.check, this.check, this );\n            }\n        },\n\n        // extended\n        disconnect: function( world ){\n\n            if ( this.options.check === true ){\n\n                world.off( 'integrate:velocities', this.checkAll, this );\n\n            } else {\n\n                world.off( this.options.check, this.check, this );\n            }\n        },\n\n        /** internal\n         * BodyCollisionDetectionBehavior#check( data )\n         * - data (Object): The event data\n         *\n         * Event callback to check pairs of objects that have been flagged by broad phase for possible collisions.\n         **/\n        check: function( data ){\n\n            var candidates = data.candidates\n                ,pair\n                ,targets = this.getTargets()\n                ,collisions = []\n                ,ret\n                ,prevContacts = this.prevContacts || {}\n                ,contactList = {}\n                ,pairHash = Physics.util.pairHash\n                ,hash\n                ;\n\n            for ( var i = 0, l = candidates.length; i < l; ++i ){\n\n                pair = candidates[ i ];\n\n                if ( targets === this._world._bodies ||\n                    // only check if the members are targeted by this behavior\n                    (Physics.util.indexOf( targets, pair.bodyA ) > -1) &&\n                    (Physics.util.indexOf( targets, pair.bodyB ) > -1)\n                ){\n                    ret = checkPair( pair.bodyA, pair.bodyB );\n\n                    if ( ret instanceof Array ){\n\n                        for ( var j = 0, r, ll = ret.length; j < ll; j++ ){\n                            r = ret[j];\n                            if ( r ){\n                                hash = pairHash( pair.bodyA.uid, pair.bodyB.uid );\n                                contactList[ hash ] = true;\n                                r.collidedPreviously = prevContacts[ hash ];\n                                collisions.push( r );\n                            }\n                        }\n\n                    } else if ( ret ){\n                        hash = pairHash( pair.bodyA.uid, pair.bodyB.uid );\n                        contactList[ hash ] = true;\n                        ret.collidedPreviously = prevContacts[ hash ];\n\n                        collisions.push( ret );\n                    }\n                }\n            }\n\n            this.prevContacts = contactList;\n\n            if ( collisions.length ){\n\n                this._world.emit( this.options.channel, {\n                    collisions: collisions\n                });\n            }\n        },\n\n        /** internal\n         * BodyCollisionDetectionBehavior#checkAll( data )\n         * - data (Object): The event data\n         *\n         * Event callback to check all pairs of objects in the list for collisions\n         **/\n        checkAll: function( data ){\n\n            var bodies = this.getTargets()\n                ,dt = data.dt\n                ,bodyA\n                ,bodyB\n                ,collisions = []\n                ,ret\n                ,prevContacts = this.prevContacts || {}\n                ,contactList = {}\n                ,pairHash = Physics.util.pairHash\n                ,hash\n                ;\n\n            for ( var j = 0, l = bodies.length; j < l; j++ ){\n\n                bodyA = bodies[ j ];\n\n                for ( var i = j + 1; i < l; i++ ){\n\n                    bodyB = bodies[ i ];\n\n                    ret = checkPair( bodyA, bodyB );\n\n                    if ( ret instanceof Array ){\n\n                        for ( var k = 0, r, ll = ret.length; k < ll; k++ ){\n                            r = ret[k];\n                            if ( r ){\n                                hash = pairHash( bodyA.uid, bodyB.uid );\n                                contactList[ hash ] = true;\n                                r.collidedPreviously = prevContacts[ hash ];\n                                collisions.push( r );\n                            }\n                        }\n\n                    } else if ( ret ){\n                        hash = pairHash( bodyA.uid, bodyB.uid );\n                        contactList[ hash ] = true;\n                        ret.collidedPreviously = prevContacts[ hash ];\n\n                        collisions.push( ret );\n                    }\n                }\n            }\n\n            this.prevContacts = contactList;\n\n            if ( collisions.length ){\n\n                this._world.emit( this.options.channel, {\n                    collisions: collisions\n                });\n            }\n        }\n    };\n\n});\n\n\n// ---\n// inside: src/behaviors/body-impulse-response.js\n\n/**\n * class BodyImpulseResponseBehavior < Behavior\n *\n * `Physics.behavior('body-impulse-response')`.\n *\n * Responds to collisions by applying impulses.\n *\n * Additional options include:\n * - check: channel to listen to for collisions (default: `collisions:detected`).\n * - mtvThreshold: apply partial extraction of bodies if the minimum transit vector is less than this value ( default: `1`)\n *   this will depend on your simulation characteristic length scale\n * - bodyExtractDropoff: every body overlap correction (underneith mtvThreshold) will only extract by this fraction (0..1). Helps with stablizing contacts. (default: `0.5`)\n * - forceWakeupAboveOverlapThreshold: force bodies to wake up if the overlap is above mtvThreshold ( default: `true` )\n **/\nPhysics.behavior('body-impulse-response', function( parent ){\n\n    var defaults = {\n        // channel to listen to for collisions\n        check: 'collisions:detected'\n        // apply partial extraction of bodies if the minimum transit vector is less than this value\n        // this will depend on your simulation characteristic length scale\n        ,mtvThreshold: 1\n        // every body overlap correction (underneith mtvThreshold) will only extract by this fraction (0..1)\n        // helps with stablizing contacts.\n        ,bodyExtractDropoff: 0.5\n        // force bodies to wake up if the overlap is above mtvThreshold\n        ,forceWakeupAboveOverlapThreshold: true\n    };\n\n    function getUid( b ){\n        return b.uid;\n    }\n\n    function clampMTV( totalV, mtv, into ){\n\n        var m, n;\n        n = mtv.norm();\n        m = n - totalV.proj( mtv );\n        m = Math.max( 0, Math.min( n, m ) );\n\n        if ( n === 0 ){\n            into.zero();\n        } else {\n            into.clone( mtv ).mult( m/n );\n        }\n\n        return into;\n    }\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            parent.init.call( this );\n            this.options.defaults( defaults );\n            this.options( options );\n\n            this._bodyList = [];\n        },\n\n        // no applyTo method\n        applyTo: false,\n\n        // extended\n        connect: function( world ){\n\n            world.on( this.options.check, this.respond, this );\n        },\n\n        // extended\n        disconnect: function( world ){\n\n            world.off( this.options.check, this.respond, this );\n        },\n\n        /** internal\n         * BodyImpulseResponseBehavior#collideBodes( bodyA, bodyB, normal, point, mtrans, contact )\n         * - bodyA (Object): First Body\n         * - bodyB (Object): Second body\n         * - normal (Vector): Normal vector of the collision surface\n         * - point (Vector): Contact point of the collision\n         * - mtrans (Vector): Minimum transit vector that is the smallest displacement to separate the bodies\n         * - contact (Boolean): Are the bodies in resting contact relative to each other\n         *\n         * Collide two bodies by modifying their positions and velocities to conserve momentum\n         **/\n        collideBodies: function(bodyA, bodyB, normal, point, mtrans, contact){\n\n            var fixedA = bodyA.treatment === 'static' || bodyA.treatment === 'kinematic'\n                ,fixedB = bodyB.treatment === 'static' || bodyB.treatment === 'kinematic'\n                ,scratch = Physics.scratchpad()\n                // minimum transit vector for each body\n                ,mtv = scratch.vector().clone( mtrans )\n                ;\n\n            // do nothing if both are fixed\n            if ( fixedA && fixedB ){\n                scratch.done();\n                return;\n            }\n\n            // inverse masses and moments of inertia.\n            // give fixed bodies infinite mass and moi\n            var invMoiA = fixedA ? 0 : 1 / bodyA.moi\n                ,invMoiB = fixedB ? 0 : 1 / bodyB.moi\n                ,invMassA = fixedA ? 0 : 1 / bodyA.mass\n                ,invMassB = fixedB ? 0 : 1 / bodyB.mass\n                // coefficient of restitution between bodies\n                ,cor = bodyA.restitution * bodyB.restitution\n                // coefficient of friction between bodies\n                ,cof = bodyA.cof * bodyB.cof\n                // normal vector\n                ,n = scratch.vector().clone( normal )\n                // vector perpendicular to n\n                ,perp = scratch.vector().clone( n ).perp()\n                ,tmp = scratch.vector()\n                // collision point from A's center\n                ,rA = scratch.vector().clone( point )\n                // collision point from B's center\n                ,rB = scratch.vector().clone( point )\n                    .vadd( bodyA.state.pos )\n                    .vsub( bodyB.state.pos )\n                ,angVelA = bodyA.state.angular.vel\n                ,angVelB = bodyB.state.angular.vel\n                // relative velocity towards B at collision point\n                ,vAB = scratch.vector().clone( bodyB.state.vel )\n                        .vadd( tmp.clone(rB).perp().mult( angVelB ) )\n                        .vsub( bodyA.state.vel )\n                        .vsub( tmp.clone(rA).perp().mult( angVelA ) )\n                // break up components along normal and perp-normal directions\n                ,rAproj = rA.proj( n )\n                ,rAreg = rA.proj( perp )\n                ,rBproj = rB.proj( n )\n                ,rBreg = rB.proj( perp )\n                ,vproj = vAB.proj( n ) // projection of vAB along n\n                ,vreg = vAB.proj( perp ) // rejection of vAB along n (perp of proj)\n                ,impulse\n                ,sign\n                ,max\n                ,ratio\n                ,inContact = contact\n                ;\n\n            if ( contact ){\n\n                if ( fixedA ){\n\n                    clampMTV( bodyB._mtvTotal, mtv, tmp );\n                    bodyB._mtvTotal.vadd( tmp );\n\n                } else if ( fixedB ){\n\n                    clampMTV( bodyA._mtvTotal, mtv.negate(), tmp );\n                    bodyA._mtvTotal.vadd( tmp );\n                    mtv.negate();\n\n                } else {\n\n                    ratio = 0.5; //bodyA.mass / ( bodyA.mass + bodyB.mass );\n                    mtv.mult( ratio );\n                    clampMTV( bodyB._mtvTotal, mtv, tmp );\n                    bodyB._mtvTotal.vadd( tmp );\n\n                    mtv.clone( mtrans ).mult( ratio - 1 );\n                    clampMTV( bodyA._mtvTotal, mtv, tmp );\n                    bodyA._mtvTotal.vadd( tmp );\n\n                }\n            }\n\n            // if moving away from each other... don't bother.\n            if (vproj >= 0){\n                scratch.done();\n                return;\n            }\n\n            invMoiA = invMoiA === Infinity ? 0 : invMoiA;\n            invMoiB = invMoiB === Infinity ? 0 : invMoiB;\n\n            impulse =  - ((1 + cor) * vproj) / ( invMassA + invMassB + (invMoiA * rAreg * rAreg) + (invMoiB * rBreg * rBreg) );\n            // vproj += impulse * ( invMass + (invMoi * rreg * rreg) );\n            // angVel -= impulse * rreg * invMoi;\n\n\n            if ( fixedA ){\n\n                // apply impulse\n                bodyB.state.vel.vadd( n.mult( impulse * invMassB ) );\n                bodyB.state.angular.vel -= impulse * invMoiB * rBreg;\n\n            } else if ( fixedB ){\n\n                // apply impulse\n                bodyA.state.vel.vsub( n.mult( impulse * invMassA ) );\n                bodyA.state.angular.vel += impulse * invMoiA * rAreg;\n\n            } else {\n\n                // apply impulse\n                bodyB.state.vel.vadd( n.mult( impulse * invMassB ) );\n                bodyB.state.angular.vel -= impulse * invMoiB * rBreg;\n                bodyA.state.vel.vsub( n.mult( invMassA * bodyB.mass ) );\n                bodyA.state.angular.vel += impulse * invMoiA * rAreg;\n            }\n\n            // inContact = (impulse < 0.004);\n\n            // if we have friction and a relative velocity perpendicular to the normal\n            if ( cof && vreg ){\n\n\n                // TODO: here, we could first assume static friction applies\n                // and that the tangential relative velocity is zero.\n                // Then we could calculate the impulse and check if the\n                // tangential impulse is less than that allowed by static\n                // friction. If not, _then_ apply kinetic friction.\n\n                // instead we're just applying kinetic friction and making\n                // sure the impulse we apply is less than the maximum\n                // allowed amount\n\n                // maximum impulse allowed by kinetic friction\n                max = Math.abs(vreg) / ( invMassA + invMassB + (invMoiA * rAproj * rAproj) + (invMoiB * rBproj * rBproj) );\n                // the sign of vreg ( plus or minus 1 )\n                sign = vreg < 0 ? -1 : 1;\n\n                // get impulse due to friction\n                impulse = cof * Math.abs( impulse );\n                // constrain the impulse within the \"friction cone\" ( max < mu * impulse)\n                impulse = Math.min( impulse, max );\n                impulse *= sign;\n\n                if ( fixedA ){\n\n                    // apply frictional impulse\n                    bodyB.state.vel.vsub( perp.mult( impulse * invMassB ) );\n                    bodyB.state.angular.vel -= impulse * invMoiB * rBproj;\n\n                } else if ( fixedB ){\n\n                    // apply frictional impulse\n                    bodyA.state.vel.vadd( perp.mult( impulse * invMassA ) );\n                    bodyA.state.angular.vel += impulse * invMoiA * rAproj;\n\n                } else {\n\n                    // apply frictional impulse\n                    bodyB.state.vel.vsub( perp.mult( impulse * invMassB ) );\n                    bodyB.state.angular.vel -= impulse * invMoiB * rBproj;\n                    bodyA.state.vel.vadd( perp.mult( invMassA * bodyB.mass ) );\n                    bodyA.state.angular.vel += impulse * invMoiA * rAproj;\n                }\n            }\n\n            // wake up bodies if necessary\n            if ( bodyA.sleep() ){\n                bodyA.sleepCheck();\n            }\n            if ( bodyB.sleep() ){\n                bodyB.sleepCheck();\n            }\n\n            scratch.done();\n        },\n\n        // internal\n        _pushUniq: function( body ){\n            var idx = Physics.util.sortedIndex( this._bodyList, body, getUid );\n            if ( this._bodyList[ idx ] !== body ){\n                this._bodyList.splice( idx, 0, body );\n            }\n        },\n\n        /** internal\n         * BodyImpulseResponseBehavior#respond( data )\n         * - data (Object): event data\n         *\n         * Event callback to respond to collision data.\n         **/\n        respond: function( data ){\n\n            var self = this\n                ,col\n                ,collisions = data.collisions// Physics.util.shuffle(data.collisions)\n                ,i,l,b\n                ;\n\n            for ( i = 0, l = collisions.length; i < l; ++i ){\n\n                col = collisions[ i ];\n                // add bodies to list for later\n                this._pushUniq( col.bodyA );\n                this._pushUniq( col.bodyB );\n                // ensure they have mtv stat vectors\n                col.bodyA._mtvTotal = col.bodyA._mtvTotal || new Physics.vector();\n                col.bodyB._mtvTotal = col.bodyB._mtvTotal || new Physics.vector();\n                col.bodyA._oldmtvTotal = col.bodyA._oldmtvTotal || new Physics.vector();\n                col.bodyB._oldmtvTotal = col.bodyB._oldmtvTotal || new Physics.vector();\n\n                self.collideBodies(\n                    col.bodyA,\n                    col.bodyB,\n                    col.norm,\n                    col.pos,\n                    col.mtv,\n                    col.collidedPreviously\n                );\n            }\n\n            // apply mtv vectors from the average mtv vector\n            for ( i = 0, l = this._bodyList.length; i < l; ++i ){\n                b = this._bodyList.pop();\n                // clampMTV( b._oldmtvTotal, b._mtvTotal, b._mtvTotal );\n\n                if ( b._mtvTotal.normSq() < this.options.mtvThreshold ){\n                    b._mtvTotal.mult( this.options.bodyExtractDropoff );\n                } else if ( this.options.forceWakeupAboveOverlapThreshold ) {\n                    // wake up bodies if necessary\n                    b.sleep( false );\n                }\n\n                b.state.pos.vadd( b._mtvTotal );\n                b.state.old.pos.vadd( b._mtvTotal );\n                b._oldmtvTotal.swap( b._mtvTotal );\n                b._mtvTotal.zero();\n            }\n        }\n    };\n});\n\n\n// ---\n// inside: src/behaviors/constant-acceleration.js\n\n/** \n * class ConstantAccelerationBehavior < Behavior\n *\n * `Physics.behavior('constant-acceleration')`.\n *\n * Constant acceleration behavior.\n *\n * Basically the \"gravity\" behavior. Used to give \"earth-like gravity\" to the world.\n *\n * Additional options include:\n * - acc: The acceleration vector (Vectorish). (default: `{ x: 0, y: 0.0004 }`)\n **/\nPhysics.behavior('constant-acceleration', function( parent ){\n\n    var defaults = {\n\n        acc: { x : 0, y: 0.0004 }\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            parent.init.call( this );\n            this.options.defaults( defaults );\n            this.options( options );\n\n            // extend options\n            this._acc = new Physics.vector();\n            this.setAcceleration( this.options.acc );\n            delete this.options.acc;\n        },\n\n        /**\n         * ConstantAccelerationBehavior#setAcceleration( acc ) -> this\n         * - acc (Vectorish): The acceleration vector\n         * \n         * Set the acceleration of the behavior.\n         **/\n        setAcceleration: function( acc ){\n\n            this._acc.clone( acc );\n            return this;\n        },\n\n        // extended\n        behave: function( data ){\n\n            var bodies = this.getTargets();\n\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n                \n                bodies[ i ].accelerate( this._acc );\n            }\n        }\n    };\n});\n\n// ---\n// inside: src/behaviors/edge-collision-detection.js\n\n/**\n * class EdgeCollisionDetectionBehavior < Behavior\n *\n * `Physics.behavior('edge-collision-detection')`.\n *\n * Used to detect collisions with the boundaries of an AABB.\n *\n * Additional options include:\n * - aabb: The [[Physics.aabb]] bounds to use as the constraining boundary\n * - restitution: The restitution of the boundary walls (default: `0.99`)\n * - cof: The coefficient of friction of the boundary walls (default: `1`)\n * - channel: The channel to publish collisions to. (default: 'collisions:detected')\n **/\nPhysics.behavior('edge-collision-detection', function( parent ){\n\n    /*\n     * checkGeneral( body, bounds, dummy ) -> Array\n     * - body (Body): The body to check\n     * - bounds (Physics.aabb): The boundary\n     * - dummy: (Body): The dummy body to publish as the static other body it collides with\n     * + (Array): The collision data\n     *\n     * Check if a body collides with the boundary\n     */\n    var checkGeneral = function checkGeneral( body, bounds, dummy ){\n\n        var overlap\n            ,aabb = body.aabb()\n            ,scratch = Physics.scratchpad()\n            ,offset = body.getGlobalOffset( scratch.vector() )\n            ,trans = scratch.transform()\n            ,dir = scratch.vector()\n            ,result = scratch.vector()\n            ,collision = false\n            ,collisions = []\n            ;\n\n        // right\n        overlap = (aabb.x + aabb.hw) - bounds.max.x;\n\n        if ( overlap >= 0 ){\n\n            dir.set( 1, 0 ).rotateInv( trans.setRotation( body.state.angular.pos ) );\n\n            collision = {\n                bodyA: body,\n                bodyB: dummy,\n                overlap: overlap,\n                norm: {\n                    x: 1,\n                    y: 0\n                },\n                mtv: {\n                    x: overlap,\n                    y: 0\n                },\n                pos: body.geometry.getFarthestHullPoint( dir, result ).rotate( trans ).vadd( offset ).values()\n            };\n\n            collisions.push(collision);\n        }\n\n        // bottom\n        overlap = (aabb.y + aabb.hh) - bounds.max.y;\n\n        if ( overlap >= 0 ){\n\n            dir.set( 0, 1 ).rotateInv( trans.setRotation( body.state.angular.pos ) );\n\n            collision = {\n                bodyA: body,\n                bodyB: dummy,\n                overlap: overlap,\n                norm: {\n                    x: 0,\n                    y: 1\n                },\n                mtv: {\n                    x: 0,\n                    y: overlap\n                },\n                pos: body.geometry.getFarthestHullPoint( dir, result ).rotate( trans ).vadd( offset ).values()\n            };\n\n            collisions.push(collision);\n        }\n\n        // left\n        overlap = bounds.min.x - (aabb.x - aabb.hw);\n\n        if ( overlap >= 0 ){\n\n            dir.set( -1, 0 ).rotateInv( trans.setRotation( body.state.angular.pos ) );\n\n            collision = {\n                bodyA: body,\n                bodyB: dummy,\n                overlap: overlap,\n                norm: {\n                    x: -1,\n                    y: 0\n                },\n                mtv: {\n                    x: -overlap,\n                    y: 0\n                },\n                pos: body.geometry.getFarthestHullPoint( dir, result ).rotate( trans ).vadd( offset ).values()\n            };\n\n            collisions.push(collision);\n        }\n\n        // top\n        overlap = bounds.min.y - (aabb.y - aabb.hh);\n\n        if ( overlap >= 0 ){\n\n            dir.set( 0, -1 ).rotateInv( trans.setRotation( body.state.angular.pos ) );\n\n            collision = {\n                bodyA: body,\n                bodyB: dummy,\n                overlap: overlap,\n                norm: {\n                    x: 0,\n                    y: -1\n                },\n                mtv: {\n                    x: 0,\n                    y: -overlap\n                },\n                pos: body.geometry.getFarthestHullPoint( dir, result ).rotate( trans ).vadd( offset ).values()\n            };\n\n            collisions.push(collision);\n        }\n\n        scratch.done();\n        return collisions;\n    };\n\n    /*\n     * checkEdgeCollide( body, bounds, dummy ) -> Array\n     * - body (Body): The body to check\n     * - bounds (Physics.aabb): The boundary\n     * - dummy: (Body): The dummy body to publish as the static other body it collides with\n     * + (Array): The collision data\n     *\n     * Check if a body collides with the boundary\n     */\n    var checkEdgeCollide = function checkEdgeCollide( body, bounds, dummy ){\n\n        return checkGeneral( body, bounds, dummy );\n    };\n\n    var defaults = {\n\n        aabb: null,\n        restitution: 0.99,\n        cof: 1.0,\n        channel: 'collisions:detected'\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            parent.init.call( this );\n            this.options.defaults( defaults );\n            this.options( options );\n\n            this.setAABB( this.options.aabb );\n            this.restitution = this.options.restitution;\n\n            this.body = Physics.body('point', {\n                treatment: 'static',\n                restitution: this.options.restitution,\n                cof: this.options.cof\n            });\n        },\n\n        /**\n         * EdgeCollisionDetectionBehavior#setAABB( aabb ) -> this\n         * - aabb (Physics.aabb): The aabb to use as the boundary\n         *\n         * Set the boundaries of the edge.\n         **/\n        setAABB: function( aabb ){\n\n            if (!aabb) {\n                throw 'Error: aabb not set';\n            }\n\n            this._edges = {\n                min: {\n                    x: (aabb.x - aabb.hw),\n                    y: (aabb.y - aabb.hh)\n                },\n                max: {\n                    x: (aabb.x + aabb.hw),\n                    y: (aabb.y + aabb.hh)\n                }\n            };\n\n            return this;\n        },\n\n        // extended\n        connect: function( world ){\n\n            world.on( 'integrate:positions', this.checkAll, this, 2 );\n        },\n\n        // extended\n        disconnect: function( world ){\n\n            world.off( 'integrate:positions', this.checkAll, this, 2 );\n        },\n\n        /** internal\n         * EdgeCollisionDetectionBehavior#checkAll( data )\n         * - data (Object): Event data\n         *\n         * Event callback to check all bodies for collisions with the edge\n         **/\n        checkAll: function( data ){\n\n            var bodies = this.getTargets()\n                ,dt = data.dt\n                ,body\n                ,collisions = []\n                ,ret\n                ,bounds = this._edges\n                ,dummy = this.body\n                ,prevContacts = this.prevContacts || {}\n                ,contactList = {}\n                ,pairHash = Physics.util.pairHash\n                ,hash\n                ;\n\n            for ( var i = 0, l = bodies.length; i < l; i++ ){\n\n                body = bodies[ i ];\n\n                // only detect dynamic bodies\n                if ( body.treatment === 'dynamic' ){\n\n                    ret = checkEdgeCollide( body, bounds, dummy );\n\n                    if ( ret ){\n                        hash = pairHash( body.uid, dummy.uid );\n\n                        for ( var j = 0, ll = ret.length; j < ll; j++ ){\n                            contactList[ hash ] = true;\n                            ret[ j ].collidedPreviously = prevContacts[ hash ];\n                        }\n\n                        collisions.push.apply( collisions, ret );\n                    }\n                }\n            }\n\n            this.prevContacts = contactList;\n\n            if ( collisions.length ){\n\n                this._world.emit( this.options.channel, {\n                    collisions: collisions\n                });\n            }\n        }\n    };\n\n});\n\n\n// ---\n// inside: src/behaviors/interactive.js\n\n/**\n * class InteractiveBehavior < Behavior\n *\n * `Physics.behavior('interactive')`.\n *\n * User interaction helper.\n *\n * Used to get mouse/touch events and add grab interactions.\n *\n * Additional options include:\n * - el: The element of the renderer. What you input as the `el` for the renderer.\n * - moveThrottle: The min time between move events (default: `10`).\n * - minVel: The minimum velocity clamp [[Vectorish]] (default: { x: -5, y: -5 }) to restrict velocity a user can give to a body\n * - maxVel: The maximum velocity clamp [[Vectorish]] (default: { x: 5, y: 5 }) to restrict velocity a user can give to a body\n *\n * The behavior also triggers the following events on the world:\n * ```javascript\n * // a body has been grabbed\n * world.on('interact:grab', function( data ){\n *     data.x; // the x coord\n *     data.y; // the y coord\n *     data.body; // the body that was grabbed\n * });\n * // no body was grabbed, but the renderer area was clicked, or touched\n * world.on('interact:poke', function( data ){\n *     data.x; // the x coord\n *     data.y; // the y coord\n * });\n * // when a mouse or pointer moves\n * world.on('interact:move', function( data ){\n *     data.x; // the x coord\n *     data.y; // the y coord\n *     data.body; // the grabbed body that was moved (if applicable)\n * });\n * // when the viewport is released (mouseup, touchend)\n * world.on('interact:release', function( data ){\n *     data.x; // the x coord\n *     data.y; // the y coord\n *     data.body; // the body that was grabbed (if applicable)\n * });\n * ```\n *\n * The behavior also sets body.isGrabbed = true for any grabbed bodies while they are grabbed.\n **/\nPhysics.behavior('interactive', function( parent ){\n\n    if ( !document ){\n        // must be in node environment\n        return {};\n    }\n\n    var defaults = {\n            // the element to monitor\n            el: null,\n            // time between move events\n            moveThrottle: 1000 / 100 | 0,\n            // minimum velocity clamp\n            minVel: { x: -5, y: -5 },\n            // maximum velocity clamp\n            maxVel: { x: 5, y: 5 }\n        }\n        ,getElementOffset = function( el ){\n            var curleft = 0\n                ,curtop = 0\n                ;\n\n            if (el.offsetParent) {\n                do {\n                    curleft += el.offsetLeft;\n                    curtop += el.offsetTop;\n                } while (el = el.offsetParent);\n            }\n\n            return { left: curleft, top: curtop };\n        }\n        ;\n\n    return {\n        // extended\n        init: function( options ){\n\n            var self = this;\n\n            // call parent init method\n            parent.init.call( this );\n            this.options.defaults( defaults );\n            this.options( options );\n\n            // vars\n            this.bodyData = {};\n            this.bodyDataByUID = {};\n\n            this.el = typeof this.options.el === 'string' ? document.getElementById(this.options.el) : this.options.el;\n\n            if ( !this.el ){\n                throw \"No DOM element specified\";\n            }\n\n            // init events\n            // when there are multiple touchdowns, grab is usually called separately for each,\n            // but we loop through e.changedTouches just in case\n            self.grab = function grab( e ){\n                var pos\n                    ,body\n                    ,touchId\n                    ,touch\n                    ,offset\n                    ,data\n                    ,touchIndex\n                    ,l\n                    ;\n\n                if ( self._world ){\n\n                    // Adjust for PointerEvent and older browsers\n                    if ( !e.changedTouches ) {\n                        e.changedTouches = [ e ];\n                    }\n\n                    offset = getElementOffset( e.target );\n\n                    for ( touchIndex = 0, l = e.changedTouches.length; touchIndex < l; touchIndex++) {\n                        touch = e.changedTouches[touchIndex];\n                        touchId = touch.identifier || touch.pointerId || \"mouse\";\n                        pos = { idx: touchId, x: touch.pageX - offset.left, y: touch.pageY - offset.top };\n                        body = self._world.findOne({ $at: new Physics.vector( pos ), $in: self.getTargets() });\n\n                        if ( body ){\n                            // we're trying to grab a body\n\n                            // fix the body in place\n                            body.state.vel.zero();\n                            body.state.angular.vel = 0;\n                            body.isGrabbed = true;\n                            // remember the currently grabbed bodies\n                            data = self.bodyData[touchId] || {};\n                            data.body = body;\n                            // wake the body up\n                            body.sleep( false );\n                            data.time = Physics.util.ticker.now();\n\n                            // if we're grabbing the same body twice we don't want to remember the wrong treatment.\n                            data.treatment = self.bodyDataByUID[ body.uid ] ? self.bodyDataByUID[ body.uid ].treatment : body.treatment;\n                            // change its treatment but remember its old treatment\n                            body.treatment = 'kinematic';\n                            // remember the click/touch offset\n                            data.pos = data.pos || new Physics.vector();\n                            data.pos.clone( pos );\n\n                            data.offset = data.offset || new Physics.vector();\n                            data.offset.clone( pos ).vsub( body.state.pos );\n                            // init touchPointsOld here, too, so we don't have to do it in \"move\"\n                            data.oldPos = data.oldPos || new Physics.vector();\n                            data.oldPos.clone( pos );\n\n                            pos.body = body;\n                            self.bodyData[touchId] = data;\n                            self.bodyDataByUID[ body.uid ] = data;\n                            self._world.emit('interact:grab', pos);\n\n                        } else {\n\n                            self._world.emit('interact:poke', pos);\n                        }\n                    }\n                }\n            };\n\n            // when there are multiple touchdowns, move is called once\n            // and e.changedTouches will have one or more touches in it\n            self.move = Physics.util.throttle(function move( e ){\n                var pos\n                    ,state\n                    ,body\n                    ,touchId\n                    ,touch\n                    ,offset\n                    ,data\n                    ,touchIndex\n                    ,l\n                    ;\n\n                if ( self._world ){\n\n                    // Adjust for PointerEvent and older browsers\n                    if ( !e.changedTouches ) {\n                        e.changedTouches = [ e ];\n                    }\n\n                    offset = getElementOffset( self.el );\n\n                    for ( touchIndex = 0, l = e.changedTouches.length; touchIndex < l; touchIndex++) {\n                        touch = e.changedTouches[touchIndex];\n                        touchId = touch.identifier || touch.pointerId || \"mouse\";\n                        pos = { idx: touchId, x: touch.pageX - offset.left, y: touch.pageY - offset.top };\n                        data = self.bodyData[touchId];\n\n                        if ( data ){\n                            body = data.body;\n\n                            // wake the body up\n                            body.sleep( false );\n                            data.time = Physics.util.ticker.now();\n\n                            // set old mouse position\n                            data.oldPos.clone( data.pos );\n                            // get new mouse position\n                            data.pos.clone( pos );\n\n                            pos.body = body;\n                        }\n\n                        self._world.emit('interact:move', pos);\n                    }\n                }\n\n            }, self.options.moveThrottle);\n\n            // when there are multiple touchups, release is called once\n            // and e.changedTouches will have one or more touches in it\n            self.release = function release( e ){\n                var pos\n                    ,body\n                    ,touchId\n                    ,touch\n                    ,offset\n                    ,data\n                    ,dt\n                    ,touchIndex\n                    ,l\n                    ;\n\n                if ( self._world ){\n\n                    // Adjust for PointerEvent and older browsers\n                    if ( !e.changedTouches ) {\n                        e.changedTouches = [ e ];\n                    }\n\n                    for ( touchIndex = 0, l = e.changedTouches.length; touchIndex < l; touchIndex++) {\n                        offset = getElementOffset( self.el );\n                        touch = e.changedTouches[touchIndex];\n                        touchId = touch.identifier || touch.pointerId || \"mouse\";\n                        pos = { idx: touchId, x: touch.pageX - offset.left, y: touch.pageY - offset.top };\n                        data = self.bodyData[touchId];\n\n                        // release the body\n                        if ( data ){\n                            body = data.body;\n                            // wake the body up\n                            body.sleep( false );\n                            // get new mouse position\n                            data.pos.clone( pos );\n\n                            dt = Math.max(Physics.util.ticker.now() - data.time, self.options.moveThrottle);\n                            body.treatment = data.treatment;\n                            // calculate the release velocity\n                            body.state.vel.clone( data.pos ).vsub( data.oldPos ).mult( 1 / dt );\n                            // make sure it's not too big\n                            body.state.vel.clamp( self.options.minVel, self.options.maxVel );\n\n                            body.isGrabbed = false;\n                            pos.body = body;\n\n                            delete body.isGrabbed;\n                        }\n\n                        // emit before we delete the vars in case\n                        // the listeners need the body\n                        self._world.emit('interact:release', pos);\n\n                        // remove vars\n                        delete self.bodyData[touchId];\n                    }\n                }\n            };\n        },\n\n        // extended\n        connect: function( world ){\n\n            // subscribe the .behave() method to the position integration step\n            world.on('integrate:positions', this.behave, this);\n\n            if ( window.PointerEvent ) {\n\n                this.el.addEventListener('pointerdown', this.grab);\n                window.addEventListener('pointermove', this.move);\n                window.addEventListener('pointerup', this.release);\n\n            } else {\n\n                this.el.addEventListener('mousedown', this.grab);\n                this.el.addEventListener('touchstart', this.grab);\n\n                window.addEventListener('mousemove', this.move);\n                window.addEventListener('touchmove', this.move);\n\n                window.addEventListener('mouseup', this.release);\n                window.addEventListener('touchend', this.release);\n\n            }\n        },\n\n        // extended\n        disconnect: function( world ){\n\n            // unsubscribe when disconnected\n            world.off('integrate:positions', this.behave, this);\n\n            if ( window.PointerEvent ) {\n\n                this.el.removeEventListener('pointerdown', this.grab);\n                window.removeEventListener('pointermove', this.move);\n                window.removeEventListener('pointerup', this.release);\n\n            } else {\n\n                this.el.removeEventListener('mousedown', this.grab);\n                this.el.removeEventListener('touchstart', this.grab);\n\n                window.removeEventListener('mousemove', this.move);\n                window.removeEventListener('touchmove', this.move);\n\n                window.removeEventListener('mouseup', this.release);\n                window.removeEventListener('touchend', this.release);\n\n            }\n        },\n\n        // extended\n        behave: function( data ){\n\n            var self = this\n                ,state\n                ,dt = Math.max(data.dt, self.options.moveThrottle)\n                ,body\n                ,d\n                ;\n\n            // if we have one or more bodies grabbed, we need to move them to the new mouse/finger positions.\n            // we'll do this by adjusting the velocity so they get there at the next step\n            for ( var touchId in self.bodyData ) {\n                d = self.bodyData[touchId];\n                body = d.body;\n                state = body.state;\n                state.vel.clone( d.pos ).vsub( d.offset ).vsub( state.pos ).mult( 1 / dt );\n            }\n        }\n    };\n});\n\n\n// ---\n// inside: src/behaviors/newtonian.js\n\n/**\n * class NewtonianBehavior < Behavior\n *\n * `Physics.behavior('newtonian')`.\n *\n * Newtonian attraction between bodies (inverse square law).\n *\n * Additional options include:\n * - strength: The strength of the interaction between bodies. (default: `1`)\n * - max: The maximum distance between bodies at which to apply the behavior. (default: `false`... infinite)\n * - min: The minimum distance between bodies at which to apply the behavior. (default: `false`... autocalculate)\n **/\nPhysics.behavior('newtonian', function( parent ){\n\n    var defaults = {\n\n        strength: 1,\n        // max distance to apply it to\n        max: false, // infinite\n        // min distance to apply it to\n        min: false // auto calc\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            var self = this;\n            // call parent init method\n            parent.init.call( this );\n            this.options.defaults( defaults );\n            this.options.onChange(function( opts ){\n                self._maxDistSq = opts.max === false ? Infinity : opts.max * opts.max;\n                self._minDistSq = opts.min ? opts.min * opts.min : 100 * opts.strength;\n            });\n            this.options( options );\n        },\n\n        calcPotential: function( posA, posB, out ){\n\n            var strength = this.options.strength\n                ,minDistSq = this._minDistSq\n                ,maxDistSq = this._maxDistSq\n                ,normsq\n                ,g\n                ,pos\n                ;\n\n            pos = out || new Physics.vector();\n\n            // clone the position\n            pos.clone( posB ).vsub( posA );\n            // get the square distance\n            normsq = pos.normSq();\n\n            if (normsq > minDistSq && normsq < maxDistSq){\n\n                g = strength / normsq;\n                return pos.normalize().mult( g );\n            }\n\n            return pos.zero();\n        },\n\n        // extended\n        behave: function( data ){\n\n            var bodies = this.getTargets()\n                ,body\n                ,other\n                ,scratch = Physics.scratchpad()\n                ,potential = scratch.vector()\n                ,comp\n                ,bodyA\n                ,bodyB\n                ,posA = scratch.vector()\n                ,posB = scratch.vector()\n                ,i, j, k, m, l, ll, lll\n                ;\n\n            for ( j = 0, l = bodies.length; j < l; j++ ){\n\n                body = bodies[ j ];\n\n                for ( i = j + 1; i < l; i++ ){\n\n                    other = bodies[ i ];\n\n                    if ( body.name === 'compound' ){\n                        comp = body;\n                    } else if ( other.name === 'compound' ){\n                        comp = other;\n                        other = body;\n                    }\n\n                    if ( comp ){\n                        if ( other.name === 'compound' ){\n                            for ( k = 0, ll = comp.children.length; k < ll; k++ ){\n                                bodyA = comp.children[ k ];\n                                comp.toWorldCoords( posA.clone( bodyA.state.pos ).vadd( comp.offset ) );\n                                for ( m = 0, lll = other.children.length; m < lll; m++ ){\n                                    bodyB = other.children[ m ];\n                                    other.toWorldCoords( posB.clone( bodyB.state.pos ).vadd( other.offset ) );\n                                    this.calcPotential( posA, posB, potential );\n                                    comp.accelerate( potential.mult( bodyB.mass ) );\n                                    other.accelerate( potential.mult( bodyA.mass/bodyB.mass ).negate() );\n                                }\n                            }\n                        } else {\n                            for ( k = 0, ll = comp.children.length; k < ll; k++ ){\n                                bodyA = comp.children[ k ];\n                                comp.toWorldCoords( posA.clone( bodyA.state.pos ).vadd( comp.offset ) );\n                                this.calcPotential( posA, other.state.pos, potential );\n                                comp.accelerate( potential.mult( other.mass ) );\n                                other.accelerate( potential.mult( bodyA.mass/other.mass ).negate() );\n                            }\n                        }\n\n                    } else {\n\n                        this.calcPotential( body.state.pos, other.state.pos, potential );\n                        body.accelerate( potential.mult( other.mass ) );\n                        other.accelerate( potential.mult( body.mass/other.mass ).negate() );\n                    }\n\n                    comp = null;\n                }\n            }\n\n            scratch.done();\n        }\n    };\n});\n\n\n// ---\n// inside: src/behaviors/sweep-prune.js\n\n/**\n * class SweepPruneBehavior < Behavior\n *\n * `Physics.behavior('sweep-prune')`.\n *\n * Sweep and Prune implementation for broad phase collision detection.\n *\n * This massively improves the speed of collision detection. It's set up to always be used with [[BodyCollisionDetection]], and [[BodyImpulseResponse]].\n *\n * Additional options include:\n * - channel: The channel to publish collision candidates to. (default: `collisions:candidates`)\n **/\nPhysics.behavior('sweep-prune', function( parent ){\n\n    var uid = 1;\n\n    // Get a unique numeric id for internal use\n    var getUniqueId = function getUniqueId(){\n\n        return uid++;\n    };\n\n    // add z: 2 to get this to work in 3D\n    var dof = { x: 0, y: 1 }; // degrees of freedom\n    // change to \"3\" to get it to work in 3D\n    var maxDof = 2;\n\n    var pairHash = Physics.util.pairHash;\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            parent.init.call( this );\n            this.options.defaults({\n                channel: 'collisions:candidates' //default channel\n            });\n            this.options( options );\n\n            this.encounters = [];\n            this.candidates = [];\n\n            this.clear();\n        },\n\n        /**\n         * SweepPruneBehavior#clear()\n         *\n         * Refresh tracking data\n         **/\n        clear: function(){\n\n            this.tracked = [];\n            this.pairs = []; // pairs selected as candidate collisions by broad phase\n            this.intervalLists = []; // stores lists of aabb projection intervals to be sorted\n\n            // init intervalLists\n            for ( var xyz = 0; xyz < maxDof; ++xyz ){\n\n                this.intervalLists[ xyz ] = [];\n            }\n        },\n\n        // extended\n        connect: function( world ){\n\n            world.on( 'add:body', this.trackBody, this );\n            world.on( 'remove:body', this.untrackBody, this );\n            world.on( 'integrate:positions', this.sweep, this, 1 );\n\n            // add current bodies\n            var bodies = world.getBodies();\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                this.trackBody({ body: bodies[ i ] });\n            }\n        },\n\n        // extended\n        disconnect: function( world ){\n\n            world.off( 'add:body', this.trackBody, this );\n            world.off( 'remove:body', this.untrackBody, this );\n            world.off( 'integrate:positions', this.sweep, this, 1 );\n            this.clear();\n        },\n\n        /** internal\n         * SweepPruneBehavior#broadPhase() -> Array\n         * + (Array): The candidate data of overlapping aabbs\n         *\n         * Execute the broad phase and get candidate collisions\n         **/\n        broadPhase: function(){\n\n            this.updateIntervals();\n            this.sortIntervalLists();\n\n            if ( this._world ){\n                this._world.emit('sweep-prune:intervals', this.intervalLists);\n            }\n\n            return this.checkOverlaps();\n        },\n\n        /** internal\n         * SweepPruneBehavior#sortIntervalLists()\n         *\n         * Simple insertion sort for each axis\n         **/\n        sortIntervalLists: function(){\n\n            var list\n                ,len\n                ,i\n                ,hole\n                ,bound\n                ,boundVal\n                ,left\n                ,leftVal\n                ,axis\n                ;\n\n            // for each axis...\n            for ( var xyz = 0; xyz < maxDof; ++xyz ){\n\n                // get the intervals for that axis\n                list = this.intervalLists[ xyz ];\n                i = 0;\n                len = list.length;\n                axis = xyz;\n\n                // for each interval bound...\n                while ( (++i) < len ){\n\n                    // store bound\n                    bound = list[ i ];\n                    boundVal = bound.val.get( axis );\n                    hole = i;\n\n                    left = list[ hole - 1 ];\n                    leftVal = left && left.val.get( axis );\n\n                    // while others are greater than bound...\n                    while (\n                        hole > 0 &&\n                        (\n                            leftVal > boundVal ||\n                            // if it's an equality, only move it over if\n                            // the hole was created by a minimum\n                            // and the previous is a maximum\n                            // so that we detect contacts also\n                            leftVal === boundVal &&\n                            ( left.type && !bound.type )\n                        )\n                    ) {\n\n                        // move others greater than bound to the right\n                        list[ hole ] = left;\n                        hole--;\n                        left = list[ hole - 1 ];\n                        leftVal = left && left.val.get( axis );\n                    }\n\n                    // insert bound in the hole\n                    list[ hole ] = bound;\n                }\n            }\n        },\n\n        /** internal\n         * SweepPruneBehavior#getPair( tr1, tr2, doCreate ) -> Object\n         * - tr1 (Object): First tracker\n         * - tr2 (Object): Second tracker\n         * - doCreate (Boolean): Create if not found\n         * + (Object): Pair object or null if not found\n         *\n         * Get a pair object for the tracker objects\n         **/\n        getPair: function(tr1, tr2, doCreate){\n\n            var hash = pairHash( tr1.id, tr2.id );\n\n            if ( hash === false ){\n                return null;\n            }\n\n            var c = this.pairs[ hash ];\n\n            if ( !c ){\n\n                if ( !doCreate ){\n                    return null;\n                }\n\n                c = this.pairs[ hash ] = {\n                    bodyA: tr1.body,\n                    bodyB: tr2.body,\n                    flag: 1\n                };\n            }\n\n            if ( doCreate){\n                c.flag = 1;\n            }\n\n            return c;\n        },\n\n        // getPair: function(tr1, tr2, doCreate){\n\n        //     var hash = Math.min(tr1.id, tr2.id) // = pairHash( tr1.id, tr2.id )\n        //         ,other = Math.max(tr1.id, tr2.id)\n        //         ,first\n        //         ,c\n        //         ;\n\n        //     if ( hash === false ){\n        //         return null;\n        //     }\n\n        //     first = this.pairs[ hash ];\n\n        //     if ( !first ){\n        //         if ( !doCreate ){\n        //             return null;\n        //         }\n\n        //         first = this.pairs[ hash ] = [];\n        //     }\n\n        //     c = first[ other ];\n\n        //     if ( !c ){\n\n        //         if ( !doCreate ){\n        //             return null;\n        //         }\n\n        //         c = first[ other ] = {\n        //             bodyA: tr1.body,\n        //             bodyB: tr2.body,\n        //             flag: 1\n        //         };\n        //     }\n\n        //     return c;\n        // },\n\n        /** internal\n         * SweepPruneBehavior#checkOverlaps() -> Array\n         * + (Array): List of candidate collisions\n         *\n         * Check each axis for overlaps of bodies AABBs\n         **/\n        checkOverlaps: function(){\n\n            var isX\n                ,hash\n                ,tr1\n                ,tr2\n                ,bound\n                ,list\n                ,len\n                ,i\n                ,j\n                ,c\n                // determine which axis is the last we need to check\n                ,collisionFlag = 1 << (dof.z + 1) << (dof.y + 1) << (dof.x + 1)\n                ,encounters = this.encounters\n                ,enclen = 0\n                ,candidates = this.candidates\n                ;\n\n            Physics.util.clearArray( encounters );\n            Physics.util.clearArray( candidates );\n\n            for ( var xyz = 0; xyz < maxDof; ++xyz ){\n\n                // is the x coord\n                isX = (xyz === 0);\n                // get the interval list for this axis\n                list = this.intervalLists[ xyz ];\n\n                // for each interval bound\n                for ( i = 0, len = list.length; i < len; i++ ){\n\n                    bound = list[ i ];\n                    tr1 = bound.tracker;\n\n                    if ( bound.type ){\n\n                        // is a max\n\n                        j = enclen;\n\n                        for ( j = enclen - 1; j >= 0; j-- ){\n\n                            tr2 = encounters[ j ];\n\n                            // if they are the same tracked interval\n                            if ( tr2 === tr1 ){\n\n                                // remove the interval from the encounters list\n                                // faster than .splice()\n                                if ( j < enclen - 1 ) {\n\n                                    encounters[ j ] = encounters.pop();\n\n                                } else {\n\n                                    // encountered a max right after a min... no overlap\n                                    encounters.pop();\n                                }\n\n                                enclen--;\n\n                            } else {\n\n                                // check if we have flagged this pair before\n                                // if it's the x axis, create a pair\n                                c = this.getPair( tr1, tr2, isX );\n\n                                if ( c && c.flag < collisionFlag ){\n\n                                    // if it's greater than the axis index, set the flag\n                                    // to = 0.\n                                    // if not, increment the flag by one.\n                                    c.flag = c.flag << (xyz + 1);\n\n                                    // c.flag will equal collisionFlag\n                                    // if we've incremented the flag\n                                    // enough that all axes are overlapping\n                                    if ( c.flag === collisionFlag ){\n\n                                        // overlaps on all axes.\n                                        // add it to possible collision\n                                        // candidates list for narrow phase\n\n                                        candidates.push( c );\n                                    }\n                                }\n                            }\n                        }\n\n                    } else {\n\n                        // is a min\n                        // just add this minimum to the encounters list\n                        enclen = encounters.push( tr1 );\n                    }\n                }\n            }\n\n            return candidates;\n        },\n\n        /** internal\n         * SweepPruneBehavior#updateIntervals()\n         *\n         * Update position intervals on each axis\n         **/\n        updateIntervals: function(){\n\n            var tr\n                ,intr\n                ,aabb\n                ,list = this.tracked\n                ,i = list.length\n                ;\n\n            // for all tracked bodies\n            while ( (--i) >= 0 ){\n\n                tr = list[ i ];\n                intr = tr.interval;\n                aabb = tr.body.aabb();\n\n                // copy the position (plus or minus) the aabb half-dimensions\n                // into the min/max intervals\n                intr.min.val.clone( aabb ).sub( aabb.hw, aabb.hh );\n                intr.max.val.clone( aabb ).add( aabb.hw, aabb.hh );\n            }\n        },\n\n        /** internal\n         * SweepPruneBehavior#trackBody( data )\n         * - data (Object): Event data\n         *\n         * Event callback to add body to list of those tracked by sweep and prune\n         **/\n        trackBody: function( data ){\n\n            var body = data.body\n                ,tracker = {\n\n                    id: getUniqueId(),\n                    body: body\n                }\n                ,intr = {\n\n                    min: {\n                        type: false, //min\n                        val: new Physics.vector(),\n                        tracker: tracker\n                    },\n\n                    max: {\n                        type: true, //max\n                        val: new Physics.vector(),\n                        tracker: tracker\n                    }\n                }\n                ;\n\n            tracker.interval = intr;\n            this.tracked.push( tracker );\n\n            for ( var xyz = 0; xyz < maxDof; ++xyz ){\n\n                this.intervalLists[ xyz ].push( intr.min, intr.max );\n            }\n        },\n\n        /** internal\n         * SweepPruneBehavior#untrackBody( data )\n         * - data (Object): Event data\n         *\n         * Event callback to remove body from list of those tracked\n         **/\n        untrackBody: function( data ){\n\n            var body = data.body\n                ,list\n                ,minmax\n                ,trackedList = this.tracked\n                ,tracker\n                ,count\n                ;\n\n            for ( var i = 0, l = trackedList.length; i < l; ++i ){\n\n                tracker = trackedList[ i ];\n\n                if ( tracker.body === body ){\n\n                    // remove the tracker at this index\n                    trackedList.splice(i, 1);\n\n                    for ( var xyz = 0; xyz < maxDof; ++xyz ){\n\n                        count = 0;\n                        list = this.intervalLists[ xyz ];\n\n                        for ( var j = 0, m = list.length; j < m; ++j ){\n\n                            minmax = list[ j ];\n\n                            if ( minmax === tracker.interval.min || minmax === tracker.interval.max ){\n\n                                // remove interval from list\n                                list.splice(j, 1);\n                                j--;\n                                l--;\n\n                                if (count > 0){\n                                    break;\n                                }\n\n                                count++;\n                            }\n                        }\n                    }\n\n                    break;\n                }\n            }\n        },\n\n        /** internal\n         * SweepPruneBehavior#sweep( data )\n         * - data (Object): Event data\n         *\n         * Event callback to sweep and publish event if any candidate collisions are found\n         **/\n        sweep: function( data ){\n\n            var self = this\n                ,candidates\n                ;\n\n            candidates = self.broadPhase();\n\n            if ( candidates.length ){\n\n                this._world.emit( this.options.channel, {\n                    candidates: candidates\n                });\n            }\n        }\n    };\n});\n\n\n// ---\n// inside: src/behaviors/verlet-constraints.js\n\n/**\n * class VerletConstraintsBehavior < Behavior\n *\n * `Physics.behavior('verlet-constraints')`.\n *\n * Verlet constraints manager.\n *\n * Handles distance constraints, and angle constraints\n *\n * Additional options include:\n * - iterations: The number of iterations to take to relax the constraints. (default: `2`)\n **/\nPhysics.behavior('verlet-constraints', function( parent ){\n\n    var TWOPI = 2 * Math.PI;\n\n    var defaults = {\n\n        // number of iterations to resolve constraints\n        iterations: 2\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            parent.init.call( this );\n            this.options.defaults( defaults );\n            this.options( options );\n\n            this._distanceConstraints = [];\n            this._angleConstraints = [];\n        },\n\n        // extended\n        connect: function( world ){\n\n            var intg = world.integrator();\n\n            if ( intg && intg.name.indexOf('verlet') < 0 ){\n\n                throw 'The rigid constraint manager needs a world with a \"verlet\" compatible integrator.';\n            }\n\n            world.on('integrate:positions', this.resolve, this);\n        },\n\n        // extended\n        disconnect: function( world ){\n\n            world.off('integrate:positions', this.resolve, this);\n        },\n\n        /**\n         * VerletConstraintsBehavior#drop() -> this\n         *\n         * Remove all constraints\n         **/\n        drop: function(){\n\n            // drop the current constraints\n            this._distanceConstraints = [];\n            this._angleConstraints = [];\n            return this;\n        },\n\n        /**\n         * VerletConstraintsBehavior#distanceConstraint( bodyA, bodyB[, stiffness, targetLength] ) -> Object\n         * - bodyA (Body): First body\n         * - bodyB (Body): Second body\n         * - stiffness (Number): A number between 0 and 1 that represents the stiffness of the constraint. Defaults to: `0.5`\n         * - targetLength (Number): Target length. defaults to current distance between the bodies\n         * + (Object): The constraint data object\n         *\n         * Constrain two bodies to a target relative distance.\n         *\n         * Returns constraint data that can be used to remove the constraint later.\n         *\n         * - `.bodyA` and `.bodyB` are references to the bodies\n         * - `.type` is the type of constraint\n         * - `.id` is the string ID of the constraint\n         * - `.stiffness` is the stiffness\n         * - `.targetLength` is the target length\n         **/\n        distanceConstraint: function( bodyA, bodyB, stiffness, targetLength ){\n\n            var cst;\n\n            if (!bodyA || !bodyB){\n\n                return false;\n            }\n\n            cst = {\n                id: Physics.util.uniqueId('dis-constraint'),\n                type: 'dis',\n                bodyA: bodyA,\n                bodyB: bodyB,\n                stiffness: stiffness || 0.5,\n                targetLength: targetLength || bodyB.state.pos.dist( bodyA.state.pos )\n            };\n\n            cst.targetLengthSq = cst.targetLength * cst.targetLength;\n\n            this._distanceConstraints.push( cst );\n            return cst;\n        },\n\n        /**\n         * VerletConstraintsBehavior#angleConstraint( bodyA, bodyB, bodyC[, stiffness, targetAngle] ) -> Object\n         * - bodyA (Body): First body\n         * - bodyB (Body): Second body\n         * - bodyC (Body): Third body\n         * - stiffness (Number): A number between 0 and 1 that represents the stiffness of the constraint. Defaults to: `0.5`\n         * - targetAngle (Number): Target angle. Defaults to the current angle between bodies\n         * + (Object): The constraint data object\n         *\n         * Constrain three bodies to a target relative angle\n         *\n         * Returns constraint data that can be used to remove the constraint later.\n         *\n         * - `.bodyA`, `.bodyB`, and `.bodyC` are references to the bodies\n         * - `.type` is the type of constraint\n         * - `.id` is the string ID of the constraint\n         * - `.stiffness` is the stiffness\n         * - `.targetAngle` is the target angle\n         **/\n        angleConstraint: function( bodyA, bodyB, bodyC, stiffness, targetAngle ){\n\n            var cst;\n\n            if (!bodyA || !bodyB){\n\n                return false;\n            }\n\n            cst = {\n                id: Physics.util.uniqueId('ang-constraint'),\n                type: 'ang',\n                bodyA: bodyA,\n                bodyB: bodyB,\n                bodyC: bodyC,\n                stiffness: stiffness || 0.5,\n                targetAngle: targetAngle || bodyB.state.pos.angle2( bodyA.state.pos, bodyC.state.pos )\n            };\n\n            this._angleConstraints.push( cst );\n            return cst;\n        },\n\n        /**\n         * VerletConstraintsBehavior#remove( constraintData ) -> this\n         * VerletConstraintsBehavior#remove( constraintId ) -> this\n         * - constraintData (Object): The constraint data returned when creating a constraint\n         * - constraintId (String): The constraint id\n         *\n         * Remove a constraint\n         **/\n        remove: function( cstrOrId ){\n\n            var constraints\n                ,type\n                ,isObj\n                ,i\n                ,l\n                ;\n\n            isObj = Physics.util.isObject( cstrOrId );\n\n            type = (isObj) ? cstrOrId.type : cstrOrId.substr(0, 3);\n            constraints = ( type === 'ang' ) ? this._angleConstraints : this._distanceConstraints;\n\n            if ( isObj ){\n\n                for ( i = 0, l = constraints.length; i < l; ++i ){\n\n                    if ( constraints[ i ] === cstrOrId ){\n\n                        constraints.splice( i, 1 );\n                        return this;\n                    }\n                }\n            } else {\n\n                for ( i = 0, l = constraints.length; i < l; ++i ){\n\n                    if ( constraints[ i ].id === cstrOrId ){\n\n                        constraints.splice( i, 1 );\n                        return this;\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /** internal\n         * VerletConstraintsBehavior#resolveAngleConstraints( coef )\n         * - coef (Number): Coefficient for this resolution phase\n         *\n         * Resolve angle constraints.\n         **/\n        resolveAngleConstraints: function( coef ){\n\n            var constraints = this._angleConstraints\n                ,scratch = Physics.scratchpad()\n                ,trans = scratch.transform()\n                ,con\n                ,ang\n                ,corr\n                ,proportion\n                ,invMassSum\n                ;\n\n            for ( var i = 0, l = constraints.length; i < l; ++i ){\n\n                con = constraints[ i ];\n\n                ang = con.bodyB.state.pos.angle2( con.bodyA.state.pos, con.bodyC.state.pos );\n                corr = ang - con.targetAngle;\n\n                if (!corr){\n\n                    continue;\n\n                } else if (corr <= -Math.PI){\n\n                    corr += TWOPI;\n\n                } else if (corr >= Math.PI){\n\n                    corr -= TWOPI;\n                }\n\n                trans.setTranslation( con.bodyB.state.pos );\n\n                corr *= -coef * con.stiffness;\n\n                if ( con.bodyA.treatment === 'dynamic' && con.bodyB.treatment === 'dynamic' && con.bodyC.treatment === 'dynamic' ){\n                    invMassSum = 1 / (con.bodyA.mass + con.bodyB.mass + con.bodyC.mass);\n                }\n\n                if ( con.bodyA.treatment === 'dynamic' ){\n\n                    if ( con.bodyB.treatment === 'dynamic' && con.bodyC.treatment === 'dynamic' ){\n\n                        ang = corr * (con.bodyB.mass + con.bodyC.mass) * invMassSum;\n\n                    } else if ( con.bodyB.treatment !== 'dynamic' ){\n\n                        ang = corr * con.bodyC.mass / ( con.bodyC.mass + con.bodyA.mass );\n\n                    } else {\n\n                        ang = corr * con.bodyB.mass / ( con.bodyB.mass + con.bodyA.mass );\n                    }\n\n\n                    trans.setRotation( ang );\n                    con.bodyA.state.pos.translateInv( trans );\n                    con.bodyA.state.pos.rotate( trans );\n                    con.bodyA.state.pos.translate( trans );\n                }\n\n                if ( con.bodyC.treatment === 'dynamic' ){\n\n                    if ( con.bodyA.treatment === 'dynamic' && con.bodyB.treatment === 'dynamic' ){\n\n                        ang = -corr * (con.bodyB.mass + con.bodyA.mass) * invMassSum;\n\n                    } else if ( con.bodyB.treatment !== 'dynamic' ){\n\n                        ang = -corr * con.bodyA.mass / ( con.bodyC.mass + con.bodyA.mass );\n\n                    } else {\n\n                        ang = -corr * con.bodyB.mass / ( con.bodyB.mass + con.bodyC.mass );\n                    }\n\n                    trans.setRotation( ang );\n                    con.bodyC.state.pos.translateInv( trans );\n                    con.bodyC.state.pos.rotate( trans );\n                    con.bodyC.state.pos.translate( trans );\n                }\n\n                if ( con.bodyB.treatment === 'dynamic' ){\n\n                    if ( con.bodyA.treatment === 'dynamic' && con.bodyC.treatment === 'dynamic' ){\n\n                        ang = corr * (con.bodyA.mass + con.bodyC.mass) * invMassSum;\n\n                    } else if ( con.bodyA.treatment !== 'dynamic' ){\n\n                        ang = corr * con.bodyC.mass / ( con.bodyC.mass + con.bodyB.mass );\n\n                    } else {\n\n                        ang = corr * con.bodyA.mass / ( con.bodyA.mass + con.bodyC.mass );\n                    }\n\n                    // ang = corr;\n\n                    trans.setRotation( ang ).setTranslation( con.bodyA.state.pos );\n                    con.bodyB.state.pos.translateInv( trans );\n                    con.bodyB.state.pos.rotate( trans );\n                    con.bodyB.state.pos.translate( trans );\n\n                    trans.setTranslation( con.bodyC.state.pos );\n                    con.bodyB.state.pos.translateInv( trans );\n                    con.bodyB.state.pos.rotateInv( trans );\n                    con.bodyB.state.pos.translate( trans );\n                }\n\n                con.bodyA.sleepCheck();\n                con.bodyB.sleepCheck();\n                con.bodyC.sleepCheck();\n            }\n\n            scratch.done();\n        },\n\n        /** internal\n         * VerletConstraintsBehavior#resolveDistanceConstraints( coef )\n         * - coef (Number): Coefficient for this resolution phase\n         *\n         * Resolve distance constraints.\n         **/\n        resolveDistanceConstraints: function( coef ){\n\n            var constraints = this._distanceConstraints\n                ,scratch = Physics.scratchpad()\n                ,BA = scratch.vector()\n                ,con\n                ,len\n                ,corr\n                ,proportion\n                ;\n\n            for ( var i = 0, l = constraints.length; i < l; ++i ){\n\n                con = constraints[ i ];\n\n                // move constrained bodies to target length based on their\n                // mass proportions\n                BA.clone( con.bodyB.state.pos ).vsub( con.bodyA.state.pos );\n                len = BA.normSq() || Math.random() * 0.0001;\n                corr = coef * con.stiffness * ( len - con.targetLengthSq ) / len;\n\n                BA.mult( corr );\n                proportion = (con.bodyA.treatment !== 'dynamic' || con.bodyB.treatment !== 'dynamic') ? 1 : con.bodyB.mass / (con.bodyA.mass + con.bodyB.mass);\n\n                if ( con.bodyA.treatment === 'dynamic' ){\n\n                    if ( con.bodyB.treatment === 'dynamic' ){\n                        BA.mult( proportion );\n                    }\n\n                    con.bodyA.state.pos.vadd( BA );\n\n                    if ( con.bodyB.treatment === 'dynamic' ){\n                        BA.mult( 1 / proportion );\n                    }\n                }\n\n                if ( con.bodyB.treatment === 'dynamic' ){\n\n                    if ( con.bodyA.treatment === 'dynamic' ){\n                        BA.mult( 1 - proportion );\n                    }\n\n                    con.bodyB.state.pos.vsub( BA );\n                }\n\n                con.bodyA.sleepCheck();\n                con.bodyB.sleepCheck();\n            }\n\n            scratch.done();\n        },\n\n        /** internal\n         * VerletConstraintsBehavior#shuffleConstraints()\n         *\n         * Mix up the constraints.\n         **/\n        shuffleConstraints: function(){\n\n            this._distanceConstraints = Physics.util.shuffle( this._distanceConstraints );\n            this._angleConstraints = Physics.util.shuffle( this._angleConstraints );\n        },\n\n        /** internal\n         * VerletConstraintsBehavior#resolve()\n         *\n         * Resolve all constraints.\n         **/\n        resolve: function(){\n\n            var its = this.options.iterations\n                ,coef = 1 / its\n                ;\n\n            for (var i = 0; i < its; i++){\n\n                // this.shuffleConstraints();\n                this.resolveDistanceConstraints( coef );\n                this.resolveAngleConstraints( coef );\n            }\n        },\n\n        /**\n         * VerletConstraintsBehavior#getConstraints() -> Object\n         * + (Object): The object containing copied arrays of the constraints\n         *\n         * Get all constraints.\n         **/\n        getConstraints: function(){\n\n            return {\n                distanceConstraints: [].concat(this._distanceConstraints),\n                angleConstraints: [].concat(this._angleConstraints)\n            };\n        }\n    };\n});\n\n\n// ---\n// inside: src/integrators/improved-euler.js\n\nPhysics.integrator('improved-euler', function( parent ){\n\n    return {\n        /**\n         * class ImprovedEuler < Integrator\n         *\n         * `Physics.integrator('improved-euler')`.\n         *\n         * The improved euler integrator.\n         **/\n\n        // extended\n        init: function( options ){\n\n            // call parent init\n            parent.init.call(this, options);\n        },\n\n        // extended\n        integrateVelocities: function( bodies, dt ){\n\n            // half the timestep squared\n            var drag = 1 - this.options.drag\n                ,body = null\n                ,state\n                ;\n\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                body = bodies[ i ];\n                state = body.state;\n\n                // only integrate if the body isn't fixed\n                if ( body.treatment !== 'static' && !body.sleep( dt ) ){\n\n                    // Inspired from https://github.com/soulwire/Coffee-Physics\n                    // @licence MIT\n                    //\n                    // x += (v * dt) + (a * 0.5 * dt * dt)\n                    // v += a * dt\n\n\n                    // Scale force to mass.\n                    // state.acc.mult( body.massInv );\n\n                    // Remember velocity for future use.\n                    state.old.vel.clone( state.vel );\n\n                    // remember original acc\n                    state.old.acc.clone( state.acc );\n\n                    // Update velocity first so we can reuse the acc vector.\n                    // a *= dt\n                    // v += a ...\n                    state.vel.vadd( state.acc.mult( dt ) );\n\n                    // Apply \"air resistance\".\n                    if ( drag ){\n\n                        state.vel.mult( drag );\n                    }\n\n                    // Reset accel\n                    state.acc.zero();\n\n                    //\n                    // Angular components\n                    //\n\n                    state.old.angular.vel = state.angular.vel;\n                    state.angular.vel += state.angular.acc * dt;\n                    state.angular.acc = 0;\n\n                } else {\n                    // set the velocity and acceleration to zero!\n                    state.vel.zero();\n                    state.acc.zero();\n                    state.angular.vel = 0;\n                    state.angular.acc = 0;\n                }\n            }\n        },\n\n        // extended\n        integratePositions: function( bodies, dt ){\n\n            // half the timestep squared\n            var halfdtdt = 0.5 * dt * dt\n                ,body = null\n                ,state\n                // use cached vector instances\n                // so we don't need to recreate them in a loop\n                ,scratch = Physics.scratchpad()\n                ,vel = scratch.vector()\n                ,angVel\n                ;\n\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                body = bodies[ i ];\n                state = body.state;\n\n                // only integrate if the body isn't fixed\n                if ( body.treatment !== 'static' && !body.sleep() ){\n\n\n                    // Store previous location.\n                    state.old.pos.clone( state.pos );\n\n                    // Update position.\n                    // ...\n                    // oldV *= dt\n                    // a *= 0.5 * dt\n                    // x += oldV + a\n                    vel.clone( state.old.vel );\n                    state.pos.vadd( vel.mult( dt ) ).vadd( state.old.acc.mult( halfdtdt ) );\n\n                    state.old.acc.zero();\n\n                    //\n                    // Angular components\n                    //\n\n                    state.old.angular.pos = state.angular.pos;\n                    state.angular.pos += state.old.angular.vel * dt + state.old.angular.acc * halfdtdt;\n                    state.old.angular.acc = 0;\n\n                }\n            }\n\n            scratch.done();\n        }\n    };\n});\n\n\n// ---\n// inside: src/integrators/velocity-verlet-alt.js\n\nPhysics.integrator('velocity-verlet-alt', function( parent ){\n\n    // for this integrator we need to know if the object has been integrated before\n    // so let's add a mixin to bodies\n\n    Physics.body.mixin({\n\n        started: function( val ){\n            if ( val !== undefined ){\n                this._started = true;\n            }\n\n            return !!this._started;\n        }\n    });\n\n\n    return {\n        /**\n         * class VelocityVerlet < Integrator\n         *\n         * `Physics.integrator('velocity-verlet')`.\n         *\n         * The velocity-verlet integrator.\n         **/\n\n        // extended\n        init: function( options ){\n\n            // call parent init\n            parent.init.call(this, options);\n        },\n\n        // extended\n        integrateVelocities: function( bodies, dt ){\n\n            // half the timestep\n            var dtdt = dt * dt\n                ,drag = 1 - this.options.drag\n                ,body = null\n                ,state\n                ;\n\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                body = bodies[ i ];\n                state = body.state;\n\n                // only integrate if the body isn't static\n                if ( body.treatment !== 'static' ){\n\n                    // v = v_prev + 0.5 * (a_prev + a) * dt\n                    // x = x_prev + v_prev * dt + 0.5 * a_prev * dt * dt\n\n                    // use the velocity in vel if the velocity has been changed manually\n                    if ( !body.started() ){\n\n                        // Set old vals on first integration\n                        state.old.acc.clone( state.acc );\n                        state.old.acc.mult( dt );\n                        state.old.vel.clone( state.vel ).vsub( state.old.acc );\n                        state.old.acc.mult( 1/dt );\n                    }\n\n                    // Apply \"air resistance\".\n                    if ( drag ){\n\n                        state.vel.mult( drag );\n                    }\n\n                    // Apply acceleration\n                    // v += 0.5 * (a_prev + a) * dt\n                    state.vel.vadd( state.old.acc.vadd( state.acc ).mult( 0.5 * dt ) );\n\n                    // Reset accel\n                    // state.acc.zero();\n\n                    //\n                    // Angular components\n                    //\n\n                    if ( !body.started() ){\n\n                        // Set old vals on first integration\n                        state.old.angular.acc = state.angular.acc;\n                        state.old.angular.vel = state.angular.vel - state.old.angular.acc * dt;\n                    }\n\n                    state.angular.vel += 0.5 * (state.angular.acc + state.old.angular.acc) * dt;\n                    state.angular.acc = 0;\n\n                    body.started( true );\n\n                } else {\n                    // set the velocity and acceleration to zero!\n                    state.vel.zero();\n                    state.acc.zero();\n                    state.angular.vel = 0;\n                    state.angular.acc = 0;\n                }\n            }\n        },\n\n        // extended\n        integratePositions: function( bodies, dt ){\n\n            // half the timestep\n            var dtdt = dt * dt\n                ,body = null\n                ,state\n                ;\n\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                body = bodies[ i ];\n                state = body.state;\n\n                // only integrate if the body isn't static\n                if ( body.treatment !== 'static' ){\n\n                    // x = x_prev + v_prev * dt + 0.5 * a_prev * dt * dt\n\n                    // Store old position.\n                    // xold = x\n                    state.old.pos.clone( state.pos );\n\n                    state.old.vel.mult( dt );\n                    state.old.acc.mult( 0.5 * dtdt );\n                    state.pos.vadd( state.old.vel ).vadd( state.old.acc );\n\n                    // store calculated velocity\n                    state.old.vel.clone( state.vel );\n\n                    // store old acc\n                    state.old.acc.clone( state.acc );\n\n                    // Reset accel\n                    state.acc.zero();\n\n                    //\n                    // Angular components\n                    //\n                    state.old.angular.pos = state.angular.pos;\n\n                    state.angular.pos += state.angular.vel * dt + 0.5 * state.old.angular.acc * dtdt;\n                    state.old.angular.vel = state.angular.vel;\n                    state.old.angular.acc = state.angular.acc;\n                    state.angular.acc = 0;\n                }\n            }\n        }\n    };\n});\n\n\n// ---\n// inside: src/integrators/velocity-verlet.js\n\nPhysics.integrator('velocity-verlet', function( parent ){\n\n    // for this integrator we need to know if the object has been integrated before\n    // so let's add a mixin to bodies\n\n    Physics.body.mixin({\n\n        started: function( val ){\n            if ( val !== undefined ){\n                this._started = true;\n            }\n\n            return !!this._started;\n        }\n    });\n\n\n    return {\n        /**\n         * class VelocityVerlet < Integrator\n         *\n         * `Physics.integrator('velocity-verlet')`.\n         *\n         * The velocity-verlet integrator.\n         **/\n\n        // extended\n        init: function( options ){\n\n            // call parent init\n            parent.init.call(this, options);\n        },\n\n        /**\n         * Integrator#integrate( bodies, dt ) -> this\n         * - bodies (Array): List of bodies to integrate\n         * - dt (Number): Timestep size\n         *\n         * Integrate bodies by timestep.\n         *\n         * Will emit `integrate:velocities` and `integrate:positions`\n         * events on the world.\n         **/\n        integrate: function( bodies, dt ){\n\n            var world = this._world;\n\n            this.integratePositions( bodies, dt );\n\n            if ( world ){\n                world.emit('integrate:positions', {\n                    bodies: bodies,\n                    dt: dt\n                });\n            }\n\n            this.integrateVelocities( bodies, dt );\n\n            if ( world ){\n                world.emit('integrate:velocities', {\n                    bodies: bodies,\n                    dt: dt\n                });\n            }\n\n            return this;\n        },\n\n        // extended\n        integrateVelocities: function( bodies, dt ){\n\n            // half the timestep\n            var dtdt = dt * dt\n                ,drag = 1 - this.options.drag\n                ,body = null\n                ,state\n                ;\n\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                body = bodies[ i ];\n                state = body.state;\n\n                // only integrate if the body isn't static\n                if ( body.treatment !== 'static' && !body.sleep() ){\n\n                    // v = v_prev + 0.5 * (a_prev + a) * dt\n                    // x = x_prev + v_prev * dt + 0.5 * a_prev * dt * dt\n\n                    // Apply \"air resistance\".\n                    if ( drag ){\n\n                        state.vel.mult( drag );\n                    }\n\n                    // Apply acceleration\n                    // v += 0.5 * (a_prev + a) * dt\n                    state.old.vel.clone( state.vel );\n                    state.vel.vadd( state.old.acc.vadd( state.acc ).mult( 0.5 * dt ) );\n\n                    // Reset accel\n                    state.old.acc.clone( state.acc );\n                    state.acc.zero();\n\n                    //\n                    // Angular components\n                    //\n\n                    state.old.angular.vel = state.angular.vel;\n                    state.old.angular.acc = state.angular.acc;\n\n                    state.angular.vel += 0.5 * (state.angular.acc + state.old.angular.acc) * dt;\n\n                    state.angular.acc = 0;\n\n                    body.started( true );\n\n                } else {\n                    // set the velocity and acceleration to zero!\n                    state.vel.zero();\n                    state.acc.zero();\n                    state.angular.vel = 0;\n                    state.angular.acc = 0;\n                }\n            }\n        },\n\n        // extended\n        integratePositions: function( bodies, dt ){\n\n            // half the timestep\n            var dtdt = dt * dt\n                ,body = null\n                ,state\n                ;\n\n            for ( var i = 0, l = bodies.length; i < l; ++i ){\n\n                body = bodies[ i ];\n                state = body.state;\n\n                // only integrate if the body isn't static\n                if ( body.treatment !== 'static' && !body.sleep( dt ) ){\n\n                    // x = x_prev + v_prev * dt + 0.5 * a_prev * dt * dt\n\n                    // use the velocity in vel if the velocity has been changed manually\n                    if ( !body.started() ){\n\n                        // Set old vals on first integration\n                        state.old.acc.clone( state.acc );\n                        state.old.acc.mult( dt );\n                        state.old.vel.clone( state.vel ).vsub( state.old.acc );\n                        state.old.acc.mult( 1/dt );\n                    }\n\n                    // Store old position.\n                    // xold = x\n                    state.old.pos.clone( state.pos );\n\n                    state.old.vel.mult( dt );\n                    state.old.acc.mult( 0.5 * dtdt );\n                    state.pos.vadd( state.old.vel ).vadd( state.old.acc );\n\n                    // revert\n                    state.old.vel.mult( 1/dt );\n                    state.old.acc.mult( 2 / dtdt );\n\n                    //\n                    // Angular components\n                    //\n\n                    if ( !body.started() ){\n\n                        // Set old vals on first integration\n                        state.old.angular.acc = state.angular.acc;\n                        state.old.angular.vel = state.angular.vel - state.old.angular.acc * dt;\n                    }\n\n                    state.old.angular.pos = state.angular.pos;\n\n                    state.angular.pos += state.angular.vel * dt + 0.5 * state.old.angular.acc * dtdt;\n                }\n            }\n        }\n    };\n});\n\n\n// ---\n// inside: src/renderers/canvas.js\n\n/**\n * class CanvasRenderer < Renderer\n *\n * Physics.renderer('canvas')\n *\n * Renderer that uses HTMLCanvas to render the world bodies.\n *\n * Additional config options:\n *\n * - metaEl: HTMLElement to write meta information like FPS and IPF into. (default: autogenerated)\n * - offset: Offset the shapes by this amount. (default: `{ x: 0, y: 0 }`)\n * - styles: Styles to use to draw the shapes. (see below)\n *\n * The styles property should contain _default_ styles for each shape you want to draw.\n *\n * Example:\n *\n * ```javascript\n * styles: {\n *\n *    'circle' : {\n *        strokeStyle: '#542437',\n *        lineWidth: 1,\n *        fillStyle: '#542437',\n *        angleIndicator: 'white'\n *    },\n *\n *    'convex-polygon' : {\n *        strokeStyle: '#542437',\n *        lineWidth: 1,\n *        fillStyle: '#542437',\n *        angleIndicator: 'white'\n *    }\n * }\n * ```\n *\n * Styles can also be defined on a per-body basis. Use the \"styles\" property for a body:\n *\n * Example:\n *\n * ```javascript\n * Physics.body('circle', {\n *     // ...\n *     styles: {\n *        strokeStyle: '#542437',\n *        lineWidth: 1,\n *        fillStyle: '#542437',\n *        angleIndicator: 'white'\n *    }\n * });\n * ```\n *\n * You can also define an image to use for a body:\n *\n * Example:\n *\n * ```javascript\n * Physics.body('circle', {\n *     // ...\n *     styles: {\n *        src: 'path/to/image.jpg',\n *        width: 40,\n *        height: 50\n *    }\n * });\n * ```\n **/\nPhysics.renderer('canvas', function( proto ){\n\n    if ( !document ){\n        // must be in node environment\n        return {};\n    }\n\n    var Pi2 = Math.PI * 2\n        // helper to create new dom elements\n        ,newEl = function( node, content ){\n            var el = document.createElement(node || 'div');\n            if (content){\n                el.innerHTML = content;\n            }\n            return el;\n        }\n        ,colors = {\n            white: '#fff'\n            ,violet: '#542437'\n            ,blue: '#53777A'\n        }\n        ;\n\n    var defaults = {\n\n        // the element to place meta data into\n        metaEl: null,\n        // default styles of drawn objects\n        styles: {\n\n            'point': colors.blue,\n\n            'circle' : {\n                strokeStyle: colors.blue,\n                lineWidth: 1,\n                fillStyle: colors.blue,\n                angleIndicator: colors.white\n            },\n\n            'rectangle' : {\n                strokeStyle: colors.violet,\n                lineWidth: 1,\n                fillStyle: colors.violet,\n                angleIndicator: colors.white\n            },\n\n            'convex-polygon' : {\n                strokeStyle: colors.violet,\n                lineWidth: 1,\n                fillStyle: colors.violet,\n                angleIndicator: colors.white\n            }\n        },\n        offset: { x: 0, y: 0 }\n    };\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            var self = this;\n\n            // call proto init\n            proto.init.call(this, options);\n\n            // further options\n            this.options.defaults( defaults, true );\n            this.options.onChange(function(){\n                self.options.offset = new Physics.vector( self.options.offset );\n            });\n            this.options( options, true );\n\n            // hidden canvas\n            this.hiddenCanvas = document.createElement('canvas');\n            this.hiddenCanvas.width = this.hiddenCanvas.height = 100;\n\n            if (!this.hiddenCanvas.getContext){\n                throw \"Canvas not supported\";\n            }\n\n            this.hiddenCtx = this.hiddenCanvas.getContext('2d');\n\n            // actual viewport\n            var viewport = this.el;\n            if (viewport.nodeName.toUpperCase() !== 'CANVAS'){\n\n                viewport = document.createElement('canvas');\n                this.el.appendChild( viewport );\n                if (typeof this.options.el === 'string' && this.el === document.body){\n                    viewport.id = this.options.el;\n                }\n                this.el = viewport;\n            }\n\n            this.container = this.el.parentNode;\n            this.ctx = viewport.getContext('2d');\n\n            this.els = {};\n\n            if (this.options.meta){\n                var stats = this.options.metaEl || newEl();\n                stats.className = 'pjs-meta';\n                this.els.fps = newEl('span');\n                this.els.ipf = newEl('span');\n                stats.appendChild(newEl('span', 'fps: '));\n                stats.appendChild(this.els.fps);\n                stats.appendChild(newEl('br'));\n                stats.appendChild(newEl('span', 'ipf: '));\n                stats.appendChild(this.els.ipf);\n\n                viewport.parentNode.insertBefore(stats, viewport);\n            }\n\n            this._layers = {};\n            this.addLayer( 'main', this.el );\n\n            if ( this.options.autoResize ){\n                this.resize();\n            } else {\n                this.resize( this.options.width, this.options.height );\n            }\n        },\n\n        /**\n         * CanvasRenderer#layer( id ) -> Layer\n         * - id (String): The id for the layer\n         *\n         * Get the layer by id.\n         **/\n        layer: function( id ){\n\n            if ( id in this._layers ){\n                return this._layers[ id ];\n            }\n\n            return null;\n        },\n\n        /**\n         * CanvasRenderer#addLayer( id[, el, opts ] ) -> Layer\n         * - id (String): The id for the layer\n         * - el (HTMLElement): The canvas element to use for this layer\n         * - opts (Object): The options for this layer (see below)\n         *\n         * Create a new layer.\n         *\n         * Layers can have the following options:\n         *\n         * - width: The width\n         * - height: The height\n         * - manual: Draw manually (default: `false`)\n         * - autoResize: Automatically resize the layer when the renderer's [[CanvasRenderer#resize]] method is called. (default: `true`)\n         * - follow: A [[Body]]. Offset this layer's rendering to follow a body's position. (default: `null`)\n         * - offset: The offset [[Vectorish]] for this layer. (default: `null`)\n         * - scale: Scale the layer by this amount. (default: `1`)\n         * - zIndex: The zIndex for the layer's HTMLElement. (default: `1`)\n         **/\n        addLayer: function( id, el, opts ){\n\n            /** belongs to: CanvasRenderer\n             * class Layer\n             *\n             * A rendering layer for the canvas renderer.\n             *\n             * Create by calling [[CanvasRenderer#addLayer]].\n             **/\n\n            var self = this\n                ,bodies = []\n                ,styles = Physics.util.extend({}, this.options.styles)\n                ,layer = {\n                    /**\n                     * Layer#id = String\n                     *\n                     * The layer's ID\n                     **/\n                    id: id\n                    /**\n                     * Layer#el = HTMLElement\n                     *\n                     * The layer's Canvas\n                     **/\n                    ,el: el || document.createElement('canvas')\n                    /** related to: Physics.util.options\n                      * Layer#options( options ) -> Object\n                      * - options (Object): The options to set as an object\n                      * + (Object): The options\n                      *\n                      * Set options on this layer.\n                      *\n                      * Access options directly from the options object.\n                      *\n                      * Example:\n                      *\n                      * ```javascript\n                      * this.options.someOption;\n                      * ```\n                      **/\n                    ,options: Physics.util.options({\n                        width: this.el.width\n                        ,height: this.el.height\n                        ,manual: false\n                        ,autoResize: true\n                        ,follow: null\n                        ,offset: null\n                        ,scale: 1\n                        ,zIndex: 1\n                    })( opts )\n                }\n                ;\n\n            if ( id in this._layers ){\n                throw 'Layer \"' + id + '\" already added.';\n            }\n\n            this.el.parentNode.insertBefore( layer.el, this.el );\n            layer.el.style.position = 'absolute';\n            layer.el.style.zIndex = layer.options.zIndex;\n            layer.el.className += ' pjs-layer-' + layer.id;\n            layer.ctx = layer.el.getContext('2d');\n            layer.ctx.scale( 1, 1 );\n            layer.el.width = layer.options.width;\n            layer.el.height = layer.options.height;\n\n            /**\n             * Layer#bodies = Array\n             *\n             * The Bodies this layer is rendering.\n             *\n             * The \"main\" layer will render all world bodies if it's empty.\n             **/\n            layer.bodies = bodies;\n\n            /**\n             * Layer#reset( [arr] ) -> this\n             * - arr (Array): Array to replace the current stack of Bodies.\n             *\n             * Reset the stack.\n             **/\n            layer.reset = function( arr ){\n\n                bodies = arr || [];\n                return layer;\n            };\n\n            /**\n             * Layer#addToStack( arr ) -> this\n             * Layer#addToStack( body ) -> this\n             * - body (Body): Body to add\n             * - arr (Array): Array of bodies to add\n             *\n             * Add body (bodies) to the rendering stack for this layer.\n             *\n             * Bodies must be added to the stack in order to be rendered by this layer UNLESS it is the \"main\" layer.\n             **/\n            layer.addToStack = function( thing ){\n\n                if ( Physics.util.isArray( thing ) ){\n                    bodies.push.apply( bodies, thing );\n                } else {\n                    bodies.push( thing );\n                }\n                return layer;\n            };\n\n            /**\n             * Layer#removeFromStack( arr ) -> this\n             * Layer#removeFromStack( body ) -> this\n             * - body (Body): Body to remove\n             * - arr (Array): Array of bodies to remove\n             *\n             * Remove body (bodies) from the rendering stack for this layer.\n             **/\n            layer.removeFromStack = function( thing ){\n\n                var i, l;\n\n                if ( Physics.util.isArray( thing ) ){\n                    for ( i = 0, l = thing.length; i < l; ++i ){\n                        layer.removeFromStack(thing[ i ]);\n                    }\n                } else {\n                    i = Physics.util.indexOf( bodies, thing );\n                    if ( i > -1 ){\n                        bodies.splice( i, 1 );\n                    }\n                }\n                return layer;\n            };\n\n            /**\n             * Layer#render( [clear] ) -> this\n             * - clear (Boolean): Clear the canvas (default: `true`)\n             *\n             * Render the bodies in this layer's stack.\n             *\n             * If you want you can replace this function with your own to do custom rendering.\n             *\n             * Example:\n             *\n             * ```javascript\n             * layer.render = myCustomRenderFn;\n             * ```\n             **/\n            layer.render = function( clear ){\n\n                var body\n                    ,scratch = Physics.scratchpad()\n                    ,offset = scratch.vector().set(0, 0)\n                    ,scale = layer.options.scale\n                    ,view\n                    ,i\n                    ,l = bodies.length\n                    ,t = self._interpolateTime\n                    ,stack = (l || layer.id !== 'main') ? bodies : self._world._bodies\n                    ;\n\n                if ( layer.options.manual ){\n                    scratch.done();\n                    return layer;\n                }\n\n                if ( layer.options.offset ){\n                    if ( layer.options.offset === 'center' ){\n                        offset.add( layer.el.width * 0.5, layer.el.height * 0.5 ).mult( 1/scale );\n                    } else {\n                        offset.vadd( layer.options.offset ).mult( 1/scale );\n                    }\n                }\n\n                if ( layer.options.follow ){\n                    offset.vsub( layer.options.follow.state.pos );\n                    offset.sub( layer.options.follow.state.vel.get(0)*t, layer.options.follow.state.vel.get(1)*t );\n                }\n\n                if ( clear !== false ){\n                    layer.ctx.clearRect(0, 0, layer.el.width, layer.el.height);\n                }\n\n                if ( scale !== 1 ){\n                    layer.ctx.save();\n                    layer.ctx.scale( scale, scale );\n                }\n\n                for ( i = 0, l = stack.length; i < l; ++i ){\n\n                    body = stack[ i ];\n                    if ( !body.hidden ){\n                        view = body.view || ( body.view = self.createView(body.geometry, body.styles || styles[ body.geometry.name ]) );\n                        self.drawBody( body, body.view, layer.ctx, offset );\n                    }\n                }\n\n                if ( scale !== 1 ){\n                    layer.ctx.restore();\n                }\n\n                scratch.done();\n                return layer;\n            };\n\n            // remember layer\n            this._layers[ id ] = layer;\n\n            return layer;\n        },\n\n        /**\n         * CanvasRenderer#removeLayer( id ) -> this\n         * CanvasRenderer#removeLayer( layer ) -> this\n         * - id (String): The id for the layer\n         * - layer (Layer): The layer\n         *\n         * Remove a layer.\n         **/\n        removeLayer: function( idOrLayer ){\n\n            var id = idOrLayer.id ? idOrLayer.id : idOrLayer\n                ,el = this._layers[ id ].el\n                ;\n\n            if ( el !== this.el ){\n                el.parentNode.removeChild( el );\n            }\n            delete this._layers[ id ];\n            return this;\n        },\n\n        /**\n         * CanvasRenderer#resize( width, height ) -> this\n         * - width (Number): The width\n         * - height (Number): The height\n         *\n         * Resize all layer canvases that have the `autoResize` option set to `true`.\n         **/\n        resize: function( width, height ){\n\n            var layer;\n            proto.resize.call( this, width, height );\n\n            for ( var id in this._layers ){\n\n                layer = this._layers[ id ];\n                if ( layer.options.autoResize ){\n                    layer.el.width = this.width;\n                    layer.el.height = this.height;\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * CanvasRenderer#setStyle( styles[, ctx] )\n         * - styles (Object|String): Styles to set on the canvas context\n         * - ctx (Canvas2DContext): The canvas context\n         *\n         * Set styles on the specified canvas context (or main context).\n         **/\n        setStyle: function( styles, ctx ){\n\n            ctx = ctx || this.ctx;\n\n            if ( Physics.util.isObject(styles) ){\n\n                styles.strokeStyle = styles.lineWidth ? styles.strokeStyle : 'rgba(0,0,0,0)';\n                Physics.util.extend(ctx, styles);\n\n            } else {\n\n                ctx.fillStyle = ctx.strokeStyle = styles;\n                ctx.lineWidth = 1;\n            }\n        },\n\n        /**\n         * CanvasRenderer#drawCircle( x, y, r, styles[, ctx] )\n         * - x (Number): The x coord\n         * - y (Number): The y coord\n         * - r (Number): The circle radius\n         * - styles (Object): The styles configuration\n         * - ctx (Canvas2DContext): The canvas context\n         *\n         * Draw a circle to specified canvas context.\n         **/\n        drawCircle: function(x, y, r, styles, ctx){\n\n            ctx = ctx || this.ctx;\n\n            ctx.beginPath();\n            this.setStyle( styles, ctx );\n            ctx.arc(x, y, r, 0, Pi2, false);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.fill();\n        },\n\n        /**\n         * CanvasRenderer#drawPolygon( verts, styles[, ctx] )\n         * - verts (Array): Array of [[Vectorish]] vertices\n         * - styles (Object): The styles configuration\n         * - ctx (Canvas2DContext): The canvas context\n         *\n         * Draw a polygon to specified canvas context.\n         **/\n        drawPolygon: function(verts, styles, ctx){\n\n            var vert = verts[0]\n                ,x = vert.x\n                ,y = vert.y\n                ,l = verts.length\n                ;\n\n            ctx = ctx || this.ctx;\n            ctx.beginPath();\n            this.setStyle( styles, ctx );\n\n            ctx.moveTo(x, y);\n\n            for ( var i = 1; i < l; ++i ){\n\n                vert = verts[ i ];\n                x = vert.x;\n                y = vert.y;\n                ctx.lineTo(x, y);\n            }\n\n            if ( l > 2 ){\n                ctx.closePath();\n            }\n\n            ctx.stroke();\n            ctx.fill();\n        },\n\n        /**\n         * CanvasRenderer#drawRect( x, y, width, height, styles[, ctx] )\n         * - x (Number): The x coord\n         * - y (Number): The y coord\n         * - width (Number): The width\n         * - height (Number): The height\n         * - styles (Object): The styles configuration\n         * - ctx (Canvas2DContext): The canvas context\n         *\n         * Draw a rectangle to specified canvas context.\n         **/\n        drawRect: function(x, y, width, height, styles, ctx){\n\n            var hw = width * 0.5\n                ,hh = height * 0.5\n                ;\n\n            ctx = ctx || this.ctx;\n            this.setStyle( styles, ctx );\n            ctx.beginPath();\n            ctx.rect(x - hw, y - hh, width, height);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.fill();\n        },\n\n        /**\n         * CanvasRenderer#drawLine( from, to, styles[, ctx] )\n         * - from (Vectorish): The starting pt\n         * - to (Vectorish): The ending pt\n         * - styles (Object): The styles configuration\n         * - ctx (Canvas2DContext): The canvas context\n         *\n         * Draw a line onto specified canvas context.\n         **/\n        drawLine: function(from, to, styles, ctx){\n\n            var x = from.x\n                ,y = from.y\n                ;\n\n            ctx = ctx || this.ctx;\n\n            ctx.beginPath();\n            this.setStyle( styles, ctx );\n\n            ctx.moveTo(x, y);\n\n            x = to.x;\n            y = to.y;\n\n            ctx.lineTo(x, y);\n\n            ctx.stroke();\n            ctx.fill();\n        },\n\n        /**\n         * CanvasRenderer#draw( geometry[, styles, ctx, offset] ) -> this\n         * - geometry (Geometry): The shape to draw\n         * - styles (Object): The styles configuration\n         * - ctx (Canvas2DContext): The canvas context\n         * - offset (Vectorish): The offset from center\n         *\n         * Draw a geometry to a context.\n         **/\n        draw: function( geometry, styles, ctx, offset ){\n\n            var name = geometry.name\n                ,x = +(offset && offset.x)\n                ,y = +(offset && offset.y)\n                ,w = geometry.aabb().hw\n                ;\n\n            ctx = ctx || this.ctx;\n            styles = styles || this.options.styles[ name ] || this.options.styles.circle || {};\n\n            ctx.save();\n            ctx.translate(x, y);\n\n            if (name === 'circle'){\n\n                this.drawCircle(0, 0, geometry.radius, styles, ctx);\n\n            } else if (name === 'convex-polygon'){\n\n                this.drawPolygon(geometry.vertices, styles, ctx);\n\n            } else if (name === 'rectangle'){\n\n                this.drawRect(0, 0, geometry.width, geometry.height, styles, ctx);\n\n            } else if (name === 'compound'){\n\n                for ( var i = 0, l = geometry.children.length, ch; i < l; i++ ){\n                    ch = geometry.children[ i ];\n\n                    // translate\n                    ctx.translate(ch.pos.x, ch.pos.y);\n                    // rotate\n                    ctx.rotate(ch.angle);\n\n                    this.draw( ch.g, styles, ctx );\n\n                    // unrotate\n                    ctx.rotate(-ch.angle);\n                    // untranslate\n                    ctx.translate(-ch.pos.x, -ch.pos.y);\n                }\n\n            } else {\n\n                // assume it's a point\n                this.drawCircle(0, 0, 1, styles, ctx);\n            }\n\n            if (name !== 'compound' && styles.angleIndicator){\n\n                ctx.beginPath();\n                this.setStyle( styles.angleIndicator, ctx );\n                ctx.moveTo(0, 0);\n                ctx.lineTo(w, 0);\n                ctx.closePath();\n                ctx.stroke();\n            }\n\n            ctx.restore();\n\n            return this;\n        },\n\n        // extended\n        createView: function( geometry, styles ){\n\n            var view\n                ,aabb = geometry.aabb()\n                ,hw = aabb.hw + Math.abs(aabb.x)\n                ,hh = aabb.hh + Math.abs(aabb.y)\n                ,offset = { x: hw + 1, y: hh + 1 }\n                ,hiddenCtx = this.hiddenCtx\n                ,hiddenCanvas = this.hiddenCanvas\n                ;\n\n            styles = styles || this.options.styles[ name ] || this.options.styles.circle || {};\n\n            // must want an image\n            if ( styles.src ){\n                view = new Image();\n                view.src = styles.src;\n                if ( styles.width ){\n                    view.width = styles.width;\n                }\n                if ( styles.height ){\n                    view.height = styles.height;\n                }\n                return view;\n            }\n\n            offset.x += styles.lineWidth | 0;\n            offset.y += styles.lineWidth | 0;\n\n            // clear and resize\n            hiddenCanvas.width = 2 * hw + 2 + (2 * styles.lineWidth|0);\n            hiddenCanvas.height = 2 * hh + 2 + (2 * styles.lineWidth|0);\n\n            this.draw( geometry, styles, hiddenCtx, offset );\n\n            view = new Image( hiddenCanvas.width, hiddenCanvas.height );\n            view.src = hiddenCanvas.toDataURL('image/png');\n            return view;\n        },\n\n        // extended\n        drawMeta: function( meta ){\n\n            this.els.fps.innerHTML = meta.fps.toFixed(2);\n            this.els.ipf.innerHTML = meta.ipf;\n        },\n\n        // extended\n        drawBody: function( body, view, ctx, offset ){\n\n            var pos = body.state.pos\n                ,os = body.offset\n                ,v = body.state.vel\n                ,t = this._interpolateTime || 0\n                ,x\n                ,y\n                ,ang\n                ,aabb\n                ;\n\n            offset = offset || this.options.offset;\n            ctx = ctx || this.ctx;\n\n            // interpolate positions\n            x = pos._[0] + offset.x + v._[0] * t;\n            y = pos._[1] + offset.y + v._[1] * t;\n            ang = body.state.angular.pos + body.state.angular.vel * t;\n\n            ctx.save();\n            ctx.translate( x, y );\n            ctx.rotate( ang );\n            ctx.translate( os._[0], os._[1] );\n            ctx.drawImage(view, -view.width/2, -view.height/2, view.width, view.height);\n            ctx.restore();\n        },\n\n        // extended\n        render: function( bodies, meta ){\n\n            var body\n                ,view\n                ,pos\n                ;\n\n            this._world.emit('beforeRender', {\n                renderer: this,\n                meta: meta\n            });\n\n            if ( this.options.meta ) {\n                this.drawMeta( meta );\n            }\n\n            this._interpolateTime = meta.interpolateTime;\n\n            for ( var id in this._layers ){\n\n                this._layers[ id ].render();\n            }\n\n            return this;\n        }\n    };\n});\n\n\n// ---\n// inside: src/renderers/dom.js\n\n/**\n * class DomRenderer < Renderer\n *\n * Physics.renderer('dom')\n *\n * Renderer that manipulates DOM elements according to the physics simulation. Very primative...\n **/\nPhysics.renderer('dom', function( proto ){\n\n    if ( !document ){\n        // must be in node environment\n        return {};\n    }\n\n    // utility methods\n    var thePrefix = {}\n        ,tmpdiv = document.createElement(\"div\")\n        ,toTitleCase = function toTitleCase(str) {\n            return str.replace(/(?:^|\\s)\\w/g, function(match) {\n                return match.toUpperCase();\n            });\n        }\n        // return the prefixed name for the specified css property\n        ,pfx = function pfx(prop) {\n\n            if (thePrefix[prop]){\n                return thePrefix[prop];\n            }\n\n            var arrayOfPrefixes = ['Webkit', 'Moz', 'Ms', 'O']\n                ,name\n                ;\n\n            for (var i = 0, l = arrayOfPrefixes.length; i < l; ++i) {\n\n                name = arrayOfPrefixes[i] + toTitleCase(prop);\n\n                if (name in tmpdiv.style){\n                    return thePrefix[prop] = name;\n                }\n            }\n\n            if (name in tmpdiv.style){\n                return thePrefix[prop] = prop;\n            }\n\n            return false;\n        }\n        ;\n\n    var classpfx = 'pjs-'\n        ,px = 'px'\n        ,cssTransform = pfx('transform')\n        ,borderRadius = pfx('borderRadius')\n        ;\n\n    var newEl = function( node, content ){\n            var el = document.createElement(node || 'div');\n            if (content){\n                el.innerHTML = content;\n            }\n            return el;\n        }\n        ,drawBody\n        ;\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            // call proto init\n            proto.init.call(this, options);\n\n            var viewport = this.el;\n            viewport.style.position = 'relative';\n            viewport.style.overflow = 'hidden';\n            viewport.style[cssTransform] = 'translateZ(0)'; // force GPU accel\n            viewport.style.width = this.options.width + px;\n            viewport.style.height = this.options.height + px;\n\n            this.els = {};\n\n            if (options.meta){\n                var stats = newEl();\n                stats.className = 'pjs-meta';\n                this.els.fps = newEl('span');\n                this.els.ipf = newEl('span');\n                stats.appendChild(newEl('span', 'fps: '));\n                stats.appendChild(this.els.fps);\n                stats.appendChild(newEl('br'));\n                stats.appendChild(newEl('span', 'ipf: '));\n                stats.appendChild(this.els.ipf);\n\n                viewport.appendChild(stats);\n            }\n\n            if ( this.options.autoResize ){\n                this.resize();\n            } else {\n                this.resize( this.options.width, this.options.height );\n            }\n        },\n\n        // extended\n        resize: function( width, height ){\n\n            proto.resize.call( this, width, height );\n            this.el.style.width = this.width + px;\n            this.el.style.height = this.height + px;\n        },\n\n        /** internal\n         * DomRenderer#pointProperties( el, geometry )\n         * - el (HTMLElement): The element\n         * - geometry (Geometry): The body's geometry\n         *\n         * Set dom element style properties for a point.\n         **/\n        pointProperties: function( el, geometry ){\n\n            el.style.width = '2px';\n            el.style.height = '2px';\n            el.style.marginLeft = '-1px';\n            el.style.marginTop = '-1px';\n            el.style[ borderRadius ] = '50%';\n        },\n\n        /** internal\n         * DomRenderer#circleProperties( el, geometry )\n         * - el (HTMLElement): The element\n         * - geometry (Geometry): The body's geometry\n         *\n         * Set dom element style properties for a circle.\n         **/\n        circleProperties: function( el, geometry ){\n\n            var aabb = geometry.aabb();\n\n            el.style.width = (aabb.hw * 2) + px;\n            el.style.height = (aabb.hh * 2) + px;\n            el.style.marginLeft = (-aabb.hw) + px;\n            el.style.marginTop = (-aabb.hh) + px;\n            el.style[ borderRadius ] = '50%';\n        },\n\n        /** internal\n         * DomRenderer#rectangleProperties( el, geometry )\n         * - el (HTMLElement): The element\n         * - geometry (Geometry): The body's geometry\n         *\n         * Set dom element style properties for a rectangle.\n         **/\n        rectangleProperties: function( el, geometry ){\n\n            var aabb = geometry.aabb();\n\n            el.style.width = (aabb.hw * 2) + px;\n            el.style.height = (aabb.hh * 2) + px;\n            el.style.marginLeft = (-aabb.hw) + px;\n            el.style.marginTop = (-aabb.hh) + px;\n        },\n\n        // extended\n        createView: function( geometry ){\n\n            var el = newEl()\n                ,chel\n                ,fn = geometry.name + 'Properties'\n                ;\n\n            el.className = classpfx + geometry.name;\n            el.style.position = 'absolute';\n            el.style.top = '0px';\n            el.style.left = '0px';\n\n            if ( geometry.name === 'compound' ){\n\n                for ( var i = 0, l = geometry.children.length, ch; i < l; i++ ){\n                    ch = geometry.children[ i ];\n                    chel = newEl();\n                    chel.className = classpfx + geometry.name + ' ' + classpfx + 'child';\n                    chel.style.position = 'absolute';\n                    chel.style.top = '0px';\n                    chel.style.left = '0px';\n                    if ( this[ ch.g.name + 'Properties' ] ){\n                        this[ ch.g.name + 'Properties' ](chel, ch.g);\n                    }\n                    chel.style[cssTransform] = 'translate('+ch.pos._[0]+'px,'+ch.pos._[1]+'px) rotate('+ ch.angle +'rad)';\n                    el.appendChild( chel );\n                }\n\n            } else if ( this[ fn ] ){\n                this[ fn ](el, geometry);\n            }\n\n            this.el.appendChild( el );\n            return el;\n        },\n\n        // extended\n        connect: function( world ){\n\n            world.on( 'add:body', this.attach, this );\n            world.on( 'remove:body', this.detach, this );\n        },\n\n        // extended\n        disconnect: function( world ){\n\n            world.off( 'add:body', this.attach, this );\n            world.off( 'remove:body', this.detach, this );\n        },\n\n        /**\n         * DomRenderer#detach( data ) -> this\n         * - data (HTMLElement|Object): DOM node or event data (`data.body`)\n         *\n         * Event callback to detach a node from the DOM\n         **/\n        detach: function( data ){\n\n            // interpred data as either dom node or event data\n            var el = (data.nodeType && data) || (data.body && data.body.view)\n                ,par = el && el.parentNode\n                ;\n\n            if ( el && par ){\n                // remove view from dom\n                par.removeChild( el );\n            }\n\n            return this;\n        },\n\n        /**\n         * DomRenderer#attach( data ) -> this\n         * - data (HTMLElement|Object): DOM node or event data (`data.body`)\n         *\n         * Event callback to attach a node to the viewport\n         **/\n        attach: function( data ){\n\n            // interpred data as either dom node or event data\n            var el = (data.nodeType && data) || (data.body && data.body.view)\n                ;\n\n            if ( el ){\n                // attach to viewport\n                this.el.appendChild( el );\n            }\n\n            return this;\n        },\n\n        // extended\n        drawMeta: function( meta ){\n\n            this.els.fps.innerHTML = meta.fps.toFixed(2);\n            this.els.ipf.innerHTML = meta.ipf;\n        },\n\n        // extended\n        drawBody: function( body, view ){\n\n            var pos = body.state.pos\n                ,v = body.state.vel\n                ,os = body.offset\n                ,x\n                ,y\n                ,ang\n                ,t = this._interpolateTime\n                ;\n\n            // interpolate positions\n            x = pos._[0] + v._[0] * t;\n            y = pos._[1] + v._[1] * t;\n            ang = body.state.angular.pos + body.state.angular.vel * t;\n            view.style[cssTransform] = 'translate('+x+'px,'+y+'px) rotate('+ ang +'rad) translate('+os._[0]+'px,'+os._[1]+'px)';\n        }\n    };\n});\n\n\n// ---\n// inside: src/renderers/pixi-renderer.js\n\n/*\n * @requires pixi.js\n */\n/**\n * class PixiRenderer < Renderer\n *\n * Physics.renderer('pixi')\n *\n * Renderer that uses the PIXI.js library. [Documentation can be found here](https://github.com/wellcaffeinated/PhysicsJS/wiki/PIXI-Renderer).\n *\n * Additional config options:\n *\n * - metaEl: HTMLElement to write meta information like FPS and IPF into. (default: autogenerated)\n * - offset: Offset the shapes by this amount. (default: `{ x: 0, y: 0 }`)\n * - styles: Styles to use to draw the shapes. (see below)\n *\n * The styles property should contain _default_ styles for each shape you want to draw.\n *\n * Example:\n *\n * ```javascript\n * styles: {\n *    // Defines the default canvas colour\n *    'color': '0x66FF99',\n *\n *    'circle' : {\n *        strokeStyle: '0xE8900C',\n *        lineWidth: 3,\n *        fillStyle: '0xD5DE4C',\n *        angleIndicator: '0xE8900C',\n *        strokeAlpha: 1,\n *        fillAlpha: 1\n *    },\n *\n *    'convex-polygon' : {\n *        strokeStyle: '0xE8900C',\n *        lineWidth: 3,\n *        fillStyle: '0xD5DE4C',\n *        angleIndicator: '0xE8900C'\n *    }\n * }\n * ```\n *\n * Styles can also be defined on a per-body basis. Use the \"styles\" property for a body:\n *\n * Example:\n *\n * ```javascript\n * Physics.body('circle', {\n *     // ...\n *     styles: {\n *        strokeStyle: '0x542437',\n *        lineWidth: 1,\n *        fillStyle: '0x542437',\n *        angleIndicator: '0xFFFFFF'\n *    }\n * });\n * ```\n *\n * You can also define an image to use for a body:\n *\n * Example:\n *\n * ```javascript\n * Physics.body('circle', {\n *     // ...\n *     styles: {\n *        src: 'path/to/image.jpg',\n *        width: 40,\n *        height: 50,\n *        anchor: { x: 0.5, y: 0.5 }\n *    }\n * });\n * ```\n **/\n/* global PIXI */\nPhysics.renderer('pixi', function( parent ){\n\n    if ( !document ){\n        // must be in node environment\n        return {};\n    }\n\n    var Pi2 = Math.PI * 2\n        ,colors = {\n            white: '0xFFFFFF'\n            ,violet: '0x542437'\n            ,blue: '0x53777A'\n        }\n        ,fontStyles = {\n            font: \"18px monospace\",\n            fill: \"black\",\n            align: \"left\"\n        }\n\n        ,defaults = {\n\n            // the element to place meta data into\n            metaEl: null,\n            offset: { x: 0, y: 0 },\n            // Provide some default colours\n            styles: {\n                // Defines the default canvas colour\n                'color': false,\n\n                'point': colors.blue,\n\n                'circle' : {\n                    strokeStyle: colors.blue,\n                    lineWidth: 1,\n                    fillStyle: colors.blue,\n                    angleIndicator: colors.white,\n                    fillAlpha: 1,\n                    strokeAlpha: 1,\n                    alpha: 1\n                },\n\n                'rectangle' : {\n                    strokeStyle: colors.violet,\n                    lineWidth: 1,\n                    fillStyle: colors.violet,\n                    angleIndicator: colors.white,\n                    fillAlpha: 1,\n                    strokeAlpha: 1,\n                    alpha: 1\n                },\n\n                'convex-polygon' : {\n                    strokeStyle: colors.violet,\n                    lineWidth: 1,\n                    fillStyle: colors.violet,\n                    angleIndicator: colors.white,\n                    fillAlpha: 1,\n                    strokeAlpha: 1,\n                    alpha: 1\n                }\n            }\n        }\n        ;\n\n    return {\n\n        // extended\n        init: function( options ){\n\n            var self = this\n                ,el\n                ,isTransparent\n                ;\n\n            if (typeof PIXI === 'undefined') {\n                throw \"PIXI not present - cannot continue\";\n            }\n\n            // call parent init\n            parent.init.call(this, options);\n\n            // further options\n            this.options.defaults( defaults, true );\n            this.options.onChange(function(){\n                self.options.offset = new Physics.vector( self.options.offset );\n            });\n            this.options( options, true );\n\n            isTransparent = (!this.options.styles.color || this.options.styles.color === 'transparent');\n            // Hook in PIXI stage here\n            this.stage = new PIXI.Stage(this.options.styles.color);\n\n            // Create empty meta object for use later\n            this.meta = {};\n\n            el = (this.el && this.el.nodeName === 'CANVAS') ? el : null;\n            // add the renderer view element to the DOM according to its type\n            this.renderer = new PIXI.autoDetectRenderer(this.options.width, this.options.height, {\n                view: el,\n                transparent: isTransparent,\n                resolution: window.devicePixelRatio || 1\n            });\n\n            if ( !el ){\n                this.el = this.el || document.body;\n                // add to passed in element\n                this.el.appendChild( this.renderer.view );\n            }\n\n            if ( this.options.autoResize ){\n                this.resize();\n            } else {\n                this.resize( this.options.width, this.options.height );\n            }\n        },\n\n        // extended\n        resize: function( width, height ){\n\n            parent.resize.call( this, width, height );\n            this.renderer.resize( this.width, this.height );\n        },\n\n        // extended\n        connect: function( world ){\n\n            world.on( 'add:body', this.attach, this );\n            world.on( 'remove:body', this.detach, this );\n        },\n\n        // extended\n        disconnect: function( world ){\n\n            world.off( 'add:body', this.attach, this );\n            world.off( 'remove:body', this.detach, this );\n        },\n\n        /**\n         * PixiRenderer#detach( data ) -> this\n         * - data (PIXI.Graphics|Object): Graphics object or event data (`data.body`)\n         *\n         * Event callback to detach a child from the stage\n         **/\n        detach: function( data ){\n\n            // interpred data as either dom node or event data\n            var el = (data instanceof PIXI.Graphics && data) || (data.body && data.body.view);\n\n            if ( el ){\n                // remove view from dom\n                this.stage.removeChild( el );\n            }\n\n            return this;\n        },\n\n        /**\n         * PixiRenderer#attach( data ) -> this\n         * - data (PIXI.Graphics|Object): Graphics object or event data (`data.body`)\n         *\n         * Event callback to attach a child to the stage\n         **/\n        attach: function( data ){\n\n            // interpred data as either dom node or event data\n            var el = (data instanceof PIXI.Graphics && data) || (data.body && data.body.view);\n\n            if ( el ){\n                // attach to viewport\n                this.stage.addChild( el );\n            }\n\n            return this;\n        },\n\n        /**\n         * PixiRenderer#loadSpriteSheets( assetsToLoad, callback ) -> this\n         * - assetsToLoad (Array): Array of spritesheets to load\n         * - callback (Function): Function to call when loading is complete\n         *\n         * Loads textures defined in a spritesheet\n         **/\n        loadSpriteSheets: function( assetsToLoad, callback ){\n\n            if ( !Physics.util.isArray( assetsToLoad ) ) {\n                throw 'Spritesheets must be defined in arrays';\n            }\n\n            var self = this\n                ,loader = new PIXI.AssetLoader(assetsToLoad)\n                ;\n\n            // Start loading resources!\n            loader.load();\n\n            loader.on('onComplete', function(evt){\n                self.assetsLoaded = true;\n                callback();\n            });\n\n            return self;\n        },\n\n        /**\n         * PixiRenderer#drawBody( body, view )\n         * - body (Body): The body to draw\n         * - view (DisplayObject): The pixi display object\n         *\n         * Draw a PIXI.DisplayObject to the stage.\n         **/\n        drawBody: function( body, view ){\n            var pos = body.state.pos\n                ,v = body.state.vel\n                ,os = body.offset\n                ,t = this._interpolateTime || 0\n                ,x\n                ,y\n                ,ang\n                ;\n\n            // interpolate positions\n            x = pos._[0] + v._[0] * t;\n            y = pos._[1] + v._[1] * t;\n            ang = body.state.angular.pos + body.state.angular.vel * t;\n\n            view.position.set( x, y );\n            view.pivot.set( -os._[0], -os._[1] );\n            view.rotation = ang;\n        },\n\n        // extended\n        render: function( bodies, meta ){\n\n            parent.render.call(this, bodies, meta);\n            this.renderer.render(this.stage);\n        },\n\n        /**\n         * PixiRenderer#setStyles( graphics, styles ) -> PIXI.Graphics\n         * - graphics (PIXI.Graphics): The graphics object to set styles on\n         * - styles (Object): The styles configuration\n         * + (PIXI.Graphics): A graphic object\n         *\n         * Set styles on pixi graphics object\n         **/\n        setStyles: function( graphics, styles ){\n\n            if ( Physics.util.isObject(styles) ){\n\n                if ( styles.fillStyle && styles.fillStyle !== 'transparent' ){\n                    graphics.beginFill( styles.fillStyle );\n                    graphics.fillAlpha = styles.fillAlpha !== undefined ? styles.fillAlpha : 1;\n                } else {\n                    graphics.beginFill();\n                    graphics.fillAlpha = 0;\n                }\n\n                graphics.lineStyle( styles.lineWidth || 0, styles.strokeStyle, styles.strokeAlpha !== undefined ? styles.strokeAlpha : 1 );\n                graphics.alpha = styles.alpha !== undefined ? styles.alpha : 1;\n\n            } else {\n\n                if ( styles && styles !== 'transparent' ){\n                    graphics.beginFill( styles );\n                } else {\n                    graphics.beginFill();\n                    graphics.fillAlpha = 0;\n                }\n\n                graphics.lineStyle( 0 );\n            }\n\n            return graphics;\n        },\n\n        /**\n         * PixiRenderer#createCircle( x, y, r, styles ) -> PIXI.Graphics\n         * - x (Number): The x coord\n         * - y (Number): The y coord\n         * - r (Number): The circle radius\n         * - styles (Object): The styles configuration\n         * + (PIXI.Graphics): A graphic object representing a circle.\n         *\n         * Create a circle for use in PIXI stage\n         **/\n        createCircle: function( x, y, r, styles ){\n\n            var graphics = new PIXI.Graphics();\n            this.setStyles( graphics, styles );\n            graphics.drawCircle( x, y, r );\n            graphics.endFill();\n            return graphics;\n        },\n\n        /**\n         * PixiRenderer#createRect( x, y, r, styles ) -> PIXI.Graphics\n         * - x (Number): The x coord\n         * - y (Number): The y coord\n         * - width (Number): The rectangle width\n         * - height (Number): The rectangle height\n         * - styles (Object): The styles configuration\n         * + (PIXI.Graphics): A graphic object representing a circle.\n         *\n         * Create a rectangle for use in PIXI stage\n         **/\n        createRect: function( x, y, width, height, styles ){\n\n            var graphics = new PIXI.Graphics();\n            this.setStyles( graphics, styles );\n            graphics.drawRect( x, y, width, height );\n            graphics.endFill();\n            return graphics;\n        },\n\n        /**\n         * PixiRenderer#createPolygon( verts, styles ) -> PIXI.Graphics\n         * - verts (Array): Array of [[Vectorish]] vertices\n         * - styles (Object): The styles configuration\n         * + (PIXI.Graphics): A graphic object representing a polygon.\n         *\n         * Create a polygon for use in PIXI stage\n         **/\n        createPolygon: function( verts, styles ){\n\n            var vert = verts[0]\n                ,x = vert.x\n                ,y = vert.y\n                ,l = verts.length\n                ,start = {\n                    x: x\n                    ,y: y\n                }\n                ,graphics = new PIXI.Graphics()\n                ;\n\n            this.setStyles( graphics, styles );\n\n            graphics.moveTo(x, y);\n\n            for ( var i = 1; i < l; ++i ){\n\n                vert = verts[ i ];\n                x = vert.x;\n                y = vert.y;\n                graphics.lineTo(x, y);\n            }\n\n            if (l > 2){\n                graphics.lineTo(start.x, start.y);\n            }\n\n            graphics.endFill();\n            return graphics;\n        },\n\n        /**\n         * PixiRenderer#createLine( from, to, styles ) -> PIXI.Graphics\n         * - from (Vectorish): Starting point\n         * - to (Vectorish): Ending point\n         * - styles (Object): The styles configuration\n         * + (PIXI.Graphics): A graphic object representing a polygon.\n         *\n         * Create a line for use in PIXI stage\n         **/\n        createLine: function( from, to, styles ){\n\n            var x = from.x\n                ,y = from.y\n                ;\n\n            var graphics = new PIXI.Graphics();\n            this.setStyles( graphics, styles );\n\n            graphics.moveTo(x, y);\n\n            x = to.x;\n            y = to.y;\n\n            graphics.lineTo(x, y);\n\n            graphics.endFill();\n            return graphics;\n        },\n\n        // extended\n        createView: function( geometry, styles, parent ){\n\n            var view = null\n                ,aabb = geometry.aabb()\n                ,hw = aabb.hw + Math.abs(aabb.x)\n                ,hh = aabb.hh + Math.abs(aabb.y)\n                ,name = geometry.name\n                ;\n\n            parent = parent || this.stage;\n            styles = styles || this.options.styles[ name ] || this.options.styles.circle || {};\n\n            // must want an image\n            if ( styles.src ){\n                view = PIXI.Sprite.fromImage( styles.src );\n                view.anchor.set( 0.5, 0.5 );\n                if ( styles.anchor ) {\n                    view.anchor.x = styles.anchor.x;\n                    view.anchor.y = styles.anchor.y;\n                }\n                if ( styles.width ){\n                    view.width = styles.width;\n                }\n                if ( styles.height ){\n                    view.height = styles.height;\n                }\n                parent.addChild(view);\n                return view;\n            }\n\n            if (name === 'circle'){\n\n                view = this.createCircle(0, 0, geometry.radius, styles);\n\n            } else if (name === 'convex-polygon'){\n\n                view = this.createPolygon(geometry.vertices, styles);\n\n            } else if (name === 'rectangle'){\n\n                view = this.createRect(-geometry.width/2, -geometry.height/2, geometry.width, geometry.height, styles);\n            } else if (name === 'compound'){\n\n                view = new PIXI.Graphics();\n\n                for ( var i = 0, l = geometry.children.length, ch, chview; i < l; i++ ){\n                    ch = geometry.children[ i ];\n                    chview = this.createView( ch.g, styles, view );\n                    chview.position.set( ch.pos.x, ch.pos.y );\n                    chview.rotation = ch.angle;\n                }\n            } else {\n\n                // assume it's a point\n                view = this.createCircle(0, 0, 1, styles);\n            }\n\n            if ( name !== 'compound' && styles.angleIndicator && styles.angleIndicator !== 'transparent' ){\n\n                view.lineStyle( styles.lineWidth, styles.angleIndicator );\n                view.moveTo( 0, 0 );\n                view.lineTo( hw, 0 );\n            }\n\n            if ( name !== 'compound' ){\n                view.cacheAsBitmap = true;\n            }\n\n            parent.addChild(view);\n            return view;\n        },\n\n        // extended\n        drawMeta: function( meta ){\n            if (!this.meta.loaded){\n                // define the font styles here\n                this.meta.fps = new PIXI.Text('FPS: ' + meta.fps.toFixed(2), fontStyles);\n                this.meta.fps.position.x = 15;\n                this.meta.fps.position.y = 5;\n\n                this.meta.ipf = new PIXI.Text('IPF: ' + meta.ipf, fontStyles);\n                this.meta.ipf.position.x = 15;\n                this.meta.ipf.position.y = 30;\n\n                this.stage.addChild(this.meta.fps);\n                this.stage.addChild(this.meta.ipf);\n                this.meta.loaded = true;\n            } else {\n                this.meta.fps.setText('FPS: ' + meta.fps.toFixed(2));\n                this.meta.ipf.setText('IPF: ' + meta.ipf);\n            }\n        },\n\n        /**\n         * PixiRenderer#createDisplay( type, options ) -> PIXI.DisplayObject\n         * - type (String): The type of PIXI.DisplayObject to make\n         * - options (Object): Options to apply to the view.\n         * + (PIXI.DisplayObject): An object that is renderable.\n         *\n         * Create a PIXI sprite or movie clip.\n         **/\n        createDisplay: function( type, options ){\n            var view = null\n                ,texture = null\n                ;\n            switch (type){\n                // Create a sprite object\n                case 'sprite':\n                    texture = PIXI.Texture.fromImage(options.texture);\n                    view = new PIXI.Sprite(texture);\n                    if (options.anchor ) {\n                        view.anchor.x = options.anchor.x;\n                        view.anchor.y = options.anchor.y;\n                    }\n                    // If a container is specified, use add to that container\n                    if (options.container) {\n                        options.container.addChild(view);\n                    } else {\n                        // Otherwise just add the view to the stage\n                        this.stage.addChild(view);\n                    }\n                    return view;\n                // Create a movieclip object\n                case 'movieclip':\n                    if (!this.assetsLoaded) {\n                        throw \"No assets have been loaded. Use loadSpritesheet() first\";\n                    }\n                    var tex = []\n                        ,i = 0\n                        ;\n                    // Populate our movieclip\n                    for (i; i < options.frames.length; i++) {\n                        texture = PIXI.Texture.fromFrame(options.frames[i]);\n                        tex.push(texture);\n                    }\n                    view = new PIXI.MovieClip(tex);\n                    if (options.anchor ) {\n                        view.anchor.x = options.anchor.x;\n                        view.anchor.y = options.anchor.y;\n                    }\n                    // If a container is specified, use add to that container\n                    if (options.container) {\n                        options.container.addChild(view);\n                    } else {\n                        // Otherwise just add the view to the stage\n                        this.stage.addChild(view);\n                    }\n                    return view;\n                // Create a default case\n                default:\n                    throw 'Invalid PIXI.DisplayObject passed';\n            }\n        },\n\n        /**\n         * PixiRenderer#centerAnchor( view )\n         * - view (PIXI.DisplayObject): The view to center\n         *\n         * Centers the anchor to {x: 0.5, y: 0.5} of a view\n         **/\n        centerAnchor: function( view ) {\n            if (view !== null){\n                view.anchor.x = 0.5;\n                view.anchor.y = 0.5;\n            }\n        }\n    };\n});\n\n\n// ---\n// inside: src/outro.js\n\nreturn Physics;\n}));"],
  "mappings": "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",
  "names": ["window", "Physics", "getNextSearchDir", "getClosestPoints", "gjk", "Transform", "Vector", "Decorator", "extend", "mixin", "factory", "name", "fn", "def", "Scratch", "Scratchpad", "PubSub", "wrapRule", "$eq", "$ne", "$in", "$nin", "$at", "$and", "$or", "Query", "execCallbacks", "World", "getSupportFn", "checkGJK", "checkCircles", "checkPair", "checkGeneral", "checkEdgeCollide", "getUniqueId", "toTitleCase", "pfx", "parent"]
}
